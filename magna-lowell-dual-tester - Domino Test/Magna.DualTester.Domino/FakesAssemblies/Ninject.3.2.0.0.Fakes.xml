<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ninject.3.2.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Ninject.Activation.Blocks.Fakes.ShimActivationBlock">
            <summary>Shim type of Ninject.Activation.Blocks.ActivationBlock</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.#ctor(Ninject.Activation.Blocks.ActivationBlock)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.CanResolveIRequest">
            <summary>Sets the shim of ActivationBlock.CanResolve(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.CanResolveIRequestBoolean">
            <summary>Sets the shim of ActivationBlock.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.CreateRequestTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the shim of ActivationBlock.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.DisposeBoolean">
            <summary>Sets the shim of ActivationBlock.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.DisposedAddEventHandler">
            <summary>Sets the shim of ActivationBlock.add_Disposed(EventHandler value)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.DisposedRemoveEventHandler">
            <summary>Sets the shim of ActivationBlock.remove_Disposed(EventHandler value)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of ActivationBlock.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.ParentGet">
            <summary>Sets the shim of ActivationBlock.get_Parent()</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.ParentSetIResolutionRoot">
            <summary>Sets the shim of ActivationBlock.set_Parent(IResolutionRoot value)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.ReleaseObject">
            <summary>Sets the shim of ActivationBlock.Release(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances.ResolveIRequest">
            <summary>Sets the shim of ActivationBlock.Resolve(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.AllInstances._CreateRequestb__2">
            <summary>Sets the shim of ActivationBlock.&lt;CreateRequest&gt;b__2()</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.Bind(Ninject.Activation.Blocks.IActivationBlock)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.Bind(Ninject.Infrastructure.Disposal.INotifyWhenDisposed)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.Bind(Ninject.Syntax.IResolutionRoot)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.CanResolveIRequest">
            <summary>Sets the shim of ActivationBlock.CanResolve(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.CanResolveIRequestBoolean">
            <summary>Sets the shim of ActivationBlock.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.ConstructorIResolutionRoot">
            <summary>Sets the shim of ActivationBlock.ActivationBlock(IResolutionRoot parent)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.CreateRequestTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the shim of ActivationBlock.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.DisposeBoolean">
            <summary>Sets the shim of ActivationBlock.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.DisposedAddEventHandler">
            <summary>Sets the shim of ActivationBlock.add_Disposed(EventHandler value)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.DisposedRemoveEventHandler">
            <summary>Sets the shim of ActivationBlock.remove_Disposed(EventHandler value)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of ActivationBlock.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.ParentGet">
            <summary>Sets the shim of ActivationBlock.get_Parent()</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.ParentSetIResolutionRoot">
            <summary>Sets the shim of ActivationBlock.set_Parent(IResolutionRoot value)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.ReleaseObject">
            <summary>Sets the shim of ActivationBlock.Release(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock.ResolveIRequest">
            <summary>Sets the shim of ActivationBlock.Resolve(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.ShimActivationBlock._CreateRequestb__2">
            <summary>Sets the shim of ActivationBlock.&lt;CreateRequest&gt;b__2()</summary>
        </member>
        <member name="T:Ninject.Activation.Blocks.Fakes.StubActivationBlock">
            <summary>Stub type of Ninject.Activation.Blocks.ActivationBlock</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubActivationBlock.#ctor(Ninject.Syntax.IResolutionRoot)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.StubActivationBlock.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubActivationBlock.CreateRequest(System.Type,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>Sets the stub of ActivationBlock.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubActivationBlock.CreateRequestTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the stub of ActivationBlock.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubActivationBlock.Dispose(System.Boolean)">
            <summary>Sets the stub of ActivationBlock.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubActivationBlock.DisposeBoolean">
            <summary>Sets the stub of ActivationBlock.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubActivationBlock.InitializeStub">
            <summary>Initializes a new instance of type StubActivationBlock</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.StubActivationBlock.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.StubActivationBlock.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Blocks.Fakes.StubIActivationBlock">
            <summary>Stub type of Ninject.Activation.Blocks.IActivationBlock</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.#ctor">
            <summary>Initializes a new instance of type StubIActivationBlock</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.CanResolveIRequest">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.CanResolveIRequestBoolean">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.CreateRequestTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the stub of IResolutionRoot.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Ninject#Infrastructure#Disposal#IDisposableObject#IsDisposed">
            <summary>Sets the stub of IDisposableObject.get_IsDisposed()</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.IsDisposedGet">
            <summary>Sets the stub of IDisposableObject.get_IsDisposed()</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Ninject#Syntax#IResolutionRoot#CanResolve(Ninject.Activation.IRequest)">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Ninject#Syntax#IResolutionRoot#CanResolve(Ninject.Activation.IRequest,System.Boolean)">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Ninject#Syntax#IResolutionRoot#CreateRequest(System.Type,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>Sets the stub of IResolutionRoot.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Ninject#Syntax#IResolutionRoot#Release(System.Object)">
            <summary>Sets the stub of IResolutionRoot.Release(Object instance)</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.Ninject#Syntax#IResolutionRoot#Resolve(Ninject.Activation.IRequest)">
            <summary>Sets the stub of IResolutionRoot.Resolve(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.ReleaseObject">
            <summary>Sets the stub of IResolutionRoot.Release(Object instance)</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.ResolveIRequest">
            <summary>Sets the stub of IResolutionRoot.Resolve(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Ninject.Activation.Blocks.Fakes.StubIActivationBlock.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.ShimActivationCache">
            <summary>Shim type of Ninject.Activation.Caching.ActivationCache</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimActivationCache.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimActivationCache.#ctor(Ninject.Activation.Caching.ActivationCache)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.ActivatedObjectCountGet">
            <summary>Sets the shim of ActivationCache.get_ActivatedObjectCount()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.AddActivatedInstanceObject">
            <summary>Sets the shim of ActivationCache.AddActivatedInstance(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.AddDeactivatedInstanceObject">
            <summary>Sets the shim of ActivationCache.AddDeactivatedInstance(Object instance)</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.ShimActivationCache.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.AllInstances.ActivatedObjectCountGet">
            <summary>Sets the shim of ActivationCache.get_ActivatedObjectCount()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.AllInstances.AddActivatedInstanceObject">
            <summary>Sets the shim of ActivationCache.AddActivatedInstance(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.AllInstances.AddDeactivatedInstanceObject">
            <summary>Sets the shim of ActivationCache.AddDeactivatedInstance(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.AllInstances.Clear">
            <summary>Sets the shim of ActivationCache.Clear()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.AllInstances.DeactivatedObjectCountGet">
            <summary>Sets the shim of ActivationCache.get_DeactivatedObjectCount()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.AllInstances.IsActivatedObject">
            <summary>Sets the shim of ActivationCache.IsActivated(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.AllInstances.IsDeactivatedObject">
            <summary>Sets the shim of ActivationCache.IsDeactivated(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.AllInstances.Prune">
            <summary>Sets the shim of ActivationCache.Prune()</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimActivationCache.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimActivationCache.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimActivationCache.Bind(Ninject.Activation.Caching.IActivationCache)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimActivationCache.Bind(Ninject.Activation.Caching.IPruneable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimActivationCache.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimActivationCache.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimActivationCache.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.Clear">
            <summary>Sets the shim of ActivationCache.Clear()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.ConstructorICachePruner">
            <summary>Sets the shim of ActivationCache.ActivationCache(ICachePruner cachePruner)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.DeactivatedObjectCountGet">
            <summary>Sets the shim of ActivationCache.get_DeactivatedObjectCount()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.IsActivatedObject">
            <summary>Sets the shim of ActivationCache.IsActivated(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.IsDeactivatedObject">
            <summary>Sets the shim of ActivationCache.IsDeactivated(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.Prune">
            <summary>Sets the shim of ActivationCache.Prune()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache.RemoveDeadObjectsHashSetOfObject">
            <summary>Sets the shim of ActivationCache.RemoveDeadObjects(HashSet`1&lt;Object&gt; objects)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimActivationCache._RemoveDeadObjectsb__6Object">
            <summary>Sets the shim of ActivationCache.&lt;RemoveDeadObjects&gt;b__6(Object reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.ShimCache">
            <summary>Shim type of Ninject.Activation.Caching.Cache</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimCache.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimCache.#ctor(Ninject.Activation.Caching.Cache)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances.Clear">
            <summary>Sets the shim of Cache.Clear()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances.ClearObject">
            <summary>Sets the shim of Cache.Clear(Object scope)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances.CountGet">
            <summary>Sets the shim of Cache.get_Count()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances.DisposeBoolean">
            <summary>Sets the shim of Cache.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances.PipelineGet">
            <summary>Sets the shim of Cache.get_Pipeline()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances.PipelineSetIPipeline">
            <summary>Sets the shim of Cache.set_Pipeline(IPipeline value)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances.Prune">
            <summary>Sets the shim of Cache.Prune()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances.ReleaseObject">
            <summary>Sets the shim of Cache.Release(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances.RememberIContextInstanceReference">
            <summary>Sets the shim of Cache.Remember(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.AllInstances.TryGetIContext">
            <summary>Sets the shim of Cache.TryGet(IContext context)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimCache.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimCache.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimCache.Bind(Ninject.Activation.Caching.ICache)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimCache.Bind(Ninject.Activation.Caching.IPruneable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimCache.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimCache.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimCache.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.Clear">
            <summary>Sets the shim of Cache.Clear()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.ClearObject">
            <summary>Sets the shim of Cache.Clear(Object scope)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.ConstructorIPipelineICachePruner">
            <summary>Sets the shim of Cache.Cache(IPipeline pipeline, ICachePruner cachePruner)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.CountGet">
            <summary>Sets the shim of Cache.get_Count()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.DisposeBoolean">
            <summary>Sets the shim of Cache.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.PipelineGet">
            <summary>Sets the shim of Cache.get_Pipeline()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.PipelineSetIPipeline">
            <summary>Sets the shim of Cache.set_Pipeline(IPipeline value)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.Prune">
            <summary>Sets the shim of Cache.Prune()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.ReleaseObject">
            <summary>Sets the shim of Cache.Release(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.RememberIContextInstanceReference">
            <summary>Sets the shim of Cache.Remember(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimCache.TryGetIContext">
            <summary>Sets the shim of Cache.TryGet(IContext context)</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner">
            <summary>Shim type of Ninject.Activation.Caching.GarbageCollectionCachePruner</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.#ctor(Ninject.Activation.Caching.GarbageCollectionCachePruner)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.AllInstances.DisposeBoolean">
            <summary>Sets the shim of GarbageCollectionCachePruner.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.AllInstances.GetTimeoutInMilliseconds">
            <summary>Sets the shim of GarbageCollectionCachePruner.GetTimeoutInMilliseconds()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.AllInstances.PruneCacheIfGarbageCollectorHasRunObject">
            <summary>Sets the shim of GarbageCollectionCachePruner.PruneCacheIfGarbageCollectorHasRun(Object state)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.AllInstances.StartIPruneable">
            <summary>Sets the shim of GarbageCollectionCachePruner.Start(IPruneable pruneable)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.AllInstances.Stop">
            <summary>Sets the shim of GarbageCollectionCachePruner.Stop()</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.Bind(Ninject.Activation.Caching.ICachePruner)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.Constructor">
            <summary>Sets the shim of GarbageCollectionCachePruner.GarbageCollectionCachePruner()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.DisposeBoolean">
            <summary>Sets the shim of GarbageCollectionCachePruner.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.GetTimeoutInMilliseconds">
            <summary>Sets the shim of GarbageCollectionCachePruner.GetTimeoutInMilliseconds()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.PruneCacheIfGarbageCollectorHasRunObject">
            <summary>Sets the shim of GarbageCollectionCachePruner.PruneCacheIfGarbageCollectorHasRun(Object state)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.StartIPruneable">
            <summary>Sets the shim of GarbageCollectionCachePruner.Start(IPruneable pruneable)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner.Stop">
            <summary>Sets the shim of GarbageCollectionCachePruner.Stop()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimGarbageCollectionCachePruner._PruneCacheIfGarbageCollectorHasRunb__2IPruneable">
            <summary>Sets the shim of GarbageCollectionCachePruner.&lt;PruneCacheIfGarbageCollectorHasRun&gt;b__2(IPruneable cache)</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer">
            <summary>Shim type of Ninject.Activation.Caching.WeakReferenceEqualityComparer</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.#ctor(Ninject.Activation.Caching.WeakReferenceEqualityComparer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.AllInstances.EqualsObjectObject">
            <summary>Sets the shim of WeakReferenceEqualityComparer.Equals(Object x, Object y)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.AllInstances.GetHashCodeObject">
            <summary>Sets the shim of WeakReferenceEqualityComparer.GetHashCode(Object obj)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.Bind(System.Collections.Generic.IEqualityComparer{System.Object})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.Constructor">
            <summary>Sets the shim of WeakReferenceEqualityComparer.WeakReferenceEqualityComparer()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.EqualsObjectObject">
            <summary>Sets the shim of WeakReferenceEqualityComparer.Equals(Object x, Object y)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.ShimWeakReferenceEqualityComparer.GetHashCodeObject">
            <summary>Sets the shim of WeakReferenceEqualityComparer.GetHashCode(Object obj)</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.StubActivationCache">
            <summary>Stub type of Ninject.Activation.Caching.ActivationCache</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubActivationCache.#ctor(Ninject.Activation.Caching.ICachePruner)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubActivationCache.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubActivationCache.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubActivationCache.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubActivationCache.InitializeStub">
            <summary>Initializes a new instance of type StubActivationCache</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubActivationCache.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubActivationCache.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.StubCache">
            <summary>Stub type of Ninject.Activation.Caching.Cache</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubCache.#ctor(Ninject.Activation.IPipeline,Ninject.Activation.Caching.ICachePruner)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubCache.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubCache.Dispose(System.Boolean)">
            <summary>Sets the stub of Cache.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubCache.DisposeBoolean">
            <summary>Sets the stub of Cache.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubCache.InitializeStub">
            <summary>Initializes a new instance of type StubCache</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubCache.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubCache.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.StubGarbageCollectionCachePruner">
            <summary>Stub type of Ninject.Activation.Caching.GarbageCollectionCachePruner</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubGarbageCollectionCachePruner.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubGarbageCollectionCachePruner.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubGarbageCollectionCachePruner.Dispose(System.Boolean)">
            <summary>Sets the stub of GarbageCollectionCachePruner.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubGarbageCollectionCachePruner.DisposeBoolean">
            <summary>Sets the stub of GarbageCollectionCachePruner.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubGarbageCollectionCachePruner.InitializeStub">
            <summary>Initializes a new instance of type StubGarbageCollectionCachePruner</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubGarbageCollectionCachePruner.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubGarbageCollectionCachePruner.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.StubIActivationCache">
            <summary>Stub type of Ninject.Activation.Caching.IActivationCache</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubIActivationCache.#ctor">
            <summary>Initializes a new instance of type StubIActivationCache</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubIActivationCache.AddActivatedInstanceObject">
            <summary>Sets the stub of IActivationCache.AddActivatedInstance(Object instance)</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubIActivationCache.AddDeactivatedInstanceObject">
            <summary>Sets the stub of IActivationCache.AddDeactivatedInstance(Object instance)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubIActivationCache.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIActivationCache.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubIActivationCache.Clear">
            <summary>Sets the stub of IActivationCache.Clear()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubIActivationCache.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubIActivationCache.IsActivatedObject">
            <summary>Sets the stub of IActivationCache.IsActivated(Object instance)</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubIActivationCache.IsDeactivatedObject">
            <summary>Sets the stub of IActivationCache.IsDeactivated(Object instance)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubIActivationCache.Ninject#Activation#Caching#IActivationCache#AddActivatedInstance(System.Object)">
            <summary>Sets the stub of IActivationCache.AddActivatedInstance(Object instance)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubIActivationCache.Ninject#Activation#Caching#IActivationCache#AddDeactivatedInstance(System.Object)">
            <summary>Sets the stub of IActivationCache.AddDeactivatedInstance(Object instance)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubIActivationCache.Ninject#Activation#Caching#IActivationCache#Clear">
            <summary>Sets the stub of IActivationCache.Clear()</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubIActivationCache.Ninject#Activation#Caching#IActivationCache#IsActivated(System.Object)">
            <summary>Sets the stub of IActivationCache.IsActivated(Object instance)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubIActivationCache.Ninject#Activation#Caching#IActivationCache#IsDeactivated(System.Object)">
            <summary>Sets the stub of IActivationCache.IsDeactivated(Object instance)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubIActivationCache.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubIActivationCache.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubIActivationCache.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubIActivationCache.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.StubICache">
            <summary>Stub type of Ninject.Activation.Caching.ICache</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICache.#ctor">
            <summary>Initializes a new instance of type StubICache</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICache.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubICache.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICache.Clear">
            <summary>Sets the stub of ICache.Clear()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICache.ClearObject">
            <summary>Sets the stub of ICache.Clear(Object scope)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubICache.Ninject#Activation#Caching#ICache#Count">
            <summary>Sets the stub of ICache.get_Count()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICache.CountGet">
            <summary>Sets the stub of ICache.get_Count()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICache.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICache.Ninject#Activation#Caching#ICache#Clear">
            <summary>Sets the stub of ICache.Clear()</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICache.Ninject#Activation#Caching#ICache#Clear(System.Object)">
            <summary>Sets the stub of ICache.Clear(Object scope)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICache.Ninject#Activation#Caching#ICache#Release(System.Object)">
            <summary>Sets the stub of ICache.Release(Object instance)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICache.Ninject#Activation#Caching#ICache#Remember(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of ICache.Remember(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICache.Ninject#Activation#Caching#ICache#TryGet(Ninject.Activation.IContext)">
            <summary>Sets the stub of ICache.TryGet(IContext context)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICache.Ninject#Activation#Caching#IPruneable#Prune">
            <summary>Sets the stub of IPruneable.Prune()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICache.Prune">
            <summary>Sets the stub of IPruneable.Prune()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICache.ReleaseObject">
            <summary>Sets the stub of ICache.Release(Object instance)</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICache.RememberIContextInstanceReference">
            <summary>Sets the stub of ICache.Remember(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubICache.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICache.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICache.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICache.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICache.TryGetIContext">
            <summary>Sets the stub of ICache.TryGet(IContext context)</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.StubICachePruner">
            <summary>Stub type of Ninject.Activation.Caching.ICachePruner</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICachePruner.#ctor">
            <summary>Initializes a new instance of type StubICachePruner</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICachePruner.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubICachePruner.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICachePruner.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICachePruner.Ninject#Activation#Caching#ICachePruner#Start(Ninject.Activation.Caching.IPruneable)">
            <summary>Sets the stub of ICachePruner.Start(IPruneable cache)</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICachePruner.Ninject#Activation#Caching#ICachePruner#Stop">
            <summary>Sets the stub of ICachePruner.Stop()</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubICachePruner.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICachePruner.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICachePruner.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICachePruner.StartIPruneable">
            <summary>Sets the stub of ICachePruner.Start(IPruneable cache)</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubICachePruner.Stop">
            <summary>Sets the stub of ICachePruner.Stop()</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubICachePruner.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.StubIPruneable">
            <summary>Stub type of Ninject.Activation.Caching.IPruneable</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubIPruneable.#ctor">
            <summary>Initializes a new instance of type StubIPruneable</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubIPruneable.Ninject#Activation#Caching#IPruneable#Prune">
            <summary>Sets the stub of IPruneable.Prune()</summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Fakes.StubIPruneable.Prune">
            <summary>Sets the stub of IPruneable.Prune()</summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Fakes.StubWeakReferenceEqualityComparer">
            <summary>Stub type of Ninject.Activation.Caching.WeakReferenceEqualityComparer</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubWeakReferenceEqualityComparer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubWeakReferenceEqualityComparer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Fakes.StubWeakReferenceEqualityComparer.InitializeStub">
            <summary>Initializes a new instance of type StubWeakReferenceEqualityComparer</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubWeakReferenceEqualityComparer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Fakes.StubWeakReferenceEqualityComparer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.ShimContext">
            <summary>Shim type of Ninject.Activation.Context</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimContext.#ctor(Ninject.Activation.Context)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.ShimContext.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.BindingGet">
            <summary>Sets the shim of Context.get_Binding()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.BindingSetIBinding">
            <summary>Sets the shim of Context.set_Binding(IBinding value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.CacheGet">
            <summary>Sets the shim of Context.get_Cache()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.CacheSetICache">
            <summary>Sets the shim of Context.set_Cache(ICache value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.GenericArgumentsGet">
            <summary>Sets the shim of Context.get_GenericArguments()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.GenericArgumentsSetTypeArray">
            <summary>Sets the shim of Context.set_GenericArguments(Type[] value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.GetProvider">
            <summary>Sets the shim of Context.GetProvider()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.GetScope">
            <summary>Sets the shim of Context.GetScope()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.HasInferredGenericArgumentsGet">
            <summary>Sets the shim of Context.get_HasInferredGenericArguments()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.HasInferredGenericArgumentsSetBoolean">
            <summary>Sets the shim of Context.set_HasInferredGenericArguments(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.KernelGet">
            <summary>Sets the shim of Context.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.KernelSetIKernel">
            <summary>Sets the shim of Context.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.ParametersGet">
            <summary>Sets the shim of Context.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.ParametersSetICollectionOfIParameter">
            <summary>Sets the shim of Context.set_Parameters(ICollection`1&lt;IParameter&gt; value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.PipelineGet">
            <summary>Sets the shim of Context.get_Pipeline()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.PipelineSetIPipeline">
            <summary>Sets the shim of Context.set_Pipeline(IPipeline value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.PlanGet">
            <summary>Sets the shim of Context.get_Plan()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.PlanSetIPlan">
            <summary>Sets the shim of Context.set_Plan(IPlan value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.PlannerGet">
            <summary>Sets the shim of Context.get_Planner()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.PlannerSetIPlanner">
            <summary>Sets the shim of Context.set_Planner(IPlanner value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.RequestGet">
            <summary>Sets the shim of Context.get_Request()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.RequestSetIRequest">
            <summary>Sets the shim of Context.set_Request(IRequest value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.Resolve">
            <summary>Sets the shim of Context.Resolve()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.AllInstances.ResolveInternalObject">
            <summary>Sets the shim of Context.ResolveInternal(Object scope)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimContext.Bind(Ninject.Activation.IContext)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.BindingGet">
            <summary>Sets the shim of Context.get_Binding()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.BindingSetIBinding">
            <summary>Sets the shim of Context.set_Binding(IBinding value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.CacheGet">
            <summary>Sets the shim of Context.get_Cache()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.CacheSetICache">
            <summary>Sets the shim of Context.set_Cache(ICache value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.ConstructorIKernelIRequestIBindingICacheIPlannerIPipeline">
            <summary>Sets the shim of Context.Context(IKernel kernel, IRequest request, IBinding binding, ICache cache, IPlanner planner, IPipeline pipeline)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.GenericArgumentsGet">
            <summary>Sets the shim of Context.get_GenericArguments()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.GenericArgumentsSetTypeArray">
            <summary>Sets the shim of Context.set_GenericArguments(Type[] value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.GetProvider">
            <summary>Sets the shim of Context.GetProvider()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.GetScope">
            <summary>Sets the shim of Context.GetScope()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.HasInferredGenericArgumentsGet">
            <summary>Sets the shim of Context.get_HasInferredGenericArguments()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.HasInferredGenericArgumentsSetBoolean">
            <summary>Sets the shim of Context.set_HasInferredGenericArguments(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.KernelGet">
            <summary>Sets the shim of Context.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.KernelSetIKernel">
            <summary>Sets the shim of Context.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.ParametersGet">
            <summary>Sets the shim of Context.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.ParametersSetICollectionOfIParameter">
            <summary>Sets the shim of Context.set_Parameters(ICollection`1&lt;IParameter&gt; value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.PipelineGet">
            <summary>Sets the shim of Context.get_Pipeline()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.PipelineSetIPipeline">
            <summary>Sets the shim of Context.set_Pipeline(IPipeline value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.PlanGet">
            <summary>Sets the shim of Context.get_Plan()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.PlanSetIPlan">
            <summary>Sets the shim of Context.set_Plan(IPlan value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.PlannerGet">
            <summary>Sets the shim of Context.get_Planner()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.PlannerSetIPlanner">
            <summary>Sets the shim of Context.set_Planner(IPlanner value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.RequestGet">
            <summary>Sets the shim of Context.get_Request()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.RequestSetIRequest">
            <summary>Sets the shim of Context.set_Request(IRequest value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.Resolve">
            <summary>Sets the shim of Context.Resolve()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimContext.ResolveInternalObject">
            <summary>Sets the shim of Context.ResolveInternal(Object scope)</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.ShimInstanceReference">
            <summary>Shim type of Ninject.Activation.InstanceReference</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimInstanceReference.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimInstanceReference.#ctor(Ninject.Activation.InstanceReference)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.ShimInstanceReference.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimInstanceReference.AllInstances.AsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.InstanceReference,``0})">
            <summary>Sets the shim of InstanceReference.As()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimInstanceReference.AllInstances.IfInstanceIsOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Ninject.Activation.InstanceReference,System.Action{``0}})">
            <summary>Sets the shim of InstanceReference.IfInstanceIs(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimInstanceReference.AllInstances.InstanceGet">
            <summary>Sets the shim of InstanceReference.get_Instance()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimInstanceReference.AllInstances.InstanceSetObject">
            <summary>Sets the shim of InstanceReference.set_Instance(Object value)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimInstanceReference.AllInstances.IsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.InstanceReference,System.Boolean})">
            <summary>Sets the shim of InstanceReference.Is()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimInstanceReference.AsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets the shim of InstanceReference.As()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimInstanceReference.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimInstanceReference.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimInstanceReference.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimInstanceReference.Constructor">
            <summary>Sets the shim of InstanceReference.InstanceReference()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimInstanceReference.IfInstanceIsOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Action{``0}})">
            <summary>Sets the shim of InstanceReference.IfInstanceIs(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimInstanceReference.InstanceGet">
            <summary>Sets the shim of InstanceReference.get_Instance()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimInstanceReference.InstanceSetObject">
            <summary>Sets the shim of InstanceReference.set_Instance(Object value)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimInstanceReference.IsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Boolean})">
            <summary>Sets the shim of InstanceReference.Is()</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.ShimPipeline">
            <summary>Shim type of Ninject.Activation.Pipeline</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimPipeline.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimPipeline.#ctor(Ninject.Activation.Pipeline)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimPipeline.ActivateIContextInstanceReference">
            <summary>Sets the shim of Pipeline.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.ShimPipeline.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimPipeline.AllInstances.ActivateIContextInstanceReference">
            <summary>Sets the shim of Pipeline.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimPipeline.AllInstances.DeactivateIContextInstanceReference">
            <summary>Sets the shim of Pipeline.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimPipeline.AllInstances.StrategiesGet">
            <summary>Sets the shim of Pipeline.get_Strategies()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimPipeline.AllInstances.StrategiesSetIListOfIActivationStrategy">
            <summary>Sets the shim of Pipeline.set_Strategies(IList`1&lt;IActivationStrategy&gt; value)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimPipeline.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimPipeline.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimPipeline.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimPipeline.Bind(Ninject.Activation.IPipeline)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimPipeline.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimPipeline.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimPipeline.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimPipeline.ConstructorIEnumerableOfIActivationStrategyIActivationCache">
            <summary>Sets the shim of Pipeline.Pipeline(IEnumerable`1&lt;IActivationStrategy&gt; strategies, IActivationCache activationCache)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimPipeline.DeactivateIContextInstanceReference">
            <summary>Sets the shim of Pipeline.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimPipeline.StrategiesGet">
            <summary>Sets the shim of Pipeline.get_Strategies()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimPipeline.StrategiesSetIListOfIActivationStrategy">
            <summary>Sets the shim of Pipeline.set_Strategies(IList`1&lt;IActivationStrategy&gt; value)</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.ShimProvider`1">
            <summary>Shim type of Ninject.Activation.Provider`1</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimProvider`1.#ctor(Ninject.Activation.Provider{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.ShimProvider`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimProvider`1.AllInstances.CreateIContext">
            <summary>Sets the shim of Provider`1.Create(IContext context)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimProvider`1.AllInstances.TypeGet">
            <summary>Sets the shim of Provider`1.get_Type()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimProvider`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimProvider`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimProvider`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimProvider`1.Bind(Ninject.Activation.IProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimProvider`1.Bind(Ninject.Activation.IProvider{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimProvider`1.Constructor">
            <summary>Sets the shim of Provider`1.Provider`1()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimProvider`1.CreateIContext">
            <summary>Sets the shim of Provider`1.Create(IContext context)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimProvider`1.TypeGet">
            <summary>Sets the shim of Provider`1.get_Type()</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.ShimRequest">
            <summary>Shim type of Ninject.Activation.Request</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimRequest.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimRequest.#ctor(Ninject.Activation.Request)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ActiveBindingsGet">
            <summary>Sets the shim of Request.get_ActiveBindings()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ActiveBindingsSetStackOfIBinding">
            <summary>Sets the shim of Request.set_ActiveBindings(Stack`1&lt;IBinding&gt; value)</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.ShimRequest.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ActiveBindingsGet">
            <summary>Sets the shim of Request.get_ActiveBindings()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ActiveBindingsSetStackOfIBinding">
            <summary>Sets the shim of Request.set_ActiveBindings(Stack`1&lt;IBinding&gt; value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ConstraintGet">
            <summary>Sets the shim of Request.get_Constraint()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ConstraintSetFuncOfIBindingMetadataBoolean">
            <summary>Sets the shim of Request.set_Constraint(Func`2&lt;IBindingMetadata,Boolean&gt; value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.CreateChildTypeIContextITarget">
            <summary>Sets the shim of Request.CreateChild(Type service, IContext parentContext, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.DepthGet">
            <summary>Sets the shim of Request.get_Depth()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.DepthSetInt32">
            <summary>Sets the shim of Request.set_Depth(Int32 value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ForceUniqueGet">
            <summary>Sets the shim of Request.get_ForceUnique()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ForceUniqueSetBoolean">
            <summary>Sets the shim of Request.set_ForceUnique(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.GetScope">
            <summary>Sets the shim of Request.GetScope()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.IsOptionalGet">
            <summary>Sets the shim of Request.get_IsOptional()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.IsOptionalSetBoolean">
            <summary>Sets the shim of Request.set_IsOptional(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.IsUniqueGet">
            <summary>Sets the shim of Request.get_IsUnique()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.IsUniqueSetBoolean">
            <summary>Sets the shim of Request.set_IsUnique(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.MatchesIBinding">
            <summary>Sets the shim of Request.Matches(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ParametersGet">
            <summary>Sets the shim of Request.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ParametersSetICollectionOfIParameter">
            <summary>Sets the shim of Request.set_Parameters(ICollection`1&lt;IParameter&gt; value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ParentContextGet">
            <summary>Sets the shim of Request.get_ParentContext()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ParentContextSetIContext">
            <summary>Sets the shim of Request.set_ParentContext(IContext value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ParentRequestGet">
            <summary>Sets the shim of Request.get_ParentRequest()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ParentRequestSetIRequest">
            <summary>Sets the shim of Request.set_ParentRequest(IRequest value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ScopeCallbackGet">
            <summary>Sets the shim of Request.get_ScopeCallback()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ScopeCallbackSetFuncOfObject">
            <summary>Sets the shim of Request.set_ScopeCallback(Func`1&lt;Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ServiceGet">
            <summary>Sets the shim of Request.get_Service()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.ServiceSetType">
            <summary>Sets the shim of Request.set_Service(Type value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.TargetGet">
            <summary>Sets the shim of Request.get_Target()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.AllInstances.TargetSetITarget">
            <summary>Sets the shim of Request.set_Target(ITarget value)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimRequest.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimRequest.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.ShimRequest.Bind(Ninject.Activation.IRequest)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ConstraintGet">
            <summary>Sets the shim of Request.get_Constraint()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ConstraintSetFuncOfIBindingMetadataBoolean">
            <summary>Sets the shim of Request.set_Constraint(Func`2&lt;IBindingMetadata,Boolean&gt; value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ConstructorIContextTypeITargetFuncOfObject">
            <summary>Sets the shim of Request.Request(IContext parentContext, Type service, ITarget target, Func`1&lt;Object&gt; scopeCallback)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ConstructorTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterFuncOfObjectBooleanBoolean">
            <summary>Sets the shim of Request.Request(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Func`1&lt;Object&gt; scopeCallback, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.CreateChildTypeIContextITarget">
            <summary>Sets the shim of Request.CreateChild(Type service, IContext parentContext, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.DepthGet">
            <summary>Sets the shim of Request.get_Depth()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.DepthSetInt32">
            <summary>Sets the shim of Request.set_Depth(Int32 value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ForceUniqueGet">
            <summary>Sets the shim of Request.get_ForceUnique()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ForceUniqueSetBoolean">
            <summary>Sets the shim of Request.set_ForceUnique(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.GetScope">
            <summary>Sets the shim of Request.GetScope()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.IsOptionalGet">
            <summary>Sets the shim of Request.get_IsOptional()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.IsOptionalSetBoolean">
            <summary>Sets the shim of Request.set_IsOptional(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.IsUniqueGet">
            <summary>Sets the shim of Request.get_IsUnique()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.IsUniqueSetBoolean">
            <summary>Sets the shim of Request.set_IsUnique(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.MatchesIBinding">
            <summary>Sets the shim of Request.Matches(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ParametersGet">
            <summary>Sets the shim of Request.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ParametersSetICollectionOfIParameter">
            <summary>Sets the shim of Request.set_Parameters(ICollection`1&lt;IParameter&gt; value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ParentContextGet">
            <summary>Sets the shim of Request.get_ParentContext()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ParentContextSetIContext">
            <summary>Sets the shim of Request.set_ParentContext(IContext value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ParentRequestGet">
            <summary>Sets the shim of Request.get_ParentRequest()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ParentRequestSetIRequest">
            <summary>Sets the shim of Request.set_ParentRequest(IRequest value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ScopeCallbackGet">
            <summary>Sets the shim of Request.get_ScopeCallback()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ScopeCallbackSetFuncOfObject">
            <summary>Sets the shim of Request.set_ScopeCallback(Func`1&lt;Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ServiceGet">
            <summary>Sets the shim of Request.get_Service()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.ServiceSetType">
            <summary>Sets the shim of Request.set_Service(Type value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.TargetGet">
            <summary>Sets the shim of Request.get_Target()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest.TargetSetITarget">
            <summary>Sets the shim of Request.set_Target(ITarget value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.ShimRequest._ctorb__0IParameter">
            <summary>Sets the shim of Request.&lt;.ctor&gt;b__0(IParameter p)</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.StubContext">
            <summary>Stub type of Ninject.Activation.Context</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubContext.#ctor(Ninject.IKernel,Ninject.Activation.IRequest,Ninject.Planning.Bindings.IBinding,Ninject.Activation.Caching.ICache,Ninject.Planning.IPlanner,Ninject.Activation.IPipeline)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubContext.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubContext.InitializeStub">
            <summary>Initializes a new instance of type StubContext</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubContext.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubContext.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.StubIContext">
            <summary>Stub type of Ninject.Activation.IContext</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIContext.#ctor">
            <summary>Initializes a new instance of type StubIContext</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIContext.AttachBackingFieldToPlan">
            <summary>Attaches delegates to emulate StubIContext.Plan as a property with a backing field.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIContext.Ninject#Activation#IContext#Binding">
            <summary>Sets the stub of IContext.get_Binding()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.BindingGet">
            <summary>Sets the stub of IContext.get_Binding()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIContext.Ninject#Activation#IContext#GenericArguments">
            <summary>Sets the stub of IContext.get_GenericArguments()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.GenericArgumentsGet">
            <summary>Sets the stub of IContext.get_GenericArguments()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.GetProvider">
            <summary>Sets the stub of IContext.GetProvider()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.GetScope">
            <summary>Sets the stub of IContext.GetScope()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIContext.Ninject#Activation#IContext#HasInferredGenericArguments">
            <summary>Sets the stub of IContext.get_HasInferredGenericArguments()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.HasInferredGenericArgumentsGet">
            <summary>Sets the stub of IContext.get_HasInferredGenericArguments()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIContext.Ninject#Activation#IContext#Kernel">
            <summary>Sets the stub of IContext.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.KernelGet">
            <summary>Sets the stub of IContext.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIContext.Ninject#Activation#IContext#GetProvider">
            <summary>Sets the stub of IContext.GetProvider()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIContext.Ninject#Activation#IContext#GetScope">
            <summary>Sets the stub of IContext.GetScope()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIContext.Ninject#Activation#IContext#Resolve">
            <summary>Sets the stub of IContext.Resolve()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIContext.Ninject#Activation#IContext#Parameters">
            <summary>Sets the stub of IContext.get_Parameters()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.ParametersGet">
            <summary>Sets the stub of IContext.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIContext.Ninject#Activation#IContext#Plan">
            <summary>Sets the stub of IContext.get_Plan()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.PlanGet">
            <summary>Sets the stub of IContext.get_Plan()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.PlanSetIPlan">
            <summary>Sets the stub of IContext.set_Plan(IPlan value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIContext.Ninject#Activation#IContext#Request">
            <summary>Sets the stub of IContext.get_Request()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.RequestGet">
            <summary>Sets the stub of IContext.get_Request()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIContext.Resolve">
            <summary>Sets the stub of IContext.Resolve()</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.StubIPipeline">
            <summary>Stub type of Ninject.Activation.IPipeline</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIPipeline.#ctor">
            <summary>Initializes a new instance of type StubIPipeline</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIPipeline.ActivateIContextInstanceReference">
            <summary>Sets the stub of IPipeline.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIPipeline.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIPipeline.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIPipeline.DeactivateIContextInstanceReference">
            <summary>Sets the stub of IPipeline.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIPipeline.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIPipeline.Ninject#Activation#IPipeline#Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of IPipeline.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIPipeline.Ninject#Activation#IPipeline#Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of IPipeline.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIPipeline.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIPipeline.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIPipeline.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIPipeline.Ninject#Activation#IPipeline#Strategies">
            <summary>Sets the stub of IPipeline.get_Strategies()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIPipeline.StrategiesGet">
            <summary>Sets the stub of IPipeline.get_Strategies()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIPipeline.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.StubIProvider">
            <summary>Stub type of Ninject.Activation.IProvider</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIProvider.#ctor">
            <summary>Initializes a new instance of type StubIProvider</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIProvider.CreateIContext">
            <summary>Sets the stub of IProvider.Create(IContext context)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIProvider.Ninject#Activation#IProvider#Create(Ninject.Activation.IContext)">
            <summary>Sets the stub of IProvider.Create(IContext context)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIProvider.Ninject#Activation#IProvider#Type">
            <summary>Sets the stub of IProvider.get_Type()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIProvider.TypeGet">
            <summary>Sets the stub of IProvider.get_Type()</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.StubIProvider`1">
            <summary>Stub type of Ninject.Activation.IProvider`1</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIProvider`1.#ctor">
            <summary>Initializes a new instance of type StubIProvider</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIProvider`1.CreateIContext">
            <summary>Sets the stub of IProvider.Create(IContext context)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIProvider`1.Ninject#Activation#IProvider#Create(Ninject.Activation.IContext)">
            <summary>Sets the stub of IProvider.Create(IContext context)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIProvider`1.Ninject#Activation#IProvider#Type">
            <summary>Sets the stub of IProvider.get_Type()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIProvider`1.TypeGet">
            <summary>Sets the stub of IProvider.get_Type()</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.StubIRequest">
            <summary>Stub type of Ninject.Activation.IRequest</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIRequest.#ctor">
            <summary>Initializes a new instance of type StubIRequest</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#ActiveBindings">
            <summary>Sets the stub of IRequest.get_ActiveBindings()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.ActiveBindingsGet">
            <summary>Sets the stub of IRequest.get_ActiveBindings()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIRequest.AttachBackingFieldToForceUnique">
            <summary>Attaches delegates to emulate StubIRequest.ForceUnique as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIRequest.AttachBackingFieldToIsOptional">
            <summary>Attaches delegates to emulate StubIRequest.IsOptional as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIRequest.AttachBackingFieldToIsUnique">
            <summary>Attaches delegates to emulate StubIRequest.IsUnique as a property with a backing field.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#Constraint">
            <summary>Sets the stub of IRequest.get_Constraint()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.ConstraintGet">
            <summary>Sets the stub of IRequest.get_Constraint()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.CreateChildTypeIContextITarget">
            <summary>Sets the stub of IRequest.CreateChild(Type service, IContext parentContext, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#Depth">
            <summary>Sets the stub of IRequest.get_Depth()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.DepthGet">
            <summary>Sets the stub of IRequest.get_Depth()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#ForceUnique">
            <summary>Sets the stub of IRequest.get_ForceUnique()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.ForceUniqueGet">
            <summary>Sets the stub of IRequest.get_ForceUnique()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.ForceUniqueSetBoolean">
            <summary>Sets the stub of IRequest.set_ForceUnique(Boolean value)</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.GetScope">
            <summary>Sets the stub of IRequest.GetScope()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#IsOptional">
            <summary>Sets the stub of IRequest.get_IsOptional()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.IsOptionalGet">
            <summary>Sets the stub of IRequest.get_IsOptional()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.IsOptionalSetBoolean">
            <summary>Sets the stub of IRequest.set_IsOptional(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#IsUnique">
            <summary>Sets the stub of IRequest.get_IsUnique()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.IsUniqueGet">
            <summary>Sets the stub of IRequest.get_IsUnique()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.IsUniqueSetBoolean">
            <summary>Sets the stub of IRequest.set_IsUnique(Boolean value)</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.MatchesIBinding">
            <summary>Sets the stub of IRequest.Matches(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#CreateChild(System.Type,Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>Sets the stub of IRequest.CreateChild(Type service, IContext parentContext, ITarget target)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#GetScope">
            <summary>Sets the stub of IRequest.GetScope()</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#Matches(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of IRequest.Matches(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#Parameters">
            <summary>Sets the stub of IRequest.get_Parameters()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.ParametersGet">
            <summary>Sets the stub of IRequest.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#ParentContext">
            <summary>Sets the stub of IRequest.get_ParentContext()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.ParentContextGet">
            <summary>Sets the stub of IRequest.get_ParentContext()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#ParentRequest">
            <summary>Sets the stub of IRequest.get_ParentRequest()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.ParentRequestGet">
            <summary>Sets the stub of IRequest.get_ParentRequest()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#Service">
            <summary>Sets the stub of IRequest.get_Service()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.ServiceGet">
            <summary>Sets the stub of IRequest.get_Service()</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubIRequest.Ninject#Activation#IRequest#Target">
            <summary>Sets the stub of IRequest.get_Target()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubIRequest.TargetGet">
            <summary>Sets the stub of IRequest.get_Target()</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.StubInstanceReference">
            <summary>Stub type of Ninject.Activation.InstanceReference</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubInstanceReference.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubInstanceReference.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubInstanceReference.InitializeStub">
            <summary>Initializes a new instance of type StubInstanceReference</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubInstanceReference.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubInstanceReference.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.StubPipeline">
            <summary>Stub type of Ninject.Activation.Pipeline</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubPipeline.#ctor(System.Collections.Generic.IEnumerable{Ninject.Activation.Strategies.IActivationStrategy},Ninject.Activation.Caching.IActivationCache)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubPipeline.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubPipeline.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubPipeline.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubPipeline.InitializeStub">
            <summary>Initializes a new instance of type StubPipeline</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubPipeline.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubPipeline.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.StubProvider`1">
            <summary>Stub type of Ninject.Activation.Provider`1</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubProvider`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubProvider`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubProvider`1.CreateInstance(Ninject.Activation.IContext)">
            <summary>Sets the stub of Provider`1.CreateInstance(IContext context)</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubProvider`1.CreateInstanceIContext">
            <summary>Sets the stub of Provider`1.CreateInstance(IContext context)</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubProvider`1.InitializeStub">
            <summary>Initializes a new instance of type StubProvider</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubProvider`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubProvider`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubProvider`1.Type">
            <summary>Sets the stub of Provider`1.get_Type()</summary>
        </member>
        <member name="F:Ninject.Activation.Fakes.StubProvider`1.TypeGet">
            <summary>Sets the stub of Provider`1.get_Type()</summary>
        </member>
        <member name="T:Ninject.Activation.Fakes.StubRequest">
            <summary>Stub type of Ninject.Activation.Request</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubRequest.#ctor(Ninject.Activation.IContext,System.Type,Ninject.Planning.Targets.ITarget,System.Func{System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubRequest.#ctor(System.Type,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},System.Func{System.Object},System.Boolean,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubRequest.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Fakes.StubRequest.InitializeStub">
            <summary>Initializes a new instance of type StubRequest</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubRequest.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Fakes.StubRequest.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1">
            <summary>Shim type of Ninject.Activation.Providers.CallbackProvider`1</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.#ctor(Ninject.Activation.Providers.CallbackProvider{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.AllInstances.CreateInstanceIContext">
            <summary>Sets the shim of CallbackProvider`1.CreateInstance(IContext context)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.AllInstances.MethodGet">
            <summary>Sets the shim of CallbackProvider`1.get_Method()</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.AllInstances.MethodSetFuncOfIContextT0">
            <summary>Sets the shim of CallbackProvider`1.set_Method(Func`2&lt;IContext,!0&gt; value)</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.Bind(Ninject.Activation.IProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.Bind(Ninject.Activation.IProvider{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.ConstructorFuncOfIContextT0">
            <summary>Sets the shim of CallbackProvider`1.CallbackProvider`1(Func`2&lt;IContext,!0&gt; method)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.CreateInstanceIContext">
            <summary>Sets the shim of CallbackProvider`1.CreateInstance(IContext context)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.MethodGet">
            <summary>Sets the shim of CallbackProvider`1.get_Method()</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimCallbackProvider`1.MethodSetFuncOfIContextT0">
            <summary>Sets the shim of CallbackProvider`1.set_Method(Func`2&lt;IContext,!0&gt; value)</summary>
        </member>
        <member name="T:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1">
            <summary>Shim type of Ninject.Activation.Providers.ConstantProvider`1</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.#ctor(Ninject.Activation.Providers.ConstantProvider{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.AllInstances.CreateInstanceIContext">
            <summary>Sets the shim of ConstantProvider`1.CreateInstance(IContext context)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.AllInstances.ValueGet">
            <summary>Sets the shim of ConstantProvider`1.get_Value()</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.AllInstances.ValueSetT0">
            <summary>Sets the shim of ConstantProvider`1.set_Value(!0 value)</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.Bind(Ninject.Activation.IProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.Bind(Ninject.Activation.IProvider{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.ConstructorT0">
            <summary>Sets the shim of ConstantProvider`1.ConstantProvider`1(!0 value)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.CreateInstanceIContext">
            <summary>Sets the shim of ConstantProvider`1.CreateInstance(IContext context)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.ValueGet">
            <summary>Sets the shim of ConstantProvider`1.get_Value()</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimConstantProvider`1.ValueSetT0">
            <summary>Sets the shim of ConstantProvider`1.set_Value(!0 value)</summary>
        </member>
        <member name="T:Ninject.Activation.Providers.Fakes.ShimStandardProvider">
            <summary>Shim type of Ninject.Activation.Providers.StandardProvider</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimStandardProvider.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimStandardProvider.#ctor(Ninject.Activation.Providers.StandardProvider)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Providers.Fakes.ShimStandardProvider.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.AllInstances.ConstructorScorerGet">
            <summary>Sets the shim of StandardProvider.get_ConstructorScorer()</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.AllInstances.ConstructorScorerSetIConstructorScorer">
            <summary>Sets the shim of StandardProvider.set_ConstructorScorer(IConstructorScorer value)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.AllInstances.CreateIContext">
            <summary>Sets the shim of StandardProvider.Create(IContext context)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.AllInstances.GetImplementationTypeType">
            <summary>Sets the shim of StandardProvider.GetImplementationType(Type service)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.AllInstances.GetValueIContextITarget">
            <summary>Sets the shim of StandardProvider.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.AllInstances.PlannerGet">
            <summary>Sets the shim of StandardProvider.get_Planner()</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.AllInstances.PlannerSetIPlanner">
            <summary>Sets the shim of StandardProvider.set_Planner(IPlanner value)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.AllInstances.TypeGet">
            <summary>Sets the shim of StandardProvider.get_Type()</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.AllInstances.TypeSetType">
            <summary>Sets the shim of StandardProvider.set_Type(Type value)</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimStandardProvider.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimStandardProvider.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.ShimStandardProvider.Bind(Ninject.Activation.IProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.ConstructorScorerGet">
            <summary>Sets the shim of StandardProvider.get_ConstructorScorer()</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.ConstructorScorerSetIConstructorScorer">
            <summary>Sets the shim of StandardProvider.set_ConstructorScorer(IConstructorScorer value)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.ConstructorTypeIPlannerIConstructorScorer">
            <summary>Sets the shim of StandardProvider.StandardProvider(Type type, IPlanner planner, IConstructorScorer constructorScorer)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.CreateIContext">
            <summary>Sets the shim of StandardProvider.Create(IContext context)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.GetCreationCallbackType">
            <summary>Sets the shim of StandardProvider.GetCreationCallback(Type prototype)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.GetCreationCallbackTypeConstructorInfo">
            <summary>Sets the shim of StandardProvider.GetCreationCallback(Type prototype, ConstructorInfo constructor)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.GetImplementationTypeType">
            <summary>Sets the shim of StandardProvider.GetImplementationType(Type service)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.GetValueIContextITarget">
            <summary>Sets the shim of StandardProvider.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.PlannerGet">
            <summary>Sets the shim of StandardProvider.get_Planner()</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.PlannerSetIPlanner">
            <summary>Sets the shim of StandardProvider.set_Planner(IPlanner value)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.TypeGet">
            <summary>Sets the shim of StandardProvider.get_Type()</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider.TypeSetType">
            <summary>Sets the shim of StandardProvider.set_Type(Type value)</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.ShimStandardProvider._Createb__1IGroupingOfInt32ConstructorInjectionDirective">
            <summary>Sets the shim of StandardProvider.&lt;Create&gt;b__1(IGrouping`2&lt;Int32,ConstructorInjectionDirective&gt; g)</summary>
        </member>
        <member name="T:Ninject.Activation.Providers.Fakes.StubCallbackProvider`1">
            <summary>Stub type of Ninject.Activation.Providers.CallbackProvider`1</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.StubCallbackProvider`1.#ctor(System.Func{Ninject.Activation.IContext,`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubCallbackProvider`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.StubCallbackProvider`1.CreateInstance(Ninject.Activation.IContext)">
            <summary>Sets the stub of CallbackProvider`1.CreateInstance(IContext context)</summary>
        </member>
        <member name="F:Ninject.Activation.Providers.Fakes.StubCallbackProvider`1.CreateInstanceIContext">
            <summary>Sets the stub of CallbackProvider`1.CreateInstance(IContext context)</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.StubCallbackProvider`1.InitializeStub">
            <summary>Initializes a new instance of type StubCallbackProvider</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubCallbackProvider`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubCallbackProvider`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubCallbackProvider`1.Type">
            <summary>Sets the stub of Provider`1.get_Type()</summary>
        </member>
        <member name="F:Ninject.Activation.Providers.Fakes.StubCallbackProvider`1.TypeGet">
            <summary>Sets the stub of Provider`1.get_Type()</summary>
        </member>
        <member name="T:Ninject.Activation.Providers.Fakes.StubConstantProvider`1">
            <summary>Stub type of Ninject.Activation.Providers.ConstantProvider`1</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.StubConstantProvider`1.#ctor(`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubConstantProvider`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.StubConstantProvider`1.CreateInstance(Ninject.Activation.IContext)">
            <summary>Sets the stub of ConstantProvider`1.CreateInstance(IContext context)</summary>
        </member>
        <member name="F:Ninject.Activation.Providers.Fakes.StubConstantProvider`1.CreateInstanceIContext">
            <summary>Sets the stub of ConstantProvider`1.CreateInstance(IContext context)</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.StubConstantProvider`1.InitializeStub">
            <summary>Initializes a new instance of type StubConstantProvider</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubConstantProvider`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubConstantProvider`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubConstantProvider`1.Type">
            <summary>Sets the stub of Provider`1.get_Type()</summary>
        </member>
        <member name="F:Ninject.Activation.Providers.Fakes.StubConstantProvider`1.TypeGet">
            <summary>Sets the stub of Provider`1.get_Type()</summary>
        </member>
        <member name="T:Ninject.Activation.Providers.Fakes.StubStandardProvider">
            <summary>Stub type of Ninject.Activation.Providers.StandardProvider</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.StubStandardProvider.#ctor(System.Type,Ninject.Planning.IPlanner,Ninject.Selection.Heuristics.IConstructorScorer)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubStandardProvider.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.StubStandardProvider.Create(Ninject.Activation.IContext)">
            <summary>Sets the stub of StandardProvider.Create(IContext context)</summary>
        </member>
        <member name="F:Ninject.Activation.Providers.Fakes.StubStandardProvider.CreateIContext">
            <summary>Sets the stub of StandardProvider.Create(IContext context)</summary>
        </member>
        <member name="M:Ninject.Activation.Providers.Fakes.StubStandardProvider.InitializeStub">
            <summary>Initializes a new instance of type StubStandardProvider</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubStandardProvider.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Providers.Fakes.StubStandardProvider.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy">
            <summary>Shim type of Ninject.Activation.Strategies.ActivationCacheStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.#ctor(Ninject.Activation.Strategies.ActivationCacheStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.ActivateIContextInstanceReference">
            <summary>Sets the shim of ActivationCacheStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.AllInstances.ActivateIContextInstanceReference">
            <summary>Sets the shim of ActivationCacheStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.AllInstances.DeactivateIContextInstanceReference">
            <summary>Sets the shim of ActivationCacheStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.AllInstances.Dispose">
            <summary>Sets the shim of ActivationCacheStrategy.Dispose()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.AllInstances.SettingsGet">
            <summary>Sets the shim of ActivationCacheStrategy.get_Settings()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.AllInstances.SettingsSetINinjectSettings">
            <summary>Sets the shim of ActivationCacheStrategy.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.Bind(Ninject.Activation.Strategies.IActivationStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.ConstructorIActivationCache">
            <summary>Sets the shim of ActivationCacheStrategy.ActivationCacheStrategy(IActivationCache activationCache)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the shim of ActivationCacheStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.Dispose">
            <summary>Sets the shim of ActivationCacheStrategy.Dispose()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.SettingsGet">
            <summary>Sets the shim of ActivationCacheStrategy.get_Settings()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationCacheStrategy.SettingsSetINinjectSettings">
            <summary>Sets the shim of ActivationCacheStrategy.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy">
            <summary>Shim type of Ninject.Activation.Strategies.ActivationStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.#ctor(Ninject.Activation.Strategies.ActivationStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.ActivateIContextInstanceReference">
            <summary>Sets the shim of ActivationStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.AllInstances.ActivateIContextInstanceReference">
            <summary>Sets the shim of ActivationStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.AllInstances.DeactivateIContextInstanceReference">
            <summary>Sets the shim of ActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.Bind(Ninject.Activation.Strategies.IActivationStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.Constructor">
            <summary>Sets the shim of ActivationStrategy.ActivationStrategy()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimActivationStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the shim of ActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy">
            <summary>Shim type of Ninject.Activation.Strategies.BindingActionStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.#ctor(Ninject.Activation.Strategies.BindingActionStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.ActivateIContextInstanceReference">
            <summary>Sets the shim of BindingActionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.AllInstances.ActivateIContextInstanceReference">
            <summary>Sets the shim of BindingActionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.AllInstances.DeactivateIContextInstanceReference">
            <summary>Sets the shim of BindingActionStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.Bind(Ninject.Activation.Strategies.IActivationStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.Constructor">
            <summary>Sets the shim of BindingActionStrategy.BindingActionStrategy()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimBindingActionStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the shim of BindingActionStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy">
            <summary>Shim type of Ninject.Activation.Strategies.DisposableStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.#ctor(Ninject.Activation.Strategies.DisposableStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.AllInstances.DeactivateIContextInstanceReference">
            <summary>Sets the shim of DisposableStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.Bind(Ninject.Activation.Strategies.IActivationStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.Constructor">
            <summary>Sets the shim of DisposableStrategy.DisposableStrategy()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the shim of DisposableStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimDisposableStrategy._Deactivateb__0IDisposable">
            <summary>Sets the shim of DisposableStrategy.&lt;Deactivate&gt;b__0(IDisposable x)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy">
            <summary>Shim type of Ninject.Activation.Strategies.InitializableStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.#ctor(Ninject.Activation.Strategies.InitializableStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.ActivateIContextInstanceReference">
            <summary>Sets the shim of InitializableStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.AllInstances.ActivateIContextInstanceReference">
            <summary>Sets the shim of InitializableStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.Bind(Ninject.Activation.Strategies.IActivationStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy.Constructor">
            <summary>Sets the shim of InitializableStrategy.InitializableStrategy()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimInitializableStrategy._Activateb__0IInitializable">
            <summary>Sets the shim of InitializableStrategy.&lt;Activate&gt;b__0(IInitializable x)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy">
            <summary>Shim type of Ninject.Activation.Strategies.MethodInjectionStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.#ctor(Ninject.Activation.Strategies.MethodInjectionStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.ActivateIContextInstanceReference">
            <summary>Sets the shim of MethodInjectionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.AllInstances.ActivateIContextInstanceReference">
            <summary>Sets the shim of MethodInjectionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.Bind(Ninject.Activation.Strategies.IActivationStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimMethodInjectionStrategy.Constructor">
            <summary>Sets the shim of MethodInjectionStrategy.MethodInjectionStrategy()</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy">
            <summary>Shim type of Ninject.Activation.Strategies.PropertyInjectionStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.#ctor(Ninject.Activation.Strategies.PropertyInjectionStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.ActivateIContextInstanceReference">
            <summary>Sets the shim of PropertyInjectionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.AllInstances.ActivateIContextInstanceReference">
            <summary>Sets the shim of PropertyInjectionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.AllInstances.AssignProperyOverridesIContextInstanceReferenceIListOfIPropertyValue">
            <summary>Sets the shim of PropertyInjectionStrategy.AssignProperyOverrides(IContext context, InstanceReference reference, IList`1&lt;IPropertyValue&gt; propertyValues)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.AllInstances.FlagsGet">
            <summary>Sets the shim of PropertyInjectionStrategy.get_Flags()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.AllInstances.GetValueIContextITargetIEnumerableOfIPropertyValue">
            <summary>Sets the shim of PropertyInjectionStrategy.GetValue(IContext context, ITarget target, IEnumerable`1&lt;IPropertyValue&gt; allPropertyValues)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.AllInstances.InjectorFactoryGet">
            <summary>Sets the shim of PropertyInjectionStrategy.get_InjectorFactory()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.AllInstances.InjectorFactorySetIInjectorFactory">
            <summary>Sets the shim of PropertyInjectionStrategy.set_InjectorFactory(IInjectorFactory value)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.AssignProperyOverridesIContextInstanceReferenceIListOfIPropertyValue">
            <summary>Sets the shim of PropertyInjectionStrategy.AssignProperyOverrides(IContext context, InstanceReference reference, IList`1&lt;IPropertyValue&gt; propertyValues)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.Bind(Ninject.Activation.Strategies.IActivationStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.ConstructorIInjectorFactory">
            <summary>Sets the shim of PropertyInjectionStrategy.PropertyInjectionStrategy(IInjectorFactory injectorFactory)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.FlagsGet">
            <summary>Sets the shim of PropertyInjectionStrategy.get_Flags()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.GetValueIContextITargetIEnumerableOfIPropertyValue">
            <summary>Sets the shim of PropertyInjectionStrategy.GetValue(IContext context, ITarget target, IEnumerable`1&lt;IPropertyValue&gt; allPropertyValues)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.InjectorFactoryGet">
            <summary>Sets the shim of PropertyInjectionStrategy.get_InjectorFactory()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimPropertyInjectionStrategy.InjectorFactorySetIInjectorFactory">
            <summary>Sets the shim of PropertyInjectionStrategy.set_InjectorFactory(IInjectorFactory value)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy">
            <summary>Shim type of Ninject.Activation.Strategies.StartableStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.#ctor(Ninject.Activation.Strategies.StartableStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.ActivateIContextInstanceReference">
            <summary>Sets the shim of StartableStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.AllInstances.ActivateIContextInstanceReference">
            <summary>Sets the shim of StartableStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.AllInstances.DeactivateIContextInstanceReference">
            <summary>Sets the shim of StartableStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.Bind(Ninject.Activation.Strategies.IActivationStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.Constructor">
            <summary>Sets the shim of StartableStrategy.StartableStrategy()</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the shim of StartableStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy._Activateb__0IStartable">
            <summary>Sets the shim of StartableStrategy.&lt;Activate&gt;b__0(IStartable x)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.ShimStartableStrategy._Deactivateb__2IStartable">
            <summary>Sets the shim of StartableStrategy.&lt;Deactivate&gt;b__2(IStartable x)</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.StubActivationCacheStrategy">
            <summary>Stub type of Ninject.Activation.Strategies.ActivationCacheStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubActivationCacheStrategy.#ctor(Ninject.Activation.Caching.IActivationCache)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubActivationCacheStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubActivationCacheStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubActivationCacheStrategy</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubActivationCacheStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubActivationCacheStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.StubActivationStrategy">
            <summary>Stub type of Ninject.Activation.Strategies.ActivationStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of ActivationStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.ActivateIContextInstanceReference">
            <summary>Sets the stub of ActivationStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of ActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the stub of ActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubActivationStrategy</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubActivationStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy">
            <summary>Stub type of Ninject.Activation.Strategies.BindingActionStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of BindingActionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.ActivateIContextInstanceReference">
            <summary>Sets the stub of BindingActionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of BindingActionStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the stub of BindingActionStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubBindingActionStrategy</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubBindingActionStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy">
            <summary>Stub type of Ninject.Activation.Strategies.DisposableStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of ActivationStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.ActivateIContextInstanceReference">
            <summary>Sets the stub of ActivationStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of DisposableStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the stub of DisposableStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubDisposableStrategy</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubDisposableStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy">
            <summary>Stub type of Ninject.Activation.Strategies.IActivationStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.#ctor">
            <summary>Initializes a new instance of type StubIActivationStrategy</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.ActivateIContextInstanceReference">
            <summary>Sets the stub of IActivationStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIActivationStrategy.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the stub of IActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.Ninject#Activation#Strategies#IActivationStrategy#Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of IActivationStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.Ninject#Activation#Strategies#IActivationStrategy#Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of IActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubIActivationStrategy.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy">
            <summary>Stub type of Ninject.Activation.Strategies.InitializableStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of InitializableStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.ActivateIContextInstanceReference">
            <summary>Sets the stub of InitializableStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of ActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the stub of ActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubInitializableStrategy</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubInitializableStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy">
            <summary>Stub type of Ninject.Activation.Strategies.MethodInjectionStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of MethodInjectionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.ActivateIContextInstanceReference">
            <summary>Sets the stub of MethodInjectionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of ActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the stub of ActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubMethodInjectionStrategy</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubMethodInjectionStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy">
            <summary>Stub type of Ninject.Activation.Strategies.PropertyInjectionStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.#ctor(Ninject.Injection.IInjectorFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of PropertyInjectionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.ActivateIContextInstanceReference">
            <summary>Sets the stub of PropertyInjectionStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of ActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the stub of ActivationStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubPropertyInjectionStrategy</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubPropertyInjectionStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.Fakes.StubStartableStrategy">
            <summary>Stub type of Ninject.Activation.Strategies.StartableStrategy</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of StartableStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.ActivateIContextInstanceReference">
            <summary>Sets the stub of StartableStrategy.Activate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>Sets the stub of StartableStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.DeactivateIContextInstanceReference">
            <summary>Sets the stub of StartableStrategy.Deactivate(IContext context, InstanceReference reference)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubStartableStrategy</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Activation.Strategies.Fakes.StubStartableStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Components.Fakes.ShimComponentContainer">
            <summary>Shim type of Ninject.Components.ComponentContainer</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.#ctor(Ninject.Components.ComponentContainer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.AddOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets the shim of ComponentContainer.Add()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.AddTransientOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets the shim of ComponentContainer.AddTransient()</summary>
        </member>
        <member name="T:Ninject.Components.Fakes.ShimComponentContainer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.AddOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Ninject.Components.ComponentContainer})">
            <summary>Sets the shim of ComponentContainer.Add()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.AddTransientOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Ninject.Components.ComponentContainer})">
            <summary>Sets the shim of ComponentContainer.AddTransient()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.CreateNewInstanceTypeType">
            <summary>Sets the shim of ComponentContainer.CreateNewInstance(Type component, Type implementation)</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.DisposeBoolean">
            <summary>Sets the shim of ComponentContainer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.GetAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Components.ComponentContainer,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ComponentContainer.GetAll()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.GetAllType">
            <summary>Sets the shim of ComponentContainer.GetAll(Type component)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.GetOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Components.ComponentContainer,``0})">
            <summary>Sets the shim of ComponentContainer.Get()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.GetType01">
            <summary>Sets the shim of ComponentContainer.Get(Type component)</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.KernelGet">
            <summary>Sets the shim of ComponentContainer.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.KernelSetIKernel">
            <summary>Sets the shim of ComponentContainer.set_Kernel(IKernel value)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.RemoveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Ninject.Components.ComponentContainer})">
            <summary>Sets the shim of ComponentContainer.RemoveAll()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.RemoveAllType">
            <summary>Sets the shim of ComponentContainer.RemoveAll(Type component)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.RemoveOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Ninject.Components.ComponentContainer})">
            <summary>Sets the shim of ComponentContainer.Remove()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.AllInstances.ResolveInstanceTypeType">
            <summary>Sets the shim of ComponentContainer.ResolveInstance(Type component, Type implementation)</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.AllInstances._CreateNewInstanceb__4ParameterInfo">
            <summary>Sets the shim of ComponentContainer.&lt;CreateNewInstance&gt;b__4(ParameterInfo parameter)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.Bind(Ninject.Components.IComponentContainer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.Constructor">
            <summary>Sets the shim of ComponentContainer.ComponentContainer()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.CreateNewInstanceTypeType">
            <summary>Sets the shim of ComponentContainer.CreateNewInstance(Type component, Type implementation)</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.DisposeBoolean">
            <summary>Sets the shim of ComponentContainer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.GetAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ComponentContainer.GetAll()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.GetAllType">
            <summary>Sets the shim of ComponentContainer.GetAll(Type component)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.GetOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets the shim of ComponentContainer.Get()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.GetType">
            <summary>Sets the shim of ComponentContainer.Get(Type component)</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.KernelGet">
            <summary>Sets the shim of ComponentContainer.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.KernelSetIKernel">
            <summary>Sets the shim of ComponentContainer.set_Kernel(IKernel value)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.RemoveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets the shim of ComponentContainer.RemoveAll()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.RemoveAllType">
            <summary>Sets the shim of ComponentContainer.RemoveAll(Type component)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimComponentContainer.RemoveOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets the shim of ComponentContainer.Remove()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.ResolveInstanceTypeType">
            <summary>Sets the shim of ComponentContainer.ResolveInstance(Type component, Type implementation)</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer.SelectConstructorTypeType">
            <summary>Sets the shim of ComponentContainer.SelectConstructor(Type component, Type implementation)</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer._CreateNewInstanceb__4ParameterInfo">
            <summary>Sets the shim of ComponentContainer.&lt;CreateNewInstance&gt;b__4(ParameterInfo parameter)</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimComponentContainer._SelectConstructorb__5ConstructorInfo">
            <summary>Sets the shim of ComponentContainer.&lt;SelectConstructor&gt;b__5(ConstructorInfo c)</summary>
        </member>
        <member name="T:Ninject.Components.Fakes.ShimNinjectComponent">
            <summary>Shim type of Ninject.Components.NinjectComponent</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimNinjectComponent.#ctor(Ninject.Components.NinjectComponent)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Components.Fakes.ShimNinjectComponent.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimNinjectComponent.AllInstances.SettingsGet">
            <summary>Sets the shim of NinjectComponent.get_Settings()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimNinjectComponent.AllInstances.SettingsSetINinjectSettings">
            <summary>Sets the shim of NinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimNinjectComponent.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimNinjectComponent.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimNinjectComponent.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimNinjectComponent.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimNinjectComponent.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.ShimNinjectComponent.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimNinjectComponent.Constructor">
            <summary>Sets the shim of NinjectComponent.NinjectComponent()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimNinjectComponent.SettingsGet">
            <summary>Sets the shim of NinjectComponent.get_Settings()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.ShimNinjectComponent.SettingsSetINinjectSettings">
            <summary>Sets the shim of NinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="T:Ninject.Components.Fakes.StubComponentContainer">
            <summary>Stub type of Ninject.Components.ComponentContainer</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubComponentContainer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.StubComponentContainer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubComponentContainer.Dispose(System.Boolean)">
            <summary>Sets the stub of ComponentContainer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubComponentContainer.DisposeBoolean">
            <summary>Sets the stub of ComponentContainer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubComponentContainer.InitializeStub">
            <summary>Initializes a new instance of type StubComponentContainer</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.StubComponentContainer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.StubComponentContainer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Components.Fakes.StubIComponentContainer">
            <summary>Stub type of Ninject.Components.IComponentContainer</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.#ctor">
            <summary>Initializes a new instance of type StubIComponentContainer</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.AddOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets stubs of Add()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.AddTransientOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets stubs of AddTransient()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.AttachBackingFieldToKernel">
            <summary>Attaches delegates to emulate StubIComponentContainer.Kernel as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubIComponentContainer.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.GetAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets stubs of GetAll()</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubIComponentContainer.GetAllType">
            <summary>Sets the stub of IComponentContainer.GetAll(Type component)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.GetOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets stubs of Get()</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubIComponentContainer.GetType">
            <summary>Sets the stub of IComponentContainer.Get(Type component)</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.StubIComponentContainer.Ninject#Components#IComponentContainer#Kernel">
            <summary>Sets the stub of IComponentContainer.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubIComponentContainer.KernelGet">
            <summary>Sets the stub of IComponentContainer.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubIComponentContainer.KernelSetIKernel">
            <summary>Sets the stub of IComponentContainer.set_Kernel(IKernel value)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.Ninject#Components#IComponentContainer#Add``2">
            <summary>Sets the stub of IComponentContainer.Add()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.Ninject#Components#IComponentContainer#AddTransient``2">
            <summary>Sets the stub of IComponentContainer.AddTransient()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.Ninject#Components#IComponentContainer#Get``1">
            <summary>Sets the stub of IComponentContainer.Get()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.Ninject#Components#IComponentContainer#Get(System.Type)">
            <summary>Sets the stub of IComponentContainer.Get(Type component)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.Ninject#Components#IComponentContainer#GetAll(System.Type)">
            <summary>Sets the stub of IComponentContainer.GetAll(Type component)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.Ninject#Components#IComponentContainer#GetAll``1">
            <summary>Sets the stub of IComponentContainer.GetAll()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.Ninject#Components#IComponentContainer#Remove``2">
            <summary>Sets the stub of IComponentContainer.Remove()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.Ninject#Components#IComponentContainer#RemoveAll``1">
            <summary>Sets the stub of IComponentContainer.RemoveAll()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.Ninject#Components#IComponentContainer#RemoveAll(System.Type)">
            <summary>Sets the stub of IComponentContainer.RemoveAll(Type component)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.RemoveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets stubs of RemoveAll()</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubIComponentContainer.RemoveAllType">
            <summary>Sets the stub of IComponentContainer.RemoveAll(Type component)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.RemoveOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets stubs of Remove()</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubIComponentContainer.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Components.Fakes.StubINinjectComponent">
            <summary>Stub type of Ninject.Components.INinjectComponent</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubINinjectComponent.#ctor">
            <summary>Initializes a new instance of type StubINinjectComponent</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubINinjectComponent.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubINinjectComponent.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubINinjectComponent.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.StubINinjectComponent.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubINinjectComponent.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubINinjectComponent.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubINinjectComponent.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Components.Fakes.StubNinjectComponent">
            <summary>Stub type of Ninject.Components.NinjectComponent</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubNinjectComponent.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.StubNinjectComponent.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubNinjectComponent.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Components.Fakes.StubNinjectComponent.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Components.Fakes.StubNinjectComponent.InitializeStub">
            <summary>Initializes a new instance of type StubNinjectComponent</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.StubNinjectComponent.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Components.Fakes.StubNinjectComponent.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimActivationException">
            <summary>Shim type of Ninject.ActivationException</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimActivationException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimActivationException.#ctor(Ninject.ActivationException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimActivationException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimActivationException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimActivationException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimActivationException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimActivationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimActivationException.Constructor">
            <summary>Sets the shim of ActivationException.ActivationException()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimActivationException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ActivationException.ActivationException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimActivationException.ConstructorString">
            <summary>Sets the shim of ActivationException.ActivationException(String message)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimActivationException.ConstructorStringException">
            <summary>Sets the shim of ActivationException.ActivationException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimConstraintAttribute">
            <summary>Shim type of Ninject.ConstraintAttribute</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimConstraintAttribute.#ctor(Ninject.ConstraintAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimConstraintAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimConstraintAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimConstraintAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimConstraintAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimConstraintAttribute.Constructor">
            <summary>Sets the shim of ConstraintAttribute.ConstraintAttribute()</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimGlobalKernelRegistration">
            <summary>Shim type of Ninject.GlobalKernelRegistration</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistration.#ctor(Ninject.GlobalKernelRegistration)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimGlobalKernelRegistration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistration.AllInstances.MapKernelsActionOfIKernel">
            <summary>Sets the shim of GlobalKernelRegistration.MapKernels(Action`1&lt;IKernel&gt; action)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistration.Constructor">
            <summary>Sets the shim of GlobalKernelRegistration.GlobalKernelRegistration()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistration.MapKernelsActionOfIKernel">
            <summary>Sets the shim of GlobalKernelRegistration.MapKernels(Action`1&lt;IKernel&gt; action)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistration.RegisterKernelForTypeIKernelType">
            <summary>Sets the shim of GlobalKernelRegistration.RegisterKernelForType(IKernel kernel, Type type)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistration.StaticConstructor">
            <summary>Sets the shim of GlobalKernelRegistration.GlobalKernelRegistration()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistration.UnregisterKernelForTypeIKernelType">
            <summary>Sets the shim of GlobalKernelRegistration.UnregisterKernelForType(IKernel kernel, Type type)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistration._MapKernelsb__3WeakReference">
            <summary>Sets the shim of GlobalKernelRegistration.&lt;MapKernels&gt;b__3(WeakReference reference)</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1">
            <summary>Shim type of Ninject.GlobalKernelRegistrationModule`1</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.#ctor(Ninject.GlobalKernelRegistrationModule{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.AllInstances.Load">
            <summary>Sets the shim of GlobalKernelRegistrationModule`1.Load()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.AllInstances.Unload">
            <summary>Sets the shim of GlobalKernelRegistrationModule`1.Unload()</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.Bind(Ninject.Infrastructure.IHaveKernel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.Bind(Ninject.Modules.INinjectModule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.Bind(Ninject.Syntax.IBindingRoot)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.Constructor">
            <summary>Sets the shim of GlobalKernelRegistrationModule`1.GlobalKernelRegistrationModule`1()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.Load">
            <summary>Sets the shim of GlobalKernelRegistrationModule`1.Load()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimGlobalKernelRegistrationModule`1.Unload">
            <summary>Sets the shim of GlobalKernelRegistrationModule`1.Unload()</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimInjectAttribute">
            <summary>Shim type of Ninject.InjectAttribute</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimInjectAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimInjectAttribute.#ctor(Ninject.InjectAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimInjectAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimInjectAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimInjectAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimInjectAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimInjectAttribute.Constructor">
            <summary>Sets the shim of InjectAttribute.InjectAttribute()</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimKernelBase">
            <summary>Shim type of Ninject.KernelBase</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimKernelBase.#ctor(Ninject.KernelBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AddBindingIBinding">
            <summary>Sets the shim of KernelBase.AddBinding(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AddBindingsIEnumerableOfIBinding">
            <summary>Sets the shim of KernelBase.AddBindings(IEnumerable`1&lt;IBinding&gt; bindings)</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimKernelBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.AddBindingIBinding">
            <summary>Sets the shim of KernelBase.AddBinding(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.AddBindingsIEnumerableOfIBinding">
            <summary>Sets the shim of KernelBase.AddBindings(IEnumerable`1&lt;IBinding&gt; bindings)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.BeginBlock">
            <summary>Sets the shim of KernelBase.BeginBlock()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.CanResolveIRequest">
            <summary>Sets the shim of KernelBase.CanResolve(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.CanResolveIRequestBoolean">
            <summary>Sets the shim of KernelBase.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.ComponentsGet">
            <summary>Sets the shim of KernelBase.get_Components()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.ComponentsSetIComponentContainer">
            <summary>Sets the shim of KernelBase.set_Components(IComponentContainer value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.CreateContextIRequestIBinding">
            <summary>Sets the shim of KernelBase.CreateContext(IRequest request, IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.CreateRequestTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the shim of KernelBase.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.DisposeBoolean">
            <summary>Sets the shim of KernelBase.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.GetBindingPrecedenceComparer">
            <summary>Sets the shim of KernelBase.GetBindingPrecedenceComparer()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.GetBindingsType">
            <summary>Sets the shim of KernelBase.GetBindings(Type service)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.GetModules">
            <summary>Sets the shim of KernelBase.GetModules()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.HandleMissingBindingIRequest">
            <summary>Sets the shim of KernelBase.HandleMissingBinding(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.HandleMissingBindingType">
            <summary>Sets the shim of KernelBase.HandleMissingBinding(Type service)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.HasModuleString">
            <summary>Sets the shim of KernelBase.HasModule(String name)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.InjectObjectIParameterArray">
            <summary>Sets the shim of KernelBase.Inject(Object instance, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.LoadIEnumerableOfAssembly">
            <summary>Sets the shim of KernelBase.Load(IEnumerable`1&lt;Assembly&gt; assemblies)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.LoadIEnumerableOfINinjectModule">
            <summary>Sets the shim of KernelBase.Load(IEnumerable`1&lt;INinjectModule&gt; m)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.LoadIEnumerableOfString">
            <summary>Sets the shim of KernelBase.Load(IEnumerable`1&lt;String&gt; filePatterns)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.ReleaseObject">
            <summary>Sets the shim of KernelBase.Release(Object instance)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.RemoveBindingIBinding">
            <summary>Sets the shim of KernelBase.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.ResolveIRequest">
            <summary>Sets the shim of KernelBase.Resolve(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.SatifiesRequestIRequest">
            <summary>Sets the shim of KernelBase.SatifiesRequest(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.SettingsGet">
            <summary>Sets the shim of KernelBase.get_Settings()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.SettingsSetINinjectSettings">
            <summary>Sets the shim of KernelBase.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.SystemIServiceProviderGetServiceType">
            <summary>Sets the shim of KernelBase.System.IServiceProvider.GetService(Type service)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.TypeIsSelfBindableType">
            <summary>Sets the shim of KernelBase.TypeIsSelfBindable(Type service)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.UnbindType">
            <summary>Sets the shim of KernelBase.Unbind(Type service)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances.UnloadString">
            <summary>Sets the shim of KernelBase.Unload(String name)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.AllInstances._AddBindingsb__2cIBinding">
            <summary>Sets the shim of KernelBase.&lt;AddBindings&gt;b__2c(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.BeginBlock">
            <summary>Sets the shim of KernelBase.BeginBlock()</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimKernelBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimKernelBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimKernelBase.Bind(Ninject.IKernel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimKernelBase.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimKernelBase.Bind(Ninject.Syntax.IBindingRoot)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimKernelBase.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimKernelBase.Bind(Ninject.Syntax.IResolutionRoot)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimKernelBase.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimKernelBase.Bind(System.IServiceProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.CanResolveIRequest">
            <summary>Sets the shim of KernelBase.CanResolve(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.CanResolveIRequestBoolean">
            <summary>Sets the shim of KernelBase.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.ComponentsGet">
            <summary>Sets the shim of KernelBase.get_Components()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.ComponentsSetIComponentContainer">
            <summary>Sets the shim of KernelBase.set_Components(IComponentContainer value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.Constructor">
            <summary>Sets the shim of KernelBase.KernelBase()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.ConstructorIComponentContainerINinjectSettingsINinjectModuleArray">
            <summary>Sets the shim of KernelBase.KernelBase(IComponentContainer components, INinjectSettings settings, INinjectModule[] modules)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.ConstructorINinjectModuleArray">
            <summary>Sets the shim of KernelBase.KernelBase(INinjectModule[] modules)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.ConstructorINinjectSettingsINinjectModuleArray">
            <summary>Sets the shim of KernelBase.KernelBase(INinjectSettings settings, INinjectModule[] modules)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.CreateContextIRequestIBinding">
            <summary>Sets the shim of KernelBase.CreateContext(IRequest request, IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.CreateRequestTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the shim of KernelBase.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.DisposeBoolean">
            <summary>Sets the shim of KernelBase.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.GetBindingPrecedenceComparer">
            <summary>Sets the shim of KernelBase.GetBindingPrecedenceComparer()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.GetBindingsType">
            <summary>Sets the shim of KernelBase.GetBindings(Type service)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.GetModules">
            <summary>Sets the shim of KernelBase.GetModules()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.HandleMissingBindingIRequest">
            <summary>Sets the shim of KernelBase.HandleMissingBinding(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.HandleMissingBindingType">
            <summary>Sets the shim of KernelBase.HandleMissingBinding(Type service)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.HasModuleString">
            <summary>Sets the shim of KernelBase.HasModule(String name)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.InjectObjectIParameterArray">
            <summary>Sets the shim of KernelBase.Inject(Object instance, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.LoadIEnumerableOfAssembly">
            <summary>Sets the shim of KernelBase.Load(IEnumerable`1&lt;Assembly&gt; assemblies)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.LoadIEnumerableOfINinjectModule">
            <summary>Sets the shim of KernelBase.Load(IEnumerable`1&lt;INinjectModule&gt; m)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.LoadIEnumerableOfString">
            <summary>Sets the shim of KernelBase.Load(IEnumerable`1&lt;String&gt; filePatterns)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.ReleaseObject">
            <summary>Sets the shim of KernelBase.Release(Object instance)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.RemoveBindingIBinding">
            <summary>Sets the shim of KernelBase.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.ResolveIRequest">
            <summary>Sets the shim of KernelBase.Resolve(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.SatifiesRequestIRequest">
            <summary>Sets the shim of KernelBase.SatifiesRequest(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.SettingsGet">
            <summary>Sets the shim of KernelBase.get_Settings()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.SettingsSetINinjectSettings">
            <summary>Sets the shim of KernelBase.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.SystemIServiceProviderGetServiceType">
            <summary>Sets the shim of KernelBase.System.IServiceProvider.GetService(Type service)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.TypeIsSelfBindableType">
            <summary>Sets the shim of KernelBase.TypeIsSelfBindable(Type service)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.UnbindType">
            <summary>Sets the shim of KernelBase.Unbind(Type service)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase.UnloadString">
            <summary>Sets the shim of KernelBase.Unload(String name)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase._AddBindingsb__2cIBinding">
            <summary>Sets the shim of KernelBase.&lt;AddBindings&gt;b__2c(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase._HandleMissingBindingb__25ListOfIBinding">
            <summary>Sets the shim of KernelBase.&lt;HandleMissingBinding&gt;b__25(List`1&lt;IBinding&gt; b)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase._HandleMissingBindingb__26IBinding">
            <summary>Sets the shim of KernelBase.&lt;HandleMissingBinding&gt;b__26(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase._Loadb__2Assembly">
            <summary>Sets the shim of KernelBase.&lt;Load&gt;b__2(Assembly asm)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase._Resolveb__9IBinding">
            <summary>Sets the shim of KernelBase.&lt;Resolve&gt;b__9(IBinding b)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase._Resolveb__dIBinding">
            <summary>Sets the shim of KernelBase.&lt;Resolve&gt;b__d(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimKernelBase._Resolveb__eIBinding">
            <summary>Sets the shim of KernelBase.&lt;Resolve&gt;b__e(IBinding binding)</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimModuleLoadExtensions">
            <summary>Shim type of Ninject.ModuleLoadExtensions</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimModuleLoadExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimModuleLoadExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimModuleLoadExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimModuleLoadExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimModuleLoadExtensions.LoadIKernelAssemblyArray">
            <summary>Sets the shim of ModuleLoadExtensions.Load(IKernel kernel, Assembly[] assemblies)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimModuleLoadExtensions.LoadIKernelINinjectModuleArray">
            <summary>Sets the shim of ModuleLoadExtensions.Load(IKernel kernel, INinjectModule[] modules)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimModuleLoadExtensions.LoadIKernelStringArray">
            <summary>Sets the shim of ModuleLoadExtensions.Load(IKernel kernel, String[] filePatterns)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimModuleLoadExtensions.LoadOf1IKernel``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Ninject.IKernel})">
            <summary>Sets the shim of ModuleLoadExtensions.Load(IKernel kernel)</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimNamedAttribute">
            <summary>Shim type of Ninject.NamedAttribute</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNamedAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNamedAttribute.#ctor(Ninject.NamedAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimNamedAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNamedAttribute.AllInstances.MatchesIBindingMetadata">
            <summary>Sets the shim of NamedAttribute.Matches(IBindingMetadata metadata)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNamedAttribute.AllInstances.NameGet">
            <summary>Sets the shim of NamedAttribute.get_Name()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNamedAttribute.AllInstances.NameSetString">
            <summary>Sets the shim of NamedAttribute.set_Name(String value)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNamedAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNamedAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNamedAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNamedAttribute.ConstructorString">
            <summary>Sets the shim of NamedAttribute.NamedAttribute(String name)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNamedAttribute.MatchesIBindingMetadata">
            <summary>Sets the shim of NamedAttribute.Matches(IBindingMetadata metadata)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNamedAttribute.NameGet">
            <summary>Sets the shim of NamedAttribute.get_Name()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNamedAttribute.NameSetString">
            <summary>Sets the shim of NamedAttribute.set_Name(String value)</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimNinjectSettings">
            <summary>Shim type of Ninject.NinjectSettings</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNinjectSettings.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNinjectSettings.#ctor(Ninject.NinjectSettings)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.ActivationCacheDisabledGet">
            <summary>Sets the shim of NinjectSettings.get_ActivationCacheDisabled()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.ActivationCacheDisabledSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_ActivationCacheDisabled(Boolean value)</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimNinjectSettings.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.ActivationCacheDisabledGet">
            <summary>Sets the shim of NinjectSettings.get_ActivationCacheDisabled()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.ActivationCacheDisabledSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_ActivationCacheDisabled(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.AllowNullInjectionGet">
            <summary>Sets the shim of NinjectSettings.get_AllowNullInjection()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.AllowNullInjectionSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_AllowNullInjection(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.CachePruningIntervalGet">
            <summary>Sets the shim of NinjectSettings.get_CachePruningInterval()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.CachePruningIntervalSetTimeSpan">
            <summary>Sets the shim of NinjectSettings.set_CachePruningInterval(TimeSpan value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.DefaultScopeCallbackGet">
            <summary>Sets the shim of NinjectSettings.get_DefaultScopeCallback()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.DefaultScopeCallbackSetFuncOfIContextObject">
            <summary>Sets the shim of NinjectSettings.set_DefaultScopeCallback(Func`2&lt;IContext,Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.ExtensionSearchPatternsGet">
            <summary>Sets the shim of NinjectSettings.get_ExtensionSearchPatterns()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.ExtensionSearchPatternsSetStringArray">
            <summary>Sets the shim of NinjectSettings.set_ExtensionSearchPatterns(String[] value)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNinjectSettings.AllInstances.GetOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.NinjectSettings,System.String,``0,``0})">
            <summary>Sets the shim of NinjectSettings.Get(String key, !!0 defaultValue)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.InjectAttributeGet">
            <summary>Sets the shim of NinjectSettings.get_InjectAttribute()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.InjectAttributeSetType">
            <summary>Sets the shim of NinjectSettings.set_InjectAttribute(Type value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.InjectNonPublicGet">
            <summary>Sets the shim of NinjectSettings.get_InjectNonPublic()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.InjectNonPublicSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_InjectNonPublic(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.InjectParentPrivatePropertiesGet">
            <summary>Sets the shim of NinjectSettings.get_InjectParentPrivateProperties()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.InjectParentPrivatePropertiesSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_InjectParentPrivateProperties(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.LoadExtensionsGet">
            <summary>Sets the shim of NinjectSettings.get_LoadExtensions()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.LoadExtensionsSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_LoadExtensions(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.SetStringObject">
            <summary>Sets the shim of NinjectSettings.Set(String key, Object value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.UseReflectionBasedInjectionGet">
            <summary>Sets the shim of NinjectSettings.get_UseReflectionBasedInjection()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllInstances.UseReflectionBasedInjectionSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_UseReflectionBasedInjection(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllowNullInjectionGet">
            <summary>Sets the shim of NinjectSettings.get_AllowNullInjection()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.AllowNullInjectionSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_AllowNullInjection(Boolean value)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNinjectSettings.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNinjectSettings.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNinjectSettings.Bind(Ninject.INinjectSettings)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.CachePruningIntervalGet">
            <summary>Sets the shim of NinjectSettings.get_CachePruningInterval()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.CachePruningIntervalSetTimeSpan">
            <summary>Sets the shim of NinjectSettings.set_CachePruningInterval(TimeSpan value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.Constructor">
            <summary>Sets the shim of NinjectSettings.NinjectSettings()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.DefaultScopeCallbackGet">
            <summary>Sets the shim of NinjectSettings.get_DefaultScopeCallback()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.DefaultScopeCallbackSetFuncOfIContextObject">
            <summary>Sets the shim of NinjectSettings.set_DefaultScopeCallback(Func`2&lt;IContext,Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.ExtensionSearchPatternsGet">
            <summary>Sets the shim of NinjectSettings.get_ExtensionSearchPatterns()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.ExtensionSearchPatternsSetStringArray">
            <summary>Sets the shim of NinjectSettings.set_ExtensionSearchPatterns(String[] value)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimNinjectSettings.GetOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0,``0})">
            <summary>Sets the shim of NinjectSettings.Get(String key, !!0 defaultValue)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.InjectAttributeGet">
            <summary>Sets the shim of NinjectSettings.get_InjectAttribute()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.InjectAttributeSetType">
            <summary>Sets the shim of NinjectSettings.set_InjectAttribute(Type value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.InjectNonPublicGet">
            <summary>Sets the shim of NinjectSettings.get_InjectNonPublic()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.InjectNonPublicSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_InjectNonPublic(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.InjectParentPrivatePropertiesGet">
            <summary>Sets the shim of NinjectSettings.get_InjectParentPrivateProperties()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.InjectParentPrivatePropertiesSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_InjectParentPrivateProperties(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.LoadExtensionsGet">
            <summary>Sets the shim of NinjectSettings.get_LoadExtensions()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.LoadExtensionsSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_LoadExtensions(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.SetStringObject">
            <summary>Sets the shim of NinjectSettings.Set(String key, Object value)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.UseReflectionBasedInjectionGet">
            <summary>Sets the shim of NinjectSettings.get_UseReflectionBasedInjection()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimNinjectSettings.UseReflectionBasedInjectionSetBoolean">
            <summary>Sets the shim of NinjectSettings.set_UseReflectionBasedInjection(Boolean value)</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimOptionalAttribute">
            <summary>Shim type of Ninject.OptionalAttribute</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimOptionalAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimOptionalAttribute.#ctor(Ninject.OptionalAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimOptionalAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimOptionalAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimOptionalAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimOptionalAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimOptionalAttribute.Constructor">
            <summary>Sets the shim of OptionalAttribute.OptionalAttribute()</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimResolutionExtensions">
            <summary>Shim type of Ninject.ResolutionExtensions</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.CanResolveIResolutionRootTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the shim of ResolutionExtensions.CanResolve(IResolutionRoot root, Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.CanResolveIResolutionRootTypeFuncOfIBindingMetadataBooleanIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.CanResolve(IResolutionRoot root, Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.CanResolveIResolutionRootTypeIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.CanResolve(IResolutionRoot root, Type service, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.CanResolveIResolutionRootTypeStringIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.CanResolve(IResolutionRoot root, Type service, String name, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.CanResolveOf1IResolutionRootFuncOfIBindingMetadataBooleanIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Ninject.Parameters.IParameter[],System.Boolean})">
            <summary>Sets the shim of ResolutionExtensions.CanResolve(IResolutionRoot root, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.CanResolveOf1IResolutionRootIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,Ninject.Parameters.IParameter[],System.Boolean})">
            <summary>Sets the shim of ResolutionExtensions.CanResolve(IResolutionRoot root, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.CanResolveOf1IResolutionRootStringIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.String,Ninject.Parameters.IParameter[],System.Boolean})">
            <summary>Sets the shim of ResolutionExtensions.CanResolve(IResolutionRoot root, String name, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.DoTryGetAndThrowOnInvalidBindingOf1IResolutionRootFuncOfIBindingMetadataBooleanIEnumerableOfIParameter``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},``0})">
            <summary>Sets the shim of ResolutionExtensions.DoTryGetAndThrowOnInvalidBinding(IResolutionRoot root, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.GetAllIResolutionRootTypeFuncOfIBindingMetadataBooleanIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.GetAll(IResolutionRoot root, Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.GetAllIResolutionRootTypeIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.GetAll(IResolutionRoot root, Type service, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.GetAllIResolutionRootTypeStringIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.GetAll(IResolutionRoot root, Type service, String name, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.GetAllOf1IResolutionRootFuncOfIBindingMetadataBooleanIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Ninject.Parameters.IParameter[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ResolutionExtensions.GetAll(IResolutionRoot root, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.GetAllOf1IResolutionRootIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,Ninject.Parameters.IParameter[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ResolutionExtensions.GetAll(IResolutionRoot root, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.GetAllOf1IResolutionRootStringIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.String,Ninject.Parameters.IParameter[],System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ResolutionExtensions.GetAll(IResolutionRoot root, String name, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.GetIResolutionRootTypeFuncOfIBindingMetadataBooleanIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.Get(IResolutionRoot root, Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.GetIResolutionRootTypeIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.GetIResolutionRootTypeStringIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.Get(IResolutionRoot root, Type service, String name, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.GetOf1IResolutionRootFuncOfIBindingMetadataBooleanIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Ninject.Parameters.IParameter[],``0})">
            <summary>Sets the shim of ResolutionExtensions.Get(IResolutionRoot root, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.GetOf1IResolutionRootIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,Ninject.Parameters.IParameter[],``0})">
            <summary>Sets the shim of ResolutionExtensions.Get(IResolutionRoot root, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.GetOf1IResolutionRootStringIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.String,Ninject.Parameters.IParameter[],``0})">
            <summary>Sets the shim of ResolutionExtensions.Get(IResolutionRoot root, String name, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.GetResolutionIteratorIResolutionRootTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the shim of ResolutionExtensions.GetResolutionIterator(IResolutionRoot root, Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.GetResolutionIteratorIResolutionRootTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBooleanBoolean">
            <summary>Sets the shim of ResolutionExtensions.GetResolutionIterator(IResolutionRoot root, Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique, Boolean forceUnique)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.TryGetAndThrowOnInvalidBindingOf1IResolutionRootFuncOfIBindingMetadataBooleanIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Ninject.Parameters.IParameter[],``0})">
            <summary>Sets the shim of ResolutionExtensions.TryGetAndThrowOnInvalidBinding(IResolutionRoot root, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.TryGetAndThrowOnInvalidBindingOf1IResolutionRootIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,Ninject.Parameters.IParameter[],``0})">
            <summary>Sets the shim of ResolutionExtensions.TryGetAndThrowOnInvalidBinding(IResolutionRoot root, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.TryGetAndThrowOnInvalidBindingOf1IResolutionRootStringIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.String,Ninject.Parameters.IParameter[],``0})">
            <summary>Sets the shim of ResolutionExtensions.TryGetAndThrowOnInvalidBinding(IResolutionRoot root, String name, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.TryGetIResolutionRootTypeFuncOfIBindingMetadataBooleanIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.TryGet(IResolutionRoot root, Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.TryGetIResolutionRootTypeIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.TryGet(IResolutionRoot root, Type service, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimResolutionExtensions.TryGetIResolutionRootTypeStringIParameterArray">
            <summary>Sets the shim of ResolutionExtensions.TryGet(IResolutionRoot root, Type service, String name, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.TryGetOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},``0})">
            <summary>Sets the shim of ResolutionExtensions.TryGet(IEnumerable`1&lt;!!0&gt; iterator)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.TryGetOf1IResolutionRootFuncOfIBindingMetadataBooleanIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},Ninject.Parameters.IParameter[],``0})">
            <summary>Sets the shim of ResolutionExtensions.TryGet(IResolutionRoot root, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.TryGetOf1IResolutionRootIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,Ninject.Parameters.IParameter[],``0})">
            <summary>Sets the shim of ResolutionExtensions.TryGet(IResolutionRoot root, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimResolutionExtensions.TryGetOf1IResolutionRootStringIParameterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IResolutionRoot,System.String,Ninject.Parameters.IParameter[],``0})">
            <summary>Sets the shim of ResolutionExtensions.TryGet(IResolutionRoot root, String name, IParameter[] parameters)</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimStandardKernel">
            <summary>Shim type of Ninject.StandardKernel</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.#ctor(Ninject.StandardKernel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimStandardKernel.AddComponents">
            <summary>Sets the shim of StandardKernel.AddComponents()</summary>
        </member>
        <member name="T:Ninject.Fakes.ShimStandardKernel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimStandardKernel.AllInstances.AddComponents">
            <summary>Sets the shim of StandardKernel.AddComponents()</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimStandardKernel.AllInstances.KernelInstanceGet">
            <summary>Sets the shim of StandardKernel.get_KernelInstance()</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimStandardKernel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.Bind(Ninject.IKernel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.Bind(Ninject.Syntax.IBindingRoot)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.Bind(Ninject.Syntax.IResolutionRoot)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Fakes.ShimStandardKernel.Bind(System.IServiceProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimStandardKernel.ConstructorINinjectModuleArray">
            <summary>Sets the shim of StandardKernel.StandardKernel(INinjectModule[] modules)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimStandardKernel.ConstructorINinjectSettingsINinjectModuleArray">
            <summary>Sets the shim of StandardKernel.StandardKernel(INinjectSettings settings, INinjectModule[] modules)</summary>
        </member>
        <member name="P:Ninject.Fakes.ShimStandardKernel.KernelInstanceGet">
            <summary>Sets the shim of StandardKernel.get_KernelInstance()</summary>
        </member>
        <member name="T:Ninject.Fakes.StubActivationException">
            <summary>Stub type of Ninject.ActivationException</summary>
        </member>
        <member name="M:Ninject.Fakes.StubActivationException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubActivationException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubActivationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubActivationException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubActivationException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Fakes.StubActivationException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubActivationException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubActivationException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Ninject.Fakes.StubActivationException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubActivationException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubActivationException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubActivationException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubActivationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubActivationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubActivationException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubActivationException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubActivationException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubActivationException.InitializeStub">
            <summary>Initializes a new instance of type StubActivationException</summary>
        </member>
        <member name="P:Ninject.Fakes.StubActivationException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubActivationException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubActivationException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubActivationException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:Ninject.Fakes.StubActivationException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubActivationException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubActivationException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubActivationException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubActivationException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubActivationException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubActivationException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:Ninject.Fakes.StubConstraintAttribute">
            <summary>Stub type of Ninject.ConstraintAttribute</summary>
        </member>
        <member name="M:Ninject.Fakes.StubConstraintAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Fakes.StubConstraintAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Fakes.StubConstraintAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubConstraintAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubConstraintAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubConstraintAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubConstraintAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubConstraintAttribute</summary>
        </member>
        <member name="P:Ninject.Fakes.StubConstraintAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubConstraintAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:Ninject.Fakes.StubConstraintAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubConstraintAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubConstraintAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubConstraintAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubConstraintAttribute.Matches(Ninject.Planning.Bindings.IBindingMetadata)">
            <summary>Sets the stub of ConstraintAttribute.Matches(IBindingMetadata metadata)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubConstraintAttribute.MatchesIBindingMetadata">
            <summary>Sets the stub of ConstraintAttribute.Matches(IBindingMetadata metadata)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubConstraintAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubConstraintAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Ninject.Fakes.StubGlobalKernelRegistration">
            <summary>Stub type of Ninject.GlobalKernelRegistration</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistration.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Fakes.StubGlobalKernelRegistration.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistration.InitializeStub">
            <summary>Initializes a new instance of type StubGlobalKernelRegistration</summary>
        </member>
        <member name="P:Ninject.Fakes.StubGlobalKernelRegistration.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubGlobalKernelRegistration.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Fakes.StubGlobalKernelRegistrationModule`1">
            <summary>Stub type of Ninject.GlobalKernelRegistrationModule`1</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.AddBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of NinjectModule.AddBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.AddBindingIBinding">
            <summary>Sets the stub of NinjectModule.AddBinding(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.InitializeStub">
            <summary>Initializes a new instance of type StubGlobalKernelRegistrationModule</summary>
        </member>
        <member name="P:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.KernelInstance">
            <summary>Sets the stub of NinjectModule.get_KernelInstance()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.KernelInstanceGet">
            <summary>Sets the stub of NinjectModule.get_KernelInstance()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.Load">
            <summary>Sets the stub of GlobalKernelRegistrationModule`1.Load()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.Load01">
            <summary>Sets the stub of GlobalKernelRegistrationModule`1.Load()</summary>
        </member>
        <member name="P:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.Name">
            <summary>Sets the stub of NinjectModule.get_Name()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.NameGet">
            <summary>Sets the stub of NinjectModule.get_Name()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.RemoveBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of NinjectModule.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.RemoveBindingIBinding">
            <summary>Sets the stub of NinjectModule.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.Unbind(System.Type)">
            <summary>Sets the stub of NinjectModule.Unbind(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.UnbindType">
            <summary>Sets the stub of NinjectModule.Unbind(Type service)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.Unload">
            <summary>Sets the stub of GlobalKernelRegistrationModule`1.Unload()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.Unload01">
            <summary>Sets the stub of GlobalKernelRegistrationModule`1.Unload()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.VerifyRequiredModulesAreLoaded">
            <summary>Sets the stub of NinjectModule.VerifyRequiredModulesAreLoaded()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubGlobalKernelRegistrationModule`1.VerifyRequiredModulesAreLoaded01">
            <summary>Sets the stub of NinjectModule.VerifyRequiredModulesAreLoaded()</summary>
        </member>
        <member name="T:Ninject.Fakes.StubIInitializable">
            <summary>Stub type of Ninject.IInitializable</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIInitializable.#ctor">
            <summary>Initializes a new instance of type StubIInitializable</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIInitializable.Initialize">
            <summary>Sets the stub of IInitializable.Initialize()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIInitializable.Ninject#IInitializable#Initialize">
            <summary>Sets the stub of IInitializable.Initialize()</summary>
        </member>
        <member name="T:Ninject.Fakes.StubIKernel">
            <summary>Stub type of Ninject.IKernel</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.#ctor">
            <summary>Initializes a new instance of type StubIKernel</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.AddBindingIBinding">
            <summary>Sets the stub of IBindingRoot.AddBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.BeginBlock">
            <summary>Sets the stub of IKernel.BeginBlock()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.BindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0}})">
            <summary>Sets stubs of Bind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.BindOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1}})">
            <summary>Sets stubs of Bind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.BindOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2}})">
            <summary>Sets stubs of Bind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.BindOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2,``3}})">
            <summary>Sets stubs of Bind()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.BindTypeArray">
            <summary>Sets the stub of IBindingRoot.Bind(Type[] services)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.CanResolveIRequest">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.CanResolveIRequestBoolean">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubIKernel.Ninject#IKernel#Components">
            <summary>Sets the stub of IKernel.get_Components()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.ComponentsGet">
            <summary>Sets the stub of IKernel.get_Components()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.CreateRequestTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the stub of IResolutionRoot.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.GetBindingsType">
            <summary>Sets the stub of IKernel.GetBindings(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.GetModules">
            <summary>Sets the stub of IKernel.GetModules()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.GetServiceType">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.HasModuleString">
            <summary>Sets the stub of IKernel.HasModule(String name)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.InjectObjectIParameterArray">
            <summary>Sets the stub of IKernel.Inject(Object instance, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubIKernel.Ninject#Infrastructure#Disposal#IDisposableObject#IsDisposed">
            <summary>Sets the stub of IDisposableObject.get_IsDisposed()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.IsDisposedGet">
            <summary>Sets the stub of IDisposableObject.get_IsDisposed()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.LoadIEnumerableOfAssembly">
            <summary>Sets the stub of IKernel.Load(IEnumerable`1&lt;Assembly&gt; assemblies)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.LoadIEnumerableOfINinjectModule">
            <summary>Sets the stub of IKernel.Load(IEnumerable`1&lt;INinjectModule&gt; m)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.LoadIEnumerableOfString">
            <summary>Sets the stub of IKernel.Load(IEnumerable`1&lt;String&gt; filePatterns)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#IKernel#BeginBlock">
            <summary>Sets the stub of IKernel.BeginBlock()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#IKernel#GetBindings(System.Type)">
            <summary>Sets the stub of IKernel.GetBindings(Type service)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#IKernel#GetModules">
            <summary>Sets the stub of IKernel.GetModules()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#IKernel#HasModule(System.String)">
            <summary>Sets the stub of IKernel.HasModule(String name)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#IKernel#Inject(System.Object,Ninject.Parameters.IParameter[])">
            <summary>Sets the stub of IKernel.Inject(Object instance, IParameter[] parameters)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#IKernel#Load(System.Collections.Generic.IEnumerable{Ninject.Modules.INinjectModule})">
            <summary>Sets the stub of IKernel.Load(IEnumerable`1&lt;INinjectModule&gt; m)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#IKernel#Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sets the stub of IKernel.Load(IEnumerable`1&lt;String&gt; filePatterns)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#IKernel#Load(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>Sets the stub of IKernel.Load(IEnumerable`1&lt;Assembly&gt; assemblies)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#IKernel#Unload(System.String)">
            <summary>Sets the stub of IKernel.Unload(String name)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#AddBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of IBindingRoot.AddBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Bind``1">
            <summary>Sets the stub of IBindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Bind(System.Type[])">
            <summary>Sets the stub of IBindingRoot.Bind(Type[] services)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Bind``2">
            <summary>Sets the stub of IBindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Bind``3">
            <summary>Sets the stub of IBindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Bind``4">
            <summary>Sets the stub of IBindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Rebind``1">
            <summary>Sets the stub of IBindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Rebind(System.Type[])">
            <summary>Sets the stub of IBindingRoot.Rebind(Type[] services)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Rebind``2">
            <summary>Sets the stub of IBindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Rebind``3">
            <summary>Sets the stub of IBindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Rebind``4">
            <summary>Sets the stub of IBindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#RemoveBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of IBindingRoot.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Unbind``1">
            <summary>Sets the stub of IBindingRoot.Unbind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IBindingRoot#Unbind(System.Type)">
            <summary>Sets the stub of IBindingRoot.Unbind(Type service)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IResolutionRoot#CanResolve(Ninject.Activation.IRequest)">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IResolutionRoot#CanResolve(Ninject.Activation.IRequest,System.Boolean)">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IResolutionRoot#CreateRequest(System.Type,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>Sets the stub of IResolutionRoot.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IResolutionRoot#Release(System.Object)">
            <summary>Sets the stub of IResolutionRoot.Release(Object instance)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.Ninject#Syntax#IResolutionRoot#Resolve(Ninject.Activation.IRequest)">
            <summary>Sets the stub of IResolutionRoot.Resolve(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.RebindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0}})">
            <summary>Sets stubs of Rebind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.RebindOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1}})">
            <summary>Sets stubs of Rebind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.RebindOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2}})">
            <summary>Sets stubs of Rebind()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.RebindOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2,``3}})">
            <summary>Sets stubs of Rebind()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.RebindTypeArray">
            <summary>Sets the stub of IBindingRoot.Rebind(Type[] services)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.ReleaseObject">
            <summary>Sets the stub of IResolutionRoot.Release(Object instance)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.RemoveBindingIBinding">
            <summary>Sets the stub of IBindingRoot.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.ResolveIRequest">
            <summary>Sets the stub of IResolutionRoot.Resolve(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubIKernel.Ninject#IKernel#Settings">
            <summary>Sets the stub of IKernel.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.SettingsGet">
            <summary>Sets the stub of IKernel.get_Settings()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.System#IServiceProvider#GetService(System.Type)">
            <summary>Sets the stub of IServiceProvider.GetService(Type serviceType)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIKernel.UnbindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets stubs of Unbind()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.UnbindType">
            <summary>Sets the stub of IBindingRoot.Unbind(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIKernel.UnloadString">
            <summary>Sets the stub of IKernel.Unload(String name)</summary>
        </member>
        <member name="T:Ninject.Fakes.StubINinjectSettings">
            <summary>Stub type of Ninject.INinjectSettings</summary>
        </member>
        <member name="M:Ninject.Fakes.StubINinjectSettings.#ctor">
            <summary>Initializes a new instance of type StubINinjectSettings</summary>
        </member>
        <member name="P:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#ActivationCacheDisabled">
            <summary>Sets the stub of INinjectSettings.get_ActivationCacheDisabled()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.ActivationCacheDisabledGet">
            <summary>Sets the stub of INinjectSettings.get_ActivationCacheDisabled()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.ActivationCacheDisabledSetBoolean">
            <summary>Sets the stub of INinjectSettings.set_ActivationCacheDisabled(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#AllowNullInjection">
            <summary>Sets the stub of INinjectSettings.get_AllowNullInjection()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.AllowNullInjectionGet">
            <summary>Sets the stub of INinjectSettings.get_AllowNullInjection()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.AllowNullInjectionSetBoolean">
            <summary>Sets the stub of INinjectSettings.set_AllowNullInjection(Boolean value)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubINinjectSettings.AttachBackingFieldToActivationCacheDisabled">
            <summary>Attaches delegates to emulate StubINinjectSettings.ActivationCacheDisabled as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Fakes.StubINinjectSettings.AttachBackingFieldToAllowNullInjection">
            <summary>Attaches delegates to emulate StubINinjectSettings.AllowNullInjection as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Fakes.StubINinjectSettings.AttachBackingFieldToInjectNonPublic">
            <summary>Attaches delegates to emulate StubINinjectSettings.InjectNonPublic as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Fakes.StubINinjectSettings.AttachBackingFieldToInjectParentPrivateProperties">
            <summary>Attaches delegates to emulate StubINinjectSettings.InjectParentPrivateProperties as a property with a backing field.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#CachePruningInterval">
            <summary>Sets the stub of INinjectSettings.get_CachePruningInterval()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.CachePruningIntervalGet">
            <summary>Sets the stub of INinjectSettings.get_CachePruningInterval()</summary>
        </member>
        <member name="P:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#DefaultScopeCallback">
            <summary>Sets the stub of INinjectSettings.get_DefaultScopeCallback()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.DefaultScopeCallbackGet">
            <summary>Sets the stub of INinjectSettings.get_DefaultScopeCallback()</summary>
        </member>
        <member name="P:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#ExtensionSearchPatterns">
            <summary>Sets the stub of INinjectSettings.get_ExtensionSearchPatterns()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.ExtensionSearchPatternsGet">
            <summary>Sets the stub of INinjectSettings.get_ExtensionSearchPatterns()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubINinjectSettings.GetOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0,``0})">
            <summary>Sets stubs of Get(String key, !!0 defaultValue)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#InjectAttribute">
            <summary>Sets the stub of INinjectSettings.get_InjectAttribute()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.InjectAttributeGet">
            <summary>Sets the stub of INinjectSettings.get_InjectAttribute()</summary>
        </member>
        <member name="P:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#InjectNonPublic">
            <summary>Sets the stub of INinjectSettings.get_InjectNonPublic()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.InjectNonPublicGet">
            <summary>Sets the stub of INinjectSettings.get_InjectNonPublic()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.InjectNonPublicSetBoolean">
            <summary>Sets the stub of INinjectSettings.set_InjectNonPublic(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#InjectParentPrivateProperties">
            <summary>Sets the stub of INinjectSettings.get_InjectParentPrivateProperties()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.InjectParentPrivatePropertiesGet">
            <summary>Sets the stub of INinjectSettings.get_InjectParentPrivateProperties()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.InjectParentPrivatePropertiesSetBoolean">
            <summary>Sets the stub of INinjectSettings.set_InjectParentPrivateProperties(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#LoadExtensions">
            <summary>Sets the stub of INinjectSettings.get_LoadExtensions()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.LoadExtensionsGet">
            <summary>Sets the stub of INinjectSettings.get_LoadExtensions()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#Get``1(System.String,``0)">
            <summary>Sets the stub of INinjectSettings.Get(String key, !!0 defaultValue)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#Set(System.String,System.Object)">
            <summary>Sets the stub of INinjectSettings.Set(String key, Object value)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.SetStringObject">
            <summary>Sets the stub of INinjectSettings.Set(String key, Object value)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubINinjectSettings.Ninject#INinjectSettings#UseReflectionBasedInjection">
            <summary>Sets the stub of INinjectSettings.get_UseReflectionBasedInjection()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubINinjectSettings.UseReflectionBasedInjectionGet">
            <summary>Sets the stub of INinjectSettings.get_UseReflectionBasedInjection()</summary>
        </member>
        <member name="T:Ninject.Fakes.StubIStartable">
            <summary>Stub type of Ninject.IStartable</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIStartable.#ctor">
            <summary>Initializes a new instance of type StubIStartable</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIStartable.Ninject#IStartable#Start">
            <summary>Sets the stub of IStartable.Start()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubIStartable.Ninject#IStartable#Stop">
            <summary>Sets the stub of IStartable.Stop()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIStartable.Start">
            <summary>Sets the stub of IStartable.Start()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubIStartable.Stop">
            <summary>Sets the stub of IStartable.Stop()</summary>
        </member>
        <member name="T:Ninject.Fakes.StubInjectAttribute">
            <summary>Stub type of Ninject.InjectAttribute</summary>
        </member>
        <member name="M:Ninject.Fakes.StubInjectAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Fakes.StubInjectAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Fakes.StubInjectAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubInjectAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubInjectAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubInjectAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubInjectAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubInjectAttribute</summary>
        </member>
        <member name="P:Ninject.Fakes.StubInjectAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubInjectAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:Ninject.Fakes.StubInjectAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubInjectAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubInjectAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubInjectAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubInjectAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubInjectAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Ninject.Fakes.StubKernelBase">
            <summary>Stub type of Ninject.KernelBase</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.#ctor(Ninject.Modules.INinjectModule[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.#ctor(Ninject.INinjectSettings,Ninject.Modules.INinjectModule[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.#ctor(Ninject.Components.IComponentContainer,Ninject.INinjectSettings,Ninject.Modules.INinjectModule[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.AddBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of KernelBase.AddBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.AddBindingIBinding">
            <summary>Sets the stub of KernelBase.AddBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.AddComponents">
            <summary>Sets the stub of KernelBase.AddComponents()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.AddComponents01">
            <summary>Sets the stub of KernelBase.AddComponents()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.BeginBlock">
            <summary>Sets the stub of KernelBase.BeginBlock()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.BeginBlock01">
            <summary>Sets the stub of KernelBase.BeginBlock()</summary>
        </member>
        <member name="P:Ninject.Fakes.StubKernelBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.CanResolve(Ninject.Activation.IRequest)">
            <summary>Sets the stub of KernelBase.CanResolve(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.CanResolve(Ninject.Activation.IRequest,System.Boolean)">
            <summary>Sets the stub of KernelBase.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.CanResolveIRequest">
            <summary>Sets the stub of KernelBase.CanResolve(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.CanResolveIRequestBoolean">
            <summary>Sets the stub of KernelBase.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.CreateContext(Ninject.Activation.IRequest,Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of KernelBase.CreateContext(IRequest request, IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.CreateContextIRequestIBinding">
            <summary>Sets the stub of KernelBase.CreateContext(IRequest request, IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.CreateRequest(System.Type,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>Sets the stub of KernelBase.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.CreateRequestTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the stub of KernelBase.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.Dispose(System.Boolean)">
            <summary>Sets the stub of KernelBase.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.DisposeBoolean">
            <summary>Sets the stub of KernelBase.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.GetBindingPrecedenceComparer">
            <summary>Sets the stub of KernelBase.GetBindingPrecedenceComparer()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.GetBindingPrecedenceComparer01">
            <summary>Sets the stub of KernelBase.GetBindingPrecedenceComparer()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.GetBindings(System.Type)">
            <summary>Sets the stub of KernelBase.GetBindings(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.GetBindingsType">
            <summary>Sets the stub of KernelBase.GetBindings(Type service)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.HandleMissingBinding(Ninject.Activation.IRequest)">
            <summary>Sets the stub of KernelBase.HandleMissingBinding(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.HandleMissingBinding(System.Type)">
            <summary>Sets the stub of KernelBase.HandleMissingBinding(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.HandleMissingBindingIRequest">
            <summary>Sets the stub of KernelBase.HandleMissingBinding(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.HandleMissingBindingType">
            <summary>Sets the stub of KernelBase.HandleMissingBinding(Type service)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.InitializeStub">
            <summary>Initializes a new instance of type StubKernelBase</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.Inject(System.Object,Ninject.Parameters.IParameter[])">
            <summary>Sets the stub of KernelBase.Inject(Object instance, IParameter[] parameters)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.InjectObjectIParameterArray">
            <summary>Sets the stub of KernelBase.Inject(Object instance, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubKernelBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubKernelBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubKernelBase.KernelInstance">
            <summary>Sets the stub of BindingRoot.get_KernelInstance()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.KernelInstanceGet">
            <summary>Sets the stub of BindingRoot.get_KernelInstance()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.Release(System.Object)">
            <summary>Sets the stub of KernelBase.Release(Object instance)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.ReleaseObject">
            <summary>Sets the stub of KernelBase.Release(Object instance)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.RemoveBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of KernelBase.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.RemoveBindingIBinding">
            <summary>Sets the stub of KernelBase.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.Resolve(Ninject.Activation.IRequest)">
            <summary>Sets the stub of KernelBase.Resolve(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.ResolveIRequest">
            <summary>Sets the stub of KernelBase.Resolve(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.SatifiesRequest(Ninject.Activation.IRequest)">
            <summary>Sets the stub of KernelBase.SatifiesRequest(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.SatifiesRequestIRequest">
            <summary>Sets the stub of KernelBase.SatifiesRequest(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.TypeIsSelfBindable(System.Type)">
            <summary>Sets the stub of KernelBase.TypeIsSelfBindable(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.TypeIsSelfBindableType">
            <summary>Sets the stub of KernelBase.TypeIsSelfBindable(Type service)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubKernelBase.Unbind(System.Type)">
            <summary>Sets the stub of KernelBase.Unbind(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubKernelBase.UnbindType">
            <summary>Sets the stub of KernelBase.Unbind(Type service)</summary>
        </member>
        <member name="T:Ninject.Fakes.StubNamedAttribute">
            <summary>Stub type of Ninject.NamedAttribute</summary>
        </member>
        <member name="M:Ninject.Fakes.StubNamedAttribute.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Fakes.StubNamedAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Fakes.StubNamedAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubNamedAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubNamedAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubNamedAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubNamedAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubNamedAttribute</summary>
        </member>
        <member name="P:Ninject.Fakes.StubNamedAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubNamedAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:Ninject.Fakes.StubNamedAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubNamedAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubNamedAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubNamedAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubNamedAttribute.Matches(Ninject.Planning.Bindings.IBindingMetadata)">
            <summary>Sets the stub of NamedAttribute.Matches(IBindingMetadata metadata)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubNamedAttribute.MatchesIBindingMetadata">
            <summary>Sets the stub of NamedAttribute.Matches(IBindingMetadata metadata)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubNamedAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubNamedAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Ninject.Fakes.StubNinjectSettings">
            <summary>Stub type of Ninject.NinjectSettings</summary>
        </member>
        <member name="M:Ninject.Fakes.StubNinjectSettings.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Fakes.StubNinjectSettings.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Fakes.StubNinjectSettings.InitializeStub">
            <summary>Initializes a new instance of type StubNinjectSettings</summary>
        </member>
        <member name="P:Ninject.Fakes.StubNinjectSettings.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubNinjectSettings.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Fakes.StubOptionalAttribute">
            <summary>Stub type of Ninject.OptionalAttribute</summary>
        </member>
        <member name="M:Ninject.Fakes.StubOptionalAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Fakes.StubOptionalAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Fakes.StubOptionalAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubOptionalAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubOptionalAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubOptionalAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubOptionalAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubOptionalAttribute</summary>
        </member>
        <member name="P:Ninject.Fakes.StubOptionalAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubOptionalAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:Ninject.Fakes.StubOptionalAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubOptionalAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubOptionalAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubOptionalAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubOptionalAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubOptionalAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:Ninject.Fakes.StubStandardKernel">
            <summary>Stub type of Ninject.StandardKernel</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.#ctor(Ninject.Modules.INinjectModule[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.#ctor(Ninject.INinjectSettings,Ninject.Modules.INinjectModule[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.AddBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of KernelBase.AddBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.AddBindingIBinding">
            <summary>Sets the stub of KernelBase.AddBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.AddComponents">
            <summary>Sets the stub of StandardKernel.AddComponents()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.AddComponents01">
            <summary>Sets the stub of StandardKernel.AddComponents()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.BeginBlock">
            <summary>Sets the stub of KernelBase.BeginBlock()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.BeginBlock01">
            <summary>Sets the stub of KernelBase.BeginBlock()</summary>
        </member>
        <member name="P:Ninject.Fakes.StubStandardKernel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.CanResolve(Ninject.Activation.IRequest)">
            <summary>Sets the stub of KernelBase.CanResolve(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.CanResolve(Ninject.Activation.IRequest,System.Boolean)">
            <summary>Sets the stub of KernelBase.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.CanResolveIRequest">
            <summary>Sets the stub of KernelBase.CanResolve(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.CanResolveIRequestBoolean">
            <summary>Sets the stub of KernelBase.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.CreateContext(Ninject.Activation.IRequest,Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of KernelBase.CreateContext(IRequest request, IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.CreateContextIRequestIBinding">
            <summary>Sets the stub of KernelBase.CreateContext(IRequest request, IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.CreateRequest(System.Type,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>Sets the stub of KernelBase.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.CreateRequestTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the stub of KernelBase.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.Dispose(System.Boolean)">
            <summary>Sets the stub of KernelBase.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.DisposeBoolean">
            <summary>Sets the stub of KernelBase.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.GetBindingPrecedenceComparer">
            <summary>Sets the stub of KernelBase.GetBindingPrecedenceComparer()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.GetBindingPrecedenceComparer01">
            <summary>Sets the stub of KernelBase.GetBindingPrecedenceComparer()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.GetBindings(System.Type)">
            <summary>Sets the stub of KernelBase.GetBindings(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.GetBindingsType">
            <summary>Sets the stub of KernelBase.GetBindings(Type service)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.HandleMissingBinding(Ninject.Activation.IRequest)">
            <summary>Sets the stub of KernelBase.HandleMissingBinding(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.HandleMissingBinding(System.Type)">
            <summary>Sets the stub of KernelBase.HandleMissingBinding(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.HandleMissingBindingIRequest">
            <summary>Sets the stub of KernelBase.HandleMissingBinding(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.HandleMissingBindingType">
            <summary>Sets the stub of KernelBase.HandleMissingBinding(Type service)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.InitializeStub">
            <summary>Initializes a new instance of type StubStandardKernel</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.Inject(System.Object,Ninject.Parameters.IParameter[])">
            <summary>Sets the stub of KernelBase.Inject(Object instance, IParameter[] parameters)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.InjectObjectIParameterArray">
            <summary>Sets the stub of KernelBase.Inject(Object instance, IParameter[] parameters)</summary>
        </member>
        <member name="P:Ninject.Fakes.StubStandardKernel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubStandardKernel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Fakes.StubStandardKernel.KernelInstance">
            <summary>Sets the stub of StandardKernel.get_KernelInstance()</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.KernelInstanceGet">
            <summary>Sets the stub of StandardKernel.get_KernelInstance()</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.Release(System.Object)">
            <summary>Sets the stub of KernelBase.Release(Object instance)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.ReleaseObject">
            <summary>Sets the stub of KernelBase.Release(Object instance)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.RemoveBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of KernelBase.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.RemoveBindingIBinding">
            <summary>Sets the stub of KernelBase.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.Resolve(Ninject.Activation.IRequest)">
            <summary>Sets the stub of KernelBase.Resolve(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.ResolveIRequest">
            <summary>Sets the stub of KernelBase.Resolve(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.SatifiesRequest(Ninject.Activation.IRequest)">
            <summary>Sets the stub of KernelBase.SatifiesRequest(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.SatifiesRequestIRequest">
            <summary>Sets the stub of KernelBase.SatifiesRequest(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.TypeIsSelfBindable(System.Type)">
            <summary>Sets the stub of KernelBase.TypeIsSelfBindable(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.TypeIsSelfBindableType">
            <summary>Sets the stub of KernelBase.TypeIsSelfBindable(Type service)</summary>
        </member>
        <member name="M:Ninject.Fakes.StubStandardKernel.Unbind(System.Type)">
            <summary>Sets the stub of KernelBase.Unbind(Type service)</summary>
        </member>
        <member name="F:Ninject.Fakes.StubStandardKernel.UnbindType">
            <summary>Sets the stub of KernelBase.Unbind(Type service)</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject">
            <summary>Shim type of Ninject.Infrastructure.Disposal.DisposableObject</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.#ctor(Ninject.Infrastructure.Disposal.DisposableObject)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.AllInstances.Dispose">
            <summary>Sets the shim of DisposableObject.Dispose()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.AllInstances.DisposeBoolean">
            <summary>Sets the shim of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.AllInstances.IsDisposedGet">
            <summary>Sets the shim of DisposableObject.get_IsDisposed()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.AllInstances.IsDisposedSetBoolean">
            <summary>Sets the shim of DisposableObject.set_IsDisposed(Boolean value)</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.Constructor">
            <summary>Sets the shim of DisposableObject.DisposableObject()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.Dispose">
            <summary>Sets the shim of DisposableObject.Dispose()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.DisposeBoolean">
            <summary>Sets the shim of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.IsDisposedGet">
            <summary>Sets the shim of DisposableObject.get_IsDisposed()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.ShimDisposableObject.IsDisposedSetBoolean">
            <summary>Sets the shim of DisposableObject.set_IsDisposed(Boolean value)</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Disposal.Fakes.StubDisposableObject">
            <summary>Stub type of Ninject.Infrastructure.Disposal.DisposableObject</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.StubDisposableObject.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.StubDisposableObject.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.StubDisposableObject.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Disposal.Fakes.StubDisposableObject.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.StubDisposableObject.InitializeStub">
            <summary>Initializes a new instance of type StubDisposableObject</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.StubDisposableObject.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.StubDisposableObject.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Disposal.Fakes.StubIDisposableObject">
            <summary>Stub type of Ninject.Infrastructure.Disposal.IDisposableObject</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.StubIDisposableObject.#ctor">
            <summary>Initializes a new instance of type StubIDisposableObject</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Disposal.Fakes.StubIDisposableObject.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.StubIDisposableObject.Ninject#Infrastructure#Disposal#IDisposableObject#IsDisposed">
            <summary>Sets the stub of IDisposableObject.get_IsDisposed()</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Disposal.Fakes.StubIDisposableObject.IsDisposedGet">
            <summary>Sets the stub of IDisposableObject.get_IsDisposed()</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.StubIDisposableObject.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Disposal.Fakes.StubINotifyWhenDisposed">
            <summary>Stub type of Ninject.Infrastructure.Disposal.INotifyWhenDisposed</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.StubINotifyWhenDisposed.#ctor">
            <summary>Initializes a new instance of type StubINotifyWhenDisposed</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Disposal.Fakes.StubINotifyWhenDisposed.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Disposal.Fakes.StubINotifyWhenDisposed.Ninject#Infrastructure#Disposal#IDisposableObject#IsDisposed">
            <summary>Sets the stub of IDisposableObject.get_IsDisposed()</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Disposal.Fakes.StubINotifyWhenDisposed.IsDisposedGet">
            <summary>Sets the stub of IDisposableObject.get_IsDisposed()</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Disposal.Fakes.StubINotifyWhenDisposed.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.ShimBaseWeakReference">
            <summary>Shim type of Ninject.Infrastructure.BaseWeakReference</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.#ctor(Ninject.Infrastructure.BaseWeakReference)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.AllInstances.IsAliveGet">
            <summary>Sets the shim of BaseWeakReference.get_IsAlive()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.AllInstances.TargetGet">
            <summary>Sets the shim of BaseWeakReference.get_Target()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.AllInstances.TargetSetObject">
            <summary>Sets the shim of BaseWeakReference.set_Target(Object value)</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.ConstructorObject">
            <summary>Sets the shim of BaseWeakReference.BaseWeakReference(Object target)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.ConstructorObjectBoolean">
            <summary>Sets the shim of BaseWeakReference.BaseWeakReference(Object target, Boolean trackResurrection)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.IsAliveGet">
            <summary>Sets the shim of BaseWeakReference.get_IsAlive()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.TargetGet">
            <summary>Sets the shim of BaseWeakReference.get_Target()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimBaseWeakReference.TargetSetObject">
            <summary>Sets the shim of BaseWeakReference.set_Target(Object value)</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.ShimFuture`1">
            <summary>Shim type of Ninject.Infrastructure.Future`1</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimFuture`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimFuture`1.#ctor(Ninject.Infrastructure.Future{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.ShimFuture`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimFuture`1.AllInstances.CallbackGet">
            <summary>Sets the shim of Future`1.get_Callback()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimFuture`1.AllInstances.CallbackSetFuncOfT0">
            <summary>Sets the shim of Future`1.set_Callback(Func`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimFuture`1.AllInstances.ValueGet">
            <summary>Sets the shim of Future`1.get_Value()</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimFuture`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimFuture`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimFuture`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimFuture`1.CallbackGet">
            <summary>Sets the shim of Future`1.get_Callback()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimFuture`1.CallbackSetFuncOfT0">
            <summary>Sets the shim of Future`1.set_Callback(Func`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimFuture`1.ConstructorFuncOfT0">
            <summary>Sets the shim of Future`1.Future`1(Func`1&lt;!0&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimFuture`1.ImplicitOpFutureOfT0T0">
            <summary>Sets the shim of Future`1.op_Implicit(Future`1&lt;!0&gt; future)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimFuture`1.ValueGet">
            <summary>Sets the shim of Future`1.get_Value()</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.ShimMultimap`2">
            <summary>Shim type of Ninject.Infrastructure.Multimap`2</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimMultimap`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimMultimap`2.#ctor(Ninject.Infrastructure.Multimap{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AddT0T1">
            <summary>Sets the shim of Multimap`2.Add(!0 key, !1 value)</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.AddT0T1">
            <summary>Sets the shim of Multimap`2.Add(!0 key, !1 value)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.Clear">
            <summary>Sets the shim of Multimap`2.Clear()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.ContainsKeyT0">
            <summary>Sets the shim of Multimap`2.ContainsKey(!0 key)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.ContainsValueT0T1">
            <summary>Sets the shim of Multimap`2.ContainsValue(!0 key, !1 value)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.GetEnumerator">
            <summary>Sets the shim of Multimap`2.GetEnumerator()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.ItemGetT0">
            <summary>Sets the shim of Multimap`2.get_Item(!0 key)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.KeysGet">
            <summary>Sets the shim of Multimap`2.get_Keys()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.RemoveAllT0">
            <summary>Sets the shim of Multimap`2.RemoveAll(!0 key)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.RemoveT0T1">
            <summary>Sets the shim of Multimap`2.Remove(!0 key, !1 value)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.SystemCollectionsGenericIEnumerableSystemCollectionsGenericKeyValuePairKSystemCollectionsGenericICollectionVGetEnumerator">
            <summary>Sets the shim of Multimap`2.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;K,System.Collections.Generic.ICollection&lt;V&gt;&gt;&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.AllInstances.ValuesGet">
            <summary>Sets the shim of Multimap`2.get_Values()</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimMultimap`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimMultimap`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimMultimap`2.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimMultimap`2.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}}})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.Clear">
            <summary>Sets the shim of Multimap`2.Clear()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.Constructor">
            <summary>Sets the shim of Multimap`2.Multimap`2()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.ContainsKeyT0">
            <summary>Sets the shim of Multimap`2.ContainsKey(!0 key)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.ContainsValueT0T1">
            <summary>Sets the shim of Multimap`2.ContainsValue(!0 key, !1 value)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.GetEnumerator">
            <summary>Sets the shim of Multimap`2.GetEnumerator()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.ItemGetT0">
            <summary>Sets the shim of Multimap`2.get_Item(!0 key)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.KeysGet">
            <summary>Sets the shim of Multimap`2.get_Keys()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.RemoveAllT0">
            <summary>Sets the shim of Multimap`2.RemoveAll(!0 key)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.RemoveT0T1">
            <summary>Sets the shim of Multimap`2.Remove(!0 key, !1 value)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.SystemCollectionsGenericIEnumerableSystemCollectionsGenericKeyValuePairKSystemCollectionsGenericICollectionVGetEnumerator">
            <summary>Sets the shim of Multimap`2.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;K,System.Collections.Generic.ICollection&lt;V&gt;&gt;&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimMultimap`2.ValuesGet">
            <summary>Sets the shim of Multimap`2.get_Values()</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference">
            <summary>Shim type of Ninject.Infrastructure.ReferenceEqualWeakReference</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.#ctor(Ninject.Infrastructure.ReferenceEqualWeakReference)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.AllInstances.EqualsObject">
            <summary>Sets the shim of ReferenceEqualWeakReference.Equals(Object obj)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.AllInstances.GetHashCode01">
            <summary>Sets the shim of ReferenceEqualWeakReference.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.ConstructorObject">
            <summary>Sets the shim of ReferenceEqualWeakReference.ReferenceEqualWeakReference(Object target)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.ConstructorObjectBoolean">
            <summary>Sets the shim of ReferenceEqualWeakReference.ReferenceEqualWeakReference(Object target, Boolean trackResurrection)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.EqualsObject">
            <summary>Sets the shim of ReferenceEqualWeakReference.Equals(Object obj)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimReferenceEqualWeakReference.GetHashCode">
            <summary>Sets the shim of ReferenceEqualWeakReference.GetHashCode()</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks">
            <summary>Shim type of Ninject.Infrastructure.StandardScopeCallbacks</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks.#ctor(Ninject.Infrastructure.StandardScopeCallbacks)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks.Constructor">
            <summary>Sets the shim of StandardScopeCallbacks.StandardScopeCallbacks()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks.StaticConstructor">
            <summary>Sets the shim of StandardScopeCallbacks.StandardScopeCallbacks()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks._cctorb__0IContext">
            <summary>Sets the shim of StandardScopeCallbacks.&lt;.cctor&gt;b__0(IContext ctx)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks._cctorb__1IContext">
            <summary>Sets the shim of StandardScopeCallbacks.&lt;.cctor&gt;b__1(IContext ctx)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.ShimStandardScopeCallbacks._cctorb__2IContext">
            <summary>Sets the shim of StandardScopeCallbacks.&lt;.cctor&gt;b__2(IContext ctx)</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.StubBaseWeakReference">
            <summary>Stub type of Ninject.Infrastructure.BaseWeakReference</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubBaseWeakReference.#ctor(System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubBaseWeakReference.#ctor(System.Object,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubBaseWeakReference.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubBaseWeakReference.InitializeStub">
            <summary>Initializes a new instance of type StubBaseWeakReference</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubBaseWeakReference.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubBaseWeakReference.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.StubFuture`1">
            <summary>Stub type of Ninject.Infrastructure.Future`1</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubFuture`1.#ctor(System.Func{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubFuture`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubFuture`1.InitializeStub">
            <summary>Initializes a new instance of type StubFuture</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubFuture`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubFuture`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.StubIHaveBindingConfiguration">
            <summary>Stub type of Ninject.Infrastructure.IHaveBindingConfiguration</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubIHaveBindingConfiguration.#ctor">
            <summary>Initializes a new instance of type StubIHaveBindingConfiguration</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubIHaveBindingConfiguration.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Fakes.StubIHaveBindingConfiguration.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.StubIHaveKernel">
            <summary>Stub type of Ninject.Infrastructure.IHaveKernel</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubIHaveKernel.#ctor">
            <summary>Initializes a new instance of type StubIHaveKernel</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubIHaveKernel.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Fakes.StubIHaveKernel.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.StubMultimap`2">
            <summary>Stub type of Ninject.Infrastructure.Multimap`2</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubMultimap`2.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubMultimap`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubMultimap`2.InitializeStub">
            <summary>Initializes a new instance of type StubMultimap</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubMultimap`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubMultimap`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference">
            <summary>Stub type of Ninject.Infrastructure.ReferenceEqualWeakReference</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.#ctor(System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.#ctor(System.Object,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.AttachBackingFieldToTarget">
            <summary>Attaches delegates to emulate StubReferenceEqualWeakReference.Target as a property with a backing field.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.Equals(System.Object)">
            <summary>Sets the stub of ReferenceEqualWeakReference.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.EqualsObject">
            <summary>Sets the stub of ReferenceEqualWeakReference.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.GetHashCode">
            <summary>Sets the stub of ReferenceEqualWeakReference.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.GetHashCode01">
            <summary>Sets the stub of ReferenceEqualWeakReference.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of WeakReference.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of WeakReference.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.InitializeStub">
            <summary>Initializes a new instance of type StubReferenceEqualWeakReference</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.IsAlive">
            <summary>Sets the stub of WeakReference.get_IsAlive()</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.IsAliveGet">
            <summary>Sets the stub of WeakReference.get_IsAlive()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.Target">
            <summary>Sets the stub of WeakReference.get_Target()</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.TargetGet">
            <summary>Sets the stub of WeakReference.get_Target()</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.TargetSetObject">
            <summary>Sets the stub of WeakReference.set_Target(Object value)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.TrackResurrection">
            <summary>Sets the stub of WeakReference.get_TrackResurrection()</summary>
        </member>
        <member name="F:Ninject.Infrastructure.Fakes.StubReferenceEqualWeakReference.TrackResurrectionGet">
            <summary>Sets the stub of WeakReference.get_TrackResurrection()</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Fakes.StubStandardScopeCallbacks">
            <summary>Stub type of Ninject.Infrastructure.StandardScopeCallbacks</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubStandardScopeCallbacks.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubStandardScopeCallbacks.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Fakes.StubStandardScopeCallbacks.InitializeStub">
            <summary>Initializes a new instance of type StubStandardScopeCallbacks</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubStandardScopeCallbacks.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Fakes.StubStandardScopeCallbacks.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter">
            <summary>Shim type of Ninject.Infrastructure.Introspection.ExceptionFormatter</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.ConstructorsAmbiguousIContextIGroupingOfInt32ConstructorInjectionDirective">
            <summary>Sets the shim of ExceptionFormatter.ConstructorsAmbiguous(IContext context, IGrouping`2&lt;Int32,ConstructorInjectionDirective&gt; bestDirectives)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.CouldNotResolveBindingIRequest">
            <summary>Sets the shim of ExceptionFormatter.CouldNotResolveBinding(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.CouldNotResolvePropertyForValueInjectionIRequestString">
            <summary>Sets the shim of ExceptionFormatter.CouldNotResolvePropertyForValueInjection(IRequest request, String propertyName)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.CouldNotUniquelyResolveBindingIRequestStringArray">
            <summary>Sets the shim of ExceptionFormatter.CouldNotUniquelyResolveBinding(IRequest request, String[] formattedMatchingBindings)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.CyclicalDependenciesDetectedIContext">
            <summary>Sets the shim of ExceptionFormatter.CyclicalDependenciesDetected(IContext context)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.FormatAttributeStringWriterAttribute">
            <summary>Sets the shim of ExceptionFormatter.FormatAttribute(StringWriter sw, Attribute attribute)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.FormatConstructorConstructorInfoStringWriter">
            <summary>Sets the shim of ExceptionFormatter.FormatConstructor(ConstructorInfo constructor, StringWriter sw)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.InvalidAttributeTypeUsedInBindingConditionStringStringType">
            <summary>Sets the shim of ExceptionFormatter.InvalidAttributeTypeUsedInBindingCondition(String serviceNames, String methodName, Type type)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.ModuleWithSameNameIsAlreadyLoadedINinjectModuleINinjectModule">
            <summary>Sets the shim of ExceptionFormatter.ModuleWithSameNameIsAlreadyLoaded(INinjectModule newModule, INinjectModule existingModule)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.ModulesWithNullOrEmptyNamesAreNotSupported">
            <summary>Sets the shim of ExceptionFormatter.ModulesWithNullOrEmptyNamesAreNotSupported()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.NoConstructorsAvailableForComponentTypeType">
            <summary>Sets the shim of ExceptionFormatter.NoConstructorsAvailableForComponent(Type component, Type implementation)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.NoConstructorsAvailableIContext">
            <summary>Sets the shim of ExceptionFormatter.NoConstructorsAvailable(IContext context)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.NoModuleLoadedWithTheSpecifiedNameString">
            <summary>Sets the shim of ExceptionFormatter.NoModuleLoadedWithTheSpecifiedName(String name)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.NoSuchComponentRegisteredType">
            <summary>Sets the shim of ExceptionFormatter.NoSuchComponentRegistered(Type component)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.ProviderReturnedNullIContext">
            <summary>Sets the shim of ExceptionFormatter.ProviderReturnedNull(IContext context)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimExceptionFormatter.TargetDoesNotHaveADefaultValueITarget">
            <summary>Sets the shim of ExceptionFormatter.TargetDoesNotHaveADefaultValue(ITarget target)</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions">
            <summary>Shim type of Ninject.Infrastructure.Introspection.FormatExtensions</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.AppendGenericArgumentsStringBuilderTypeArrayInt32Int32">
            <summary>Sets the shim of FormatExtensions.AppendGenericArguments(StringBuilder sb, Type[] genericArguments, Int32 start, Int32 count)</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.FormatActivationPathIRequest">
            <summary>Sets the shim of FormatExtensions.FormatActivationPath(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.FormatGenericTypeStringTypeArray">
            <summary>Sets the shim of FormatExtensions.FormatGenericType(String friendlyName, Type[] genericArguments)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.FormatIBindingIContext">
            <summary>Sets the shim of FormatExtensions.Format(IBinding binding, IContext context)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.FormatIRequest">
            <summary>Sets the shim of FormatExtensions.Format(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.FormatITarget">
            <summary>Sets the shim of FormatExtensions.Format(ITarget target)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.FormatType">
            <summary>Sets the shim of FormatExtensions.Format(Type type)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Introspection.Fakes.ShimFormatExtensions.GetFriendlyNameType">
            <summary>Sets the shim of FormatExtensions.GetFriendlyName(Type type)</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForIEnumerableOfT">
            <summary>Shim type of Ninject.Infrastructure.Language.ExtensionsForIEnumerableOfT</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForIEnumerableOfT.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForIEnumerableOfT.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForIEnumerableOfT.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForIEnumerableOfT.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForIEnumerableOfT.MapOf1IEnumerableOfM0ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.IEnumerable{``0},System.Action{``0}})">
            <summary>Sets the shim of ExtensionsForIEnumerableOfT.Map(IEnumerable`1&lt;!!0&gt; series, Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForIEnumerableOfT.ToEnumerableOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ExtensionsForIEnumerableOfT.ToEnumerable(IEnumerable`1&lt;!!0&gt; series)</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForIEnumerableOfT._ToEnumerableb__0Of1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``0})">
            <summary>Sets the shim of ExtensionsForIEnumerableOfT.&lt;ToEnumerable&gt;b__0(!!0 x)</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo">
            <summary>Shim type of Ninject.Infrastructure.Language.ExtensionsForMemberInfo</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.AddAttributesListOfObjectObjectArrayDictionaryOfTypeBoolean">
            <summary>Sets the shim of ExtensionsForMemberInfo.AddAttributes(List`1&lt;Object&gt; attributes, Object[] customAttributes, Dictionary`2&lt;Type,Boolean&gt; attributeUsages)</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.GetCustomAttributesExtendedMemberInfoTypeBoolean">
            <summary>Sets the shim of ExtensionsForMemberInfo.GetCustomAttributesExtended(MemberInfo member, Type attributeType, Boolean inherited)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.GetCustomAttributesPropertyInfoTypeBoolean">
            <summary>Sets the shim of ExtensionsForMemberInfo.GetCustomAttributes(PropertyInfo propertyInfo, Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.GetParentDefinitionMethodInfoBindingFlags">
            <summary>Sets the shim of ExtensionsForMemberInfo.GetParentDefinition(MethodInfo method, BindingFlags flags)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.GetParentDefinitionPropertyInfo">
            <summary>Sets the shim of ExtensionsForMemberInfo.GetParentDefinition(PropertyInfo property)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.GetPropertyFromDeclaredTypeMemberInfoPropertyInfoBindingFlags">
            <summary>Sets the shim of ExtensionsForMemberInfo.GetPropertyFromDeclaredType(MemberInfo memberInfo, PropertyInfo propertyDefinition, BindingFlags flags)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.HasAttributeMemberInfoType">
            <summary>Sets the shim of ExtensionsForMemberInfo.HasAttribute(MemberInfo member, Type type)</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.HasAttributeOf1MemberInfo``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>Sets the shim of ExtensionsForMemberInfo.HasAttribute(MemberInfo member)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.InternalGetAttributeUsageType">
            <summary>Sets the shim of ExtensionsForMemberInfo.InternalGetAttributeUsage(Type type)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.IsDefinedPropertyInfoTypeBoolean">
            <summary>Sets the shim of ExtensionsForMemberInfo.IsDefined(PropertyInfo element, Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.IsPrivatePropertyInfo">
            <summary>Sets the shim of ExtensionsForMemberInfo.IsPrivate(PropertyInfo propertyInfo)</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo.ParentDefinitionMethodInfoGet">
            <summary>Sets the shim of ExtensionsForMemberInfo.get_ParentDefinitionMethodInfo()</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForMemberInfo._GetPropertyFromDeclaredTypeb__0ParameterInfo">
            <summary>Sets the shim of ExtensionsForMemberInfo.&lt;GetPropertyFromDeclaredType&gt;b__0(ParameterInfo parameter)</summary>
        </member>
        <member name="T:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForType">
            <summary>Shim type of Ninject.Infrastructure.Language.ExtensionsForType</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForType.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForType.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForType.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForType.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Infrastructure.Language.Fakes.ShimExtensionsForType.GetAllBaseTypesType">
            <summary>Sets the shim of ExtensionsForType.GetAllBaseTypes(Type type)</summary>
        </member>
        <member name="T:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory">
            <summary>Shim type of Ninject.Injection.DynamicMethodInjectorFactory</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.#ctor(Ninject.Injection.DynamicMethodInjectorFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.AllInstances.CreateConstructorInfo">
            <summary>Sets the shim of DynamicMethodInjectorFactory.Create(ConstructorInfo constructor)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.AllInstances.CreateMethodInfo">
            <summary>Sets the shim of DynamicMethodInjectorFactory.Create(MethodInfo method)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.AllInstances.CreatePropertyInfo">
            <summary>Sets the shim of DynamicMethodInjectorFactory.Create(PropertyInfo property)</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.Bind(Ninject.Injection.IInjectorFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.Constructor">
            <summary>Sets the shim of DynamicMethodInjectorFactory.DynamicMethodInjectorFactory()</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.CreateConstructorInfo">
            <summary>Sets the shim of DynamicMethodInjectorFactory.Create(ConstructorInfo constructor)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.CreateMethodInfo">
            <summary>Sets the shim of DynamicMethodInjectorFactory.Create(MethodInfo method)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.CreatePropertyInfo">
            <summary>Sets the shim of DynamicMethodInjectorFactory.Create(PropertyInfo property)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.EmitLoadMethodArgumentsILGeneratorMethodBase">
            <summary>Sets the shim of DynamicMethodInjectorFactory.EmitLoadMethodArguments(ILGenerator il, MethodBase targetMethod)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.EmitMethodCallILGeneratorMethodInfo">
            <summary>Sets the shim of DynamicMethodInjectorFactory.EmitMethodCall(ILGenerator il, MethodInfo method)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.EmitUnboxOrCastILGeneratorType">
            <summary>Sets the shim of DynamicMethodInjectorFactory.EmitUnboxOrCast(ILGenerator il, Type type)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimDynamicMethodInjectorFactory.GetAnonymousMethodName">
            <summary>Sets the shim of DynamicMethodInjectorFactory.GetAnonymousMethodName()</summary>
        </member>
        <member name="T:Ninject.Injection.Fakes.ShimReflectionInjectorFactory">
            <summary>Shim type of Ninject.Injection.ReflectionInjectorFactory</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.#ctor(Ninject.Injection.ReflectionInjectorFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.AllInstances.CreateConstructorInfo">
            <summary>Sets the shim of ReflectionInjectorFactory.Create(ConstructorInfo constructor)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.AllInstances.CreateMethodInfo">
            <summary>Sets the shim of ReflectionInjectorFactory.Create(MethodInfo method)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.AllInstances.CreatePropertyInfo">
            <summary>Sets the shim of ReflectionInjectorFactory.Create(PropertyInfo property)</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.Bind(Ninject.Injection.IInjectorFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.Constructor">
            <summary>Sets the shim of ReflectionInjectorFactory.ReflectionInjectorFactory()</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.CreateConstructorInfo">
            <summary>Sets the shim of ReflectionInjectorFactory.Create(ConstructorInfo constructor)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.CreateMethodInfo">
            <summary>Sets the shim of ReflectionInjectorFactory.Create(MethodInfo method)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.ShimReflectionInjectorFactory.CreatePropertyInfo">
            <summary>Sets the shim of ReflectionInjectorFactory.Create(PropertyInfo property)</summary>
        </member>
        <member name="T:Ninject.Injection.Fakes.StubDynamicMethodInjectorFactory">
            <summary>Stub type of Ninject.Injection.DynamicMethodInjectorFactory</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubDynamicMethodInjectorFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.StubDynamicMethodInjectorFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubDynamicMethodInjectorFactory.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Injection.Fakes.StubDynamicMethodInjectorFactory.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubDynamicMethodInjectorFactory.InitializeStub">
            <summary>Initializes a new instance of type StubDynamicMethodInjectorFactory</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.StubDynamicMethodInjectorFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.StubDynamicMethodInjectorFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Injection.Fakes.StubIInjectorFactory">
            <summary>Stub type of Ninject.Injection.IInjectorFactory</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubIInjectorFactory.#ctor">
            <summary>Initializes a new instance of type StubIInjectorFactory</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubIInjectorFactory.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIInjectorFactory.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Injection.Fakes.StubIInjectorFactory.CreateConstructorInfo">
            <summary>Sets the stub of IInjectorFactory.Create(ConstructorInfo constructor)</summary>
        </member>
        <member name="F:Ninject.Injection.Fakes.StubIInjectorFactory.CreateMethodInfo">
            <summary>Sets the stub of IInjectorFactory.Create(MethodInfo method)</summary>
        </member>
        <member name="F:Ninject.Injection.Fakes.StubIInjectorFactory.CreatePropertyInfo">
            <summary>Sets the stub of IInjectorFactory.Create(PropertyInfo property)</summary>
        </member>
        <member name="F:Ninject.Injection.Fakes.StubIInjectorFactory.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubIInjectorFactory.Ninject#Injection#IInjectorFactory#Create(System.Reflection.ConstructorInfo)">
            <summary>Sets the stub of IInjectorFactory.Create(ConstructorInfo constructor)</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubIInjectorFactory.Ninject#Injection#IInjectorFactory#Create(System.Reflection.MethodInfo)">
            <summary>Sets the stub of IInjectorFactory.Create(MethodInfo method)</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubIInjectorFactory.Ninject#Injection#IInjectorFactory#Create(System.Reflection.PropertyInfo)">
            <summary>Sets the stub of IInjectorFactory.Create(PropertyInfo property)</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.StubIInjectorFactory.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Injection.Fakes.StubIInjectorFactory.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Injection.Fakes.StubIInjectorFactory.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubIInjectorFactory.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Injection.Fakes.StubReflectionInjectorFactory">
            <summary>Stub type of Ninject.Injection.ReflectionInjectorFactory</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubReflectionInjectorFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.StubReflectionInjectorFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubReflectionInjectorFactory.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Injection.Fakes.StubReflectionInjectorFactory.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Injection.Fakes.StubReflectionInjectorFactory.InitializeStub">
            <summary>Initializes a new instance of type StubReflectionInjectorFactory</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.StubReflectionInjectorFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Injection.Fakes.StubReflectionInjectorFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.ShimAssemblyNameRetriever">
            <summary>Shim type of Ninject.Modules.AssemblyNameRetriever</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.#ctor(Ninject.Modules.AssemblyNameRetriever)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.AllInstances.GetAssemblyNamesIEnumerableOfStringPredicateOfAssembly">
            <summary>Sets the shim of AssemblyNameRetriever.GetAssemblyNames(IEnumerable`1&lt;String&gt; filenames, Predicate`1&lt;Assembly&gt; filter)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.Bind(Ninject.Modules.IAssemblyNameRetriever)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.Constructor">
            <summary>Sets the shim of AssemblyNameRetriever.AssemblyNameRetriever()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.CreateTemporaryAppDomain">
            <summary>Sets the shim of AssemblyNameRetriever.CreateTemporaryAppDomain()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimAssemblyNameRetriever.GetAssemblyNamesIEnumerableOfStringPredicateOfAssembly">
            <summary>Sets the shim of AssemblyNameRetriever.GetAssemblyNames(IEnumerable`1&lt;String&gt; filenames, Predicate`1&lt;Assembly&gt; filter)</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin">
            <summary>Shim type of Ninject.Modules.CompiledModuleLoaderPlugin</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.#ctor(Ninject.Modules.CompiledModuleLoaderPlugin)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.AllInstances.KernelGet">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.AllInstances.KernelSetIKernel">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.AllInstances.LoadModulesIEnumerableOfString">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.LoadModules(IEnumerable`1&lt;String&gt; filenames)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.AllInstances.SupportedExtensionsGet">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.get_SupportedExtensions()</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.Bind(Ninject.Modules.IModuleLoaderPlugin)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.ConstructorIKernelIAssemblyNameRetriever">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.CompiledModuleLoaderPlugin(IKernel kernel, IAssemblyNameRetriever assemblyNameRetriever)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.KernelGet">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.KernelSetIKernel">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.LoadModulesIEnumerableOfString">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.LoadModules(IEnumerable`1&lt;String&gt; filenames)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.StaticConstructor">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.CompiledModuleLoaderPlugin()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin.SupportedExtensionsGet">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.get_SupportedExtensions()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin._LoadModulesb__0Assembly">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.&lt;LoadModules&gt;b__0(Assembly asm)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimCompiledModuleLoaderPlugin._LoadModulesb__1AssemblyName">
            <summary>Sets the shim of CompiledModuleLoaderPlugin.&lt;LoadModules&gt;b__1(AssemblyName asm)</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.ShimModuleLoader">
            <summary>Shim type of Ninject.Modules.ModuleLoader</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimModuleLoader.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimModuleLoader.#ctor(Ninject.Modules.ModuleLoader)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.ShimModuleLoader.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.AllInstances.KernelGet">
            <summary>Sets the shim of ModuleLoader.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.AllInstances.KernelSetIKernel">
            <summary>Sets the shim of ModuleLoader.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.AllInstances.LoadModulesIEnumerableOfString">
            <summary>Sets the shim of ModuleLoader.LoadModules(IEnumerable`1&lt;String&gt; patterns)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimModuleLoader.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimModuleLoader.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimModuleLoader.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimModuleLoader.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimModuleLoader.Bind(Ninject.Modules.IModuleLoader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimModuleLoader.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.ConstructorIKernel">
            <summary>Sets the shim of ModuleLoader.ModuleLoader(IKernel kernel)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.GetBaseDirectories">
            <summary>Sets the shim of ModuleLoader.GetBaseDirectories()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.GetFilesMatchingPatternString">
            <summary>Sets the shim of ModuleLoader.GetFilesMatchingPattern(String pattern)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.KernelGet">
            <summary>Sets the shim of ModuleLoader.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.KernelSetIKernel">
            <summary>Sets the shim of ModuleLoader.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.LoadModulesIEnumerableOfString">
            <summary>Sets the shim of ModuleLoader.LoadModules(IEnumerable`1&lt;String&gt; patterns)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader.NormalizePathsString">
            <summary>Sets the shim of ModuleLoader.NormalizePaths(String path)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader._LoadModulesb__0String">
            <summary>Sets the shim of ModuleLoader.&lt;LoadModules&gt;b__0(String pattern)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimModuleLoader._LoadModulesb__1String">
            <summary>Sets the shim of ModuleLoader.&lt;LoadModules&gt;b__1(String filename)</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.ShimNinjectModule">
            <summary>Shim type of Ninject.Modules.NinjectModule</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimNinjectModule.#ctor(Ninject.Modules.NinjectModule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AddBindingIBinding">
            <summary>Sets the shim of NinjectModule.AddBinding(IBinding binding)</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.AddBindingIBinding">
            <summary>Sets the shim of NinjectModule.AddBinding(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.BindingsGet">
            <summary>Sets the shim of NinjectModule.get_Bindings()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.BindingsSetICollectionOfIBinding">
            <summary>Sets the shim of NinjectModule.set_Bindings(ICollection`1&lt;IBinding&gt; value)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.KernelGet">
            <summary>Sets the shim of NinjectModule.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.KernelInstanceGet">
            <summary>Sets the shim of NinjectModule.get_KernelInstance()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.KernelSetIKernel">
            <summary>Sets the shim of NinjectModule.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.NameGet">
            <summary>Sets the shim of NinjectModule.get_Name()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.OnLoadIKernel">
            <summary>Sets the shim of NinjectModule.OnLoad(IKernel kernel)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.OnUnloadIKernel">
            <summary>Sets the shim of NinjectModule.OnUnload(IKernel kernel)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.OnVerifyRequiredModules">
            <summary>Sets the shim of NinjectModule.OnVerifyRequiredModules()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.RemoveBindingIBinding">
            <summary>Sets the shim of NinjectModule.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.UnbindType">
            <summary>Sets the shim of NinjectModule.Unbind(Type service)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.Unload">
            <summary>Sets the shim of NinjectModule.Unload()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.AllInstances.VerifyRequiredModulesAreLoaded">
            <summary>Sets the shim of NinjectModule.VerifyRequiredModulesAreLoaded()</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimNinjectModule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimNinjectModule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimNinjectModule.Bind(Ninject.Infrastructure.IHaveKernel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimNinjectModule.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimNinjectModule.Bind(Ninject.Modules.INinjectModule)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimNinjectModule.Bind(Ninject.Syntax.IBindingRoot)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimNinjectModule.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.ShimNinjectModule.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.BindingsGet">
            <summary>Sets the shim of NinjectModule.get_Bindings()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.BindingsSetICollectionOfIBinding">
            <summary>Sets the shim of NinjectModule.set_Bindings(ICollection`1&lt;IBinding&gt; value)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.Constructor">
            <summary>Sets the shim of NinjectModule.NinjectModule()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.KernelGet">
            <summary>Sets the shim of NinjectModule.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.KernelInstanceGet">
            <summary>Sets the shim of NinjectModule.get_KernelInstance()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.KernelSetIKernel">
            <summary>Sets the shim of NinjectModule.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.NameGet">
            <summary>Sets the shim of NinjectModule.get_Name()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.OnLoadIKernel">
            <summary>Sets the shim of NinjectModule.OnLoad(IKernel kernel)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.OnUnloadIKernel">
            <summary>Sets the shim of NinjectModule.OnUnload(IKernel kernel)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.OnVerifyRequiredModules">
            <summary>Sets the shim of NinjectModule.OnVerifyRequiredModules()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.RemoveBindingIBinding">
            <summary>Sets the shim of NinjectModule.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.UnbindType">
            <summary>Sets the shim of NinjectModule.Unbind(Type service)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.Unload">
            <summary>Sets the shim of NinjectModule.Unload()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.ShimNinjectModule.VerifyRequiredModulesAreLoaded">
            <summary>Sets the shim of NinjectModule.VerifyRequiredModulesAreLoaded()</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.StubAssemblyNameRetriever">
            <summary>Stub type of Ninject.Modules.AssemblyNameRetriever</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubAssemblyNameRetriever.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubAssemblyNameRetriever.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubAssemblyNameRetriever.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubAssemblyNameRetriever.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubAssemblyNameRetriever.InitializeStub">
            <summary>Initializes a new instance of type StubAssemblyNameRetriever</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubAssemblyNameRetriever.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubAssemblyNameRetriever.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.StubCompiledModuleLoaderPlugin">
            <summary>Stub type of Ninject.Modules.CompiledModuleLoaderPlugin</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubCompiledModuleLoaderPlugin.#ctor(Ninject.IKernel,Ninject.Modules.IAssemblyNameRetriever)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubCompiledModuleLoaderPlugin.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubCompiledModuleLoaderPlugin.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubCompiledModuleLoaderPlugin.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubCompiledModuleLoaderPlugin.InitializeStub">
            <summary>Initializes a new instance of type StubCompiledModuleLoaderPlugin</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubCompiledModuleLoaderPlugin.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubCompiledModuleLoaderPlugin.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.StubIAssemblyNameRetriever">
            <summary>Stub type of Ninject.Modules.IAssemblyNameRetriever</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIAssemblyNameRetriever.#ctor">
            <summary>Initializes a new instance of type StubIAssemblyNameRetriever</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIAssemblyNameRetriever.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIAssemblyNameRetriever.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIAssemblyNameRetriever.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIAssemblyNameRetriever.GetAssemblyNamesIEnumerableOfStringPredicateOfAssembly">
            <summary>Sets the stub of IAssemblyNameRetriever.GetAssemblyNames(IEnumerable`1&lt;String&gt; filenames, Predicate`1&lt;Assembly&gt; filter)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIAssemblyNameRetriever.Ninject#Modules#IAssemblyNameRetriever#GetAssemblyNames(System.Collections.Generic.IEnumerable{System.String},System.Predicate{System.Reflection.Assembly})">
            <summary>Sets the stub of IAssemblyNameRetriever.GetAssemblyNames(IEnumerable`1&lt;String&gt; filenames, Predicate`1&lt;Assembly&gt; filter)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubIAssemblyNameRetriever.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIAssemblyNameRetriever.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIAssemblyNameRetriever.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIAssemblyNameRetriever.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.StubIModuleLoader">
            <summary>Stub type of Ninject.Modules.IModuleLoader</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIModuleLoader.#ctor">
            <summary>Initializes a new instance of type StubIModuleLoader</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIModuleLoader.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIModuleLoader.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIModuleLoader.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIModuleLoader.LoadModulesIEnumerableOfString">
            <summary>Sets the stub of IModuleLoader.LoadModules(IEnumerable`1&lt;String&gt; patterns)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIModuleLoader.Ninject#Modules#IModuleLoader#LoadModules(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sets the stub of IModuleLoader.LoadModules(IEnumerable`1&lt;String&gt; patterns)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubIModuleLoader.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIModuleLoader.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIModuleLoader.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIModuleLoader.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.StubIModuleLoaderPlugin">
            <summary>Stub type of Ninject.Modules.IModuleLoaderPlugin</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.#ctor">
            <summary>Initializes a new instance of type StubIModuleLoaderPlugin</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIModuleLoaderPlugin.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.LoadModulesIEnumerableOfString">
            <summary>Sets the stub of IModuleLoaderPlugin.LoadModules(IEnumerable`1&lt;String&gt; filenames)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.Ninject#Modules#IModuleLoaderPlugin#LoadModules(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sets the stub of IModuleLoaderPlugin.LoadModules(IEnumerable`1&lt;String&gt; filenames)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.Ninject#Modules#IModuleLoaderPlugin#SupportedExtensions">
            <summary>Sets the stub of IModuleLoaderPlugin.get_SupportedExtensions()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.SupportedExtensionsGet">
            <summary>Sets the stub of IModuleLoaderPlugin.get_SupportedExtensions()</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubIModuleLoaderPlugin.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.StubINinjectModule">
            <summary>Stub type of Ninject.Modules.INinjectModule</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubINinjectModule.#ctor">
            <summary>Initializes a new instance of type StubINinjectModule</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubINinjectModule.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubINinjectModule.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubINinjectModule.Ninject#Modules#INinjectModule#Name">
            <summary>Sets the stub of INinjectModule.get_Name()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubINinjectModule.NameGet">
            <summary>Sets the stub of INinjectModule.get_Name()</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubINinjectModule.Ninject#Modules#INinjectModule#OnLoad(Ninject.IKernel)">
            <summary>Sets the stub of INinjectModule.OnLoad(IKernel kernel)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubINinjectModule.Ninject#Modules#INinjectModule#OnUnload(Ninject.IKernel)">
            <summary>Sets the stub of INinjectModule.OnUnload(IKernel kernel)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubINinjectModule.Ninject#Modules#INinjectModule#OnVerifyRequiredModules">
            <summary>Sets the stub of INinjectModule.OnVerifyRequiredModules()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubINinjectModule.OnLoadIKernel">
            <summary>Sets the stub of INinjectModule.OnLoad(IKernel kernel)</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubINinjectModule.OnUnloadIKernel">
            <summary>Sets the stub of INinjectModule.OnUnload(IKernel kernel)</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubINinjectModule.OnVerifyRequiredModules">
            <summary>Sets the stub of INinjectModule.OnVerifyRequiredModules()</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.StubModuleLoader">
            <summary>Stub type of Ninject.Modules.ModuleLoader</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubModuleLoader.#ctor(Ninject.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubModuleLoader.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubModuleLoader.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubModuleLoader.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubModuleLoader.InitializeStub">
            <summary>Initializes a new instance of type StubModuleLoader</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubModuleLoader.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubModuleLoader.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Modules.Fakes.StubNinjectModule">
            <summary>Stub type of Ninject.Modules.NinjectModule</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubNinjectModule.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubNinjectModule.AddBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of NinjectModule.AddBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubNinjectModule.AddBindingIBinding">
            <summary>Sets the stub of NinjectModule.AddBinding(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubNinjectModule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubNinjectModule.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubNinjectModule.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubNinjectModule.InitializeStub">
            <summary>Initializes a new instance of type StubNinjectModule</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubNinjectModule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubNinjectModule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubNinjectModule.KernelInstance">
            <summary>Sets the stub of NinjectModule.get_KernelInstance()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubNinjectModule.KernelInstanceGet">
            <summary>Sets the stub of NinjectModule.get_KernelInstance()</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubNinjectModule.Load">
            <summary>Sets the stub of NinjectModule.Load()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubNinjectModule.Load01">
            <summary>Sets the stub of NinjectModule.Load()</summary>
        </member>
        <member name="P:Ninject.Modules.Fakes.StubNinjectModule.Name">
            <summary>Sets the stub of NinjectModule.get_Name()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubNinjectModule.NameGet">
            <summary>Sets the stub of NinjectModule.get_Name()</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubNinjectModule.RemoveBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of NinjectModule.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubNinjectModule.RemoveBindingIBinding">
            <summary>Sets the stub of NinjectModule.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubNinjectModule.Unbind(System.Type)">
            <summary>Sets the stub of NinjectModule.Unbind(Type service)</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubNinjectModule.UnbindType">
            <summary>Sets the stub of NinjectModule.Unbind(Type service)</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubNinjectModule.Unload">
            <summary>Sets the stub of NinjectModule.Unload()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubNinjectModule.Unload01">
            <summary>Sets the stub of NinjectModule.Unload()</summary>
        </member>
        <member name="M:Ninject.Modules.Fakes.StubNinjectModule.VerifyRequiredModulesAreLoaded">
            <summary>Sets the stub of NinjectModule.VerifyRequiredModulesAreLoaded()</summary>
        </member>
        <member name="F:Ninject.Modules.Fakes.StubNinjectModule.VerifyRequiredModulesAreLoaded01">
            <summary>Sets the stub of NinjectModule.VerifyRequiredModulesAreLoaded()</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimConstructorArgument">
            <summary>Shim type of Ninject.Parameters.ConstructorArgument</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimConstructorArgument.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimConstructorArgument.#ctor(Ninject.Parameters.ConstructorArgument)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimConstructorArgument.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimConstructorArgument.AllInstances.AppliesToTargetIContextITarget">
            <summary>Sets the shim of ConstructorArgument.AppliesToTarget(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimConstructorArgument.AppliesToTargetIContextITarget">
            <summary>Sets the shim of ConstructorArgument.AppliesToTarget(IContext context, ITarget target)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimConstructorArgument.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimConstructorArgument.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimConstructorArgument.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimConstructorArgument.Bind(Ninject.Parameters.IConstructorArgument)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimConstructorArgument.Bind(Ninject.Parameters.IParameter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimConstructorArgument.Bind(System.IEquatable{Ninject.Parameters.IParameter})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimConstructorArgument.ConstructorStringFuncOfIContextITargetObject">
            <summary>Sets the shim of ConstructorArgument.ConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; valueCallback)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimConstructorArgument.ConstructorStringFuncOfIContextITargetObjectBoolean">
            <summary>Sets the shim of ConstructorArgument.ConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; valueCallback, Boolean shouldInherit)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimConstructorArgument.ConstructorStringFuncOfIContextObject">
            <summary>Sets the shim of ConstructorArgument.ConstructorArgument(String name, Func`2&lt;IContext,Object&gt; valueCallback)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimConstructorArgument.ConstructorStringFuncOfIContextObjectBoolean">
            <summary>Sets the shim of ConstructorArgument.ConstructorArgument(String name, Func`2&lt;IContext,Object&gt; valueCallback, Boolean shouldInherit)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimConstructorArgument.ConstructorStringObject">
            <summary>Sets the shim of ConstructorArgument.ConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimConstructorArgument.ConstructorStringObjectBoolean">
            <summary>Sets the shim of ConstructorArgument.ConstructorArgument(String name, Object value, Boolean shouldInherit)</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimParameter">
            <summary>Shim type of Ninject.Parameters.Parameter</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimParameter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimParameter.#ctor(Ninject.Parameters.Parameter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimParameter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.AllInstances.EqualsIParameter">
            <summary>Sets the shim of Parameter.Equals(IParameter other)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.AllInstances.EqualsObject">
            <summary>Sets the shim of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.AllInstances.GetHashCode01">
            <summary>Sets the shim of Parameter.GetHashCode()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.AllInstances.GetValueIContextITarget">
            <summary>Sets the shim of Parameter.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.AllInstances.NameGet">
            <summary>Sets the shim of Parameter.get_Name()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.AllInstances.NameSetString">
            <summary>Sets the shim of Parameter.set_Name(String value)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.AllInstances.ShouldInheritGet">
            <summary>Sets the shim of Parameter.get_ShouldInherit()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.AllInstances.ShouldInheritSetBoolean">
            <summary>Sets the shim of Parameter.set_ShouldInherit(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.AllInstances.ValueCallbackGet">
            <summary>Sets the shim of Parameter.get_ValueCallback()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.AllInstances.ValueCallbackSetFuncOfIContextITargetObject">
            <summary>Sets the shim of Parameter.set_ValueCallback(Func`3&lt;IContext,ITarget,Object&gt; value)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimParameter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimParameter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimParameter.Bind(Ninject.Parameters.IParameter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimParameter.Bind(System.IEquatable{Ninject.Parameters.IParameter})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.ConstructorStringFuncOfIContextITargetObjectBoolean">
            <summary>Sets the shim of Parameter.Parameter(String name, Func`3&lt;IContext,ITarget,Object&gt; valueCallback, Boolean shouldInherit)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.ConstructorStringFuncOfIContextObjectBoolean">
            <summary>Sets the shim of Parameter.Parameter(String name, Func`2&lt;IContext,Object&gt; valueCallback, Boolean shouldInherit)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.ConstructorStringObjectBoolean">
            <summary>Sets the shim of Parameter.Parameter(String name, Object value, Boolean shouldInherit)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.EqualsIParameter">
            <summary>Sets the shim of Parameter.Equals(IParameter other)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.EqualsObject">
            <summary>Sets the shim of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.GetHashCode">
            <summary>Sets the shim of Parameter.GetHashCode()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.GetValueIContextITarget">
            <summary>Sets the shim of Parameter.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.NameGet">
            <summary>Sets the shim of Parameter.get_Name()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.NameSetString">
            <summary>Sets the shim of Parameter.set_Name(String value)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.ShouldInheritGet">
            <summary>Sets the shim of Parameter.get_ShouldInherit()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.ShouldInheritSetBoolean">
            <summary>Sets the shim of Parameter.set_ShouldInherit(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.ValueCallbackGet">
            <summary>Sets the shim of Parameter.get_ValueCallback()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimParameter.ValueCallbackSetFuncOfIContextITargetObject">
            <summary>Sets the shim of Parameter.set_ValueCallback(Func`3&lt;IContext,ITarget,Object&gt; value)</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimPropertyValue">
            <summary>Shim type of Ninject.Parameters.PropertyValue</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimPropertyValue.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimPropertyValue.#ctor(Ninject.Parameters.PropertyValue)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimPropertyValue.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimPropertyValue.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimPropertyValue.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimPropertyValue.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimPropertyValue.Bind(Ninject.Parameters.IParameter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimPropertyValue.Bind(Ninject.Parameters.IPropertyValue)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimPropertyValue.Bind(System.IEquatable{Ninject.Parameters.IParameter})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimPropertyValue.ConstructorStringFuncOfIContextITargetObject">
            <summary>Sets the shim of PropertyValue.PropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; valueCallback)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimPropertyValue.ConstructorStringFuncOfIContextObject">
            <summary>Sets the shim of PropertyValue.PropertyValue(String name, Func`2&lt;IContext,Object&gt; valueCallback)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimPropertyValue.ConstructorStringObject">
            <summary>Sets the shim of PropertyValue.PropertyValue(String name, Object value)</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument">
            <summary>Shim type of Ninject.Parameters.TypeMatchingConstructorArgument</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.#ctor(Ninject.Parameters.TypeMatchingConstructorArgument)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances.AppliesToTargetIContextITarget">
            <summary>Sets the shim of TypeMatchingConstructorArgument.AppliesToTarget(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances.EqualsIParameter">
            <summary>Sets the shim of TypeMatchingConstructorArgument.Equals(IParameter other)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances.EqualsObject">
            <summary>Sets the shim of TypeMatchingConstructorArgument.Equals(Object obj)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances.GetHashCode01">
            <summary>Sets the shim of TypeMatchingConstructorArgument.GetHashCode()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances.GetValueIContextITarget">
            <summary>Sets the shim of TypeMatchingConstructorArgument.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances.NameGet">
            <summary>Sets the shim of TypeMatchingConstructorArgument.get_Name()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances.ShouldInheritGet">
            <summary>Sets the shim of TypeMatchingConstructorArgument.get_ShouldInherit()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances.ShouldInheritSetBoolean">
            <summary>Sets the shim of TypeMatchingConstructorArgument.set_ShouldInherit(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances.ValueCallbackGet">
            <summary>Sets the shim of TypeMatchingConstructorArgument.get_ValueCallback()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AllInstances.ValueCallbackSetFuncOfIContextITargetObject">
            <summary>Sets the shim of TypeMatchingConstructorArgument.set_ValueCallback(Func`3&lt;IContext,ITarget,Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.AppliesToTargetIContextITarget">
            <summary>Sets the shim of TypeMatchingConstructorArgument.AppliesToTarget(IContext context, ITarget target)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.Bind(Ninject.Parameters.IConstructorArgument)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.Bind(Ninject.Parameters.IParameter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.Bind(System.IEquatable{Ninject.Parameters.IParameter})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.ConstructorTypeFuncOfIContextITargetObject">
            <summary>Sets the shim of TypeMatchingConstructorArgument.TypeMatchingConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; valueCallback)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.ConstructorTypeFuncOfIContextITargetObjectBoolean">
            <summary>Sets the shim of TypeMatchingConstructorArgument.TypeMatchingConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; valueCallback, Boolean shouldInherit)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.EqualsIParameter">
            <summary>Sets the shim of TypeMatchingConstructorArgument.Equals(IParameter other)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.EqualsObject">
            <summary>Sets the shim of TypeMatchingConstructorArgument.Equals(Object obj)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.GetHashCode">
            <summary>Sets the shim of TypeMatchingConstructorArgument.GetHashCode()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.GetValueIContextITarget">
            <summary>Sets the shim of TypeMatchingConstructorArgument.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.NameGet">
            <summary>Sets the shim of TypeMatchingConstructorArgument.get_Name()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.ShouldInheritGet">
            <summary>Sets the shim of TypeMatchingConstructorArgument.get_ShouldInherit()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.ShouldInheritSetBoolean">
            <summary>Sets the shim of TypeMatchingConstructorArgument.set_ShouldInherit(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.ValueCallbackGet">
            <summary>Sets the shim of TypeMatchingConstructorArgument.get_ValueCallback()</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimTypeMatchingConstructorArgument.ValueCallbackSetFuncOfIContextITargetObject">
            <summary>Sets the shim of TypeMatchingConstructorArgument.set_ValueCallback(Func`3&lt;IContext,ITarget,Object&gt; value)</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimWeakConstructorArgument">
            <summary>Shim type of Ninject.Parameters.WeakConstructorArgument</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.#ctor(Ninject.Parameters.WeakConstructorArgument)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.AllInstances.AppliesToTargetIContextITarget">
            <summary>Sets the shim of WeakConstructorArgument.AppliesToTarget(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.AllInstances._ctorb__0IContextITarget">
            <summary>Sets the shim of WeakConstructorArgument.&lt;.ctor&gt;b__0(IContext ctx, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.AppliesToTargetIContextITarget">
            <summary>Sets the shim of WeakConstructorArgument.AppliesToTarget(IContext context, ITarget target)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.Bind(Ninject.Parameters.IConstructorArgument)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.Bind(Ninject.Parameters.IParameter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.Bind(System.IEquatable{Ninject.Parameters.IParameter})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.ConstructorStringObject">
            <summary>Sets the shim of WeakConstructorArgument.WeakConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakConstructorArgument.ConstructorStringObjectBoolean">
            <summary>Sets the shim of WeakConstructorArgument.WeakConstructorArgument(String name, Object value, Boolean shouldInherit)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakConstructorArgument._ctorb__0IContextITarget">
            <summary>Sets the shim of WeakConstructorArgument.&lt;.ctor&gt;b__0(IContext ctx, ITarget target)</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimWeakPropertyValue">
            <summary>Shim type of Ninject.Parameters.WeakPropertyValue</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakPropertyValue.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakPropertyValue.#ctor(Ninject.Parameters.WeakPropertyValue)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.ShimWeakPropertyValue.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakPropertyValue.AllInstances._ctorb__0IContextITarget">
            <summary>Sets the shim of WeakPropertyValue.&lt;.ctor&gt;b__0(IContext ctx, ITarget target)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakPropertyValue.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakPropertyValue.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakPropertyValue.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakPropertyValue.Bind(Ninject.Parameters.IParameter)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakPropertyValue.Bind(Ninject.Parameters.IPropertyValue)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.ShimWeakPropertyValue.Bind(System.IEquatable{Ninject.Parameters.IParameter})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakPropertyValue.ConstructorStringObject">
            <summary>Sets the shim of WeakPropertyValue.WeakPropertyValue(String name, Object value)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.ShimWeakPropertyValue._ctorb__0IContextITarget">
            <summary>Sets the shim of WeakPropertyValue.&lt;.ctor&gt;b__0(IContext ctx, ITarget target)</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.StubConstructorArgument">
            <summary>Stub type of Ninject.Parameters.ConstructorArgument</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubConstructorArgument.#ctor(System.String,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubConstructorArgument.#ctor(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubConstructorArgument.#ctor(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubConstructorArgument.#ctor(System.String,System.Object,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubConstructorArgument.#ctor(System.String,System.Func{Ninject.Activation.IContext,System.Object},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubConstructorArgument.#ctor(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubConstructorArgument.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubConstructorArgument.Equals(System.Object)">
            <summary>Sets the stub of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubConstructorArgument.EqualsObject">
            <summary>Sets the stub of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubConstructorArgument.GetHashCode">
            <summary>Sets the stub of Parameter.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubConstructorArgument.GetHashCode01">
            <summary>Sets the stub of Parameter.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubConstructorArgument.InitializeStub">
            <summary>Initializes a new instance of type StubConstructorArgument</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubConstructorArgument.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubConstructorArgument.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.StubIConstructorArgument">
            <summary>Stub type of Ninject.Parameters.IConstructorArgument</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubIConstructorArgument.#ctor">
            <summary>Initializes a new instance of type StubIConstructorArgument</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIConstructorArgument.AppliesToTargetIContextITarget">
            <summary>Sets the stub of IConstructorArgument.AppliesToTarget(IContext context, ITarget target)</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIConstructorArgument.EqualsIParameter">
            <summary>Sets the stub of IEquatable`1.Equals(!0 other)</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIConstructorArgument.GetValueIContextITarget">
            <summary>Sets the stub of IParameter.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubIConstructorArgument.Ninject#Parameters#IParameter#Name">
            <summary>Sets the stub of IParameter.get_Name()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIConstructorArgument.NameGet">
            <summary>Sets the stub of IParameter.get_Name()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubIConstructorArgument.Ninject#Parameters#IConstructorArgument#AppliesToTarget(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>Sets the stub of IConstructorArgument.AppliesToTarget(IContext context, ITarget target)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubIConstructorArgument.Ninject#Parameters#IParameter#GetValue(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>Sets the stub of IParameter.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubIConstructorArgument.Ninject#Parameters#IParameter#ShouldInherit">
            <summary>Sets the stub of IParameter.get_ShouldInherit()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIConstructorArgument.ShouldInheritGet">
            <summary>Sets the stub of IParameter.get_ShouldInherit()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubIConstructorArgument.System#IEquatable{Ninject#Parameters#IParameter}#Equals(Ninject.Parameters.IParameter)">
            <summary>Sets the stub of IEquatable`1.Equals(!0 other)</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.StubIParameter">
            <summary>Stub type of Ninject.Parameters.IParameter</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubIParameter.#ctor">
            <summary>Initializes a new instance of type StubIParameter</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIParameter.EqualsIParameter">
            <summary>Sets the stub of IEquatable`1.Equals(!0 other)</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIParameter.GetValueIContextITarget">
            <summary>Sets the stub of IParameter.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubIParameter.Ninject#Parameters#IParameter#Name">
            <summary>Sets the stub of IParameter.get_Name()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIParameter.NameGet">
            <summary>Sets the stub of IParameter.get_Name()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubIParameter.Ninject#Parameters#IParameter#GetValue(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>Sets the stub of IParameter.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubIParameter.Ninject#Parameters#IParameter#ShouldInherit">
            <summary>Sets the stub of IParameter.get_ShouldInherit()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIParameter.ShouldInheritGet">
            <summary>Sets the stub of IParameter.get_ShouldInherit()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubIParameter.System#IEquatable{Ninject#Parameters#IParameter}#Equals(Ninject.Parameters.IParameter)">
            <summary>Sets the stub of IEquatable`1.Equals(!0 other)</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.StubIPropertyValue">
            <summary>Stub type of Ninject.Parameters.IPropertyValue</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubIPropertyValue.#ctor">
            <summary>Initializes a new instance of type StubIPropertyValue</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIPropertyValue.EqualsIParameter">
            <summary>Sets the stub of IEquatable`1.Equals(!0 other)</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIPropertyValue.GetValueIContextITarget">
            <summary>Sets the stub of IParameter.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubIPropertyValue.Ninject#Parameters#IParameter#Name">
            <summary>Sets the stub of IParameter.get_Name()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIPropertyValue.NameGet">
            <summary>Sets the stub of IParameter.get_Name()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubIPropertyValue.Ninject#Parameters#IParameter#GetValue(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>Sets the stub of IParameter.GetValue(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubIPropertyValue.Ninject#Parameters#IParameter#ShouldInherit">
            <summary>Sets the stub of IParameter.get_ShouldInherit()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubIPropertyValue.ShouldInheritGet">
            <summary>Sets the stub of IParameter.get_ShouldInherit()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubIPropertyValue.System#IEquatable{Ninject#Parameters#IParameter}#Equals(Ninject.Parameters.IParameter)">
            <summary>Sets the stub of IEquatable`1.Equals(!0 other)</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.StubParameter">
            <summary>Stub type of Ninject.Parameters.Parameter</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubParameter.#ctor(System.String,System.Object,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubParameter.#ctor(System.String,System.Func{Ninject.Activation.IContext,System.Object},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubParameter.#ctor(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubParameter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubParameter.Equals(System.Object)">
            <summary>Sets the stub of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubParameter.EqualsObject">
            <summary>Sets the stub of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubParameter.GetHashCode">
            <summary>Sets the stub of Parameter.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubParameter.GetHashCode01">
            <summary>Sets the stub of Parameter.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubParameter.InitializeStub">
            <summary>Initializes a new instance of type StubParameter</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubParameter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubParameter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.StubPropertyValue">
            <summary>Stub type of Ninject.Parameters.PropertyValue</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubPropertyValue.#ctor(System.String,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubPropertyValue.#ctor(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubPropertyValue.#ctor(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubPropertyValue.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubPropertyValue.Equals(System.Object)">
            <summary>Sets the stub of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubPropertyValue.EqualsObject">
            <summary>Sets the stub of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubPropertyValue.GetHashCode">
            <summary>Sets the stub of Parameter.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubPropertyValue.GetHashCode01">
            <summary>Sets the stub of Parameter.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubPropertyValue.InitializeStub">
            <summary>Initializes a new instance of type StubPropertyValue</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubPropertyValue.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubPropertyValue.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument">
            <summary>Stub type of Ninject.Parameters.TypeMatchingConstructorArgument</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument.#ctor(System.Type,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument.#ctor(System.Type,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument.Equals(System.Object)">
            <summary>Sets the stub of TypeMatchingConstructorArgument.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument.EqualsObject">
            <summary>Sets the stub of TypeMatchingConstructorArgument.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument.GetHashCode">
            <summary>Sets the stub of TypeMatchingConstructorArgument.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument.GetHashCode01">
            <summary>Sets the stub of TypeMatchingConstructorArgument.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument.InitializeStub">
            <summary>Initializes a new instance of type StubTypeMatchingConstructorArgument</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubTypeMatchingConstructorArgument.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.StubWeakConstructorArgument">
            <summary>Stub type of Ninject.Parameters.WeakConstructorArgument</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubWeakConstructorArgument.#ctor(System.String,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubWeakConstructorArgument.#ctor(System.String,System.Object,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubWeakConstructorArgument.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubWeakConstructorArgument.Equals(System.Object)">
            <summary>Sets the stub of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubWeakConstructorArgument.EqualsObject">
            <summary>Sets the stub of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubWeakConstructorArgument.GetHashCode">
            <summary>Sets the stub of Parameter.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubWeakConstructorArgument.GetHashCode01">
            <summary>Sets the stub of Parameter.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubWeakConstructorArgument.InitializeStub">
            <summary>Initializes a new instance of type StubWeakConstructorArgument</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubWeakConstructorArgument.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubWeakConstructorArgument.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Parameters.Fakes.StubWeakPropertyValue">
            <summary>Stub type of Ninject.Parameters.WeakPropertyValue</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubWeakPropertyValue.#ctor(System.String,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubWeakPropertyValue.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubWeakPropertyValue.Equals(System.Object)">
            <summary>Sets the stub of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubWeakPropertyValue.EqualsObject">
            <summary>Sets the stub of Parameter.Equals(Object obj)</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubWeakPropertyValue.GetHashCode">
            <summary>Sets the stub of Parameter.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Parameters.Fakes.StubWeakPropertyValue.GetHashCode01">
            <summary>Sets the stub of Parameter.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Parameters.Fakes.StubWeakPropertyValue.InitializeStub">
            <summary>Initializes a new instance of type StubWeakPropertyValue</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubWeakPropertyValue.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Parameters.Fakes.StubWeakPropertyValue.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBinding">
            <summary>Shim type of Ninject.Planning.Bindings.Binding</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBinding.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBinding.#ctor(Ninject.Planning.Bindings.Binding)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ActivationActionsGet">
            <summary>Sets the shim of Binding.get_ActivationActions()</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.ActivationActionsGet">
            <summary>Sets the shim of Binding.get_ActivationActions()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.BindingConfigurationGet">
            <summary>Sets the shim of Binding.get_BindingConfiguration()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.BindingConfigurationSetIBindingConfiguration">
            <summary>Sets the shim of Binding.set_BindingConfiguration(IBindingConfiguration value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.ConditionGet">
            <summary>Sets the shim of Binding.get_Condition()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.ConditionSetFuncOfIRequestBoolean">
            <summary>Sets the shim of Binding.set_Condition(Func`2&lt;IRequest,Boolean&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.DeactivationActionsGet">
            <summary>Sets the shim of Binding.get_DeactivationActions()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.GetProviderIContext">
            <summary>Sets the shim of Binding.GetProvider(IContext context)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.GetScopeIContext">
            <summary>Sets the shim of Binding.GetScope(IContext context)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.IsConditionalGet">
            <summary>Sets the shim of Binding.get_IsConditional()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.IsImplicitGet">
            <summary>Sets the shim of Binding.get_IsImplicit()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.IsImplicitSetBoolean">
            <summary>Sets the shim of Binding.set_IsImplicit(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.MatchesIRequest">
            <summary>Sets the shim of Binding.Matches(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.MetadataGet">
            <summary>Sets the shim of Binding.get_Metadata()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.ParametersGet">
            <summary>Sets the shim of Binding.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.ProviderCallbackGet">
            <summary>Sets the shim of Binding.get_ProviderCallback()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.ProviderCallbackSetFuncOfIContextIProvider">
            <summary>Sets the shim of Binding.set_ProviderCallback(Func`2&lt;IContext,IProvider&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.ScopeCallbackGet">
            <summary>Sets the shim of Binding.get_ScopeCallback()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.ScopeCallbackSetFuncOfIContextObject">
            <summary>Sets the shim of Binding.set_ScopeCallback(Func`2&lt;IContext,Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.ServiceGet">
            <summary>Sets the shim of Binding.get_Service()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.ServiceSetType">
            <summary>Sets the shim of Binding.set_Service(Type value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.TargetGet">
            <summary>Sets the shim of Binding.get_Target()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.AllInstances.TargetSetBindingTarget">
            <summary>Sets the shim of Binding.set_Target(BindingTarget value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBinding.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBinding.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBinding.Bind(Ninject.Planning.Bindings.IBinding)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBinding.Bind(Ninject.Planning.Bindings.IBindingConfiguration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.BindingConfigurationGet">
            <summary>Sets the shim of Binding.get_BindingConfiguration()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.BindingConfigurationSetIBindingConfiguration">
            <summary>Sets the shim of Binding.set_BindingConfiguration(IBindingConfiguration value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ConditionGet">
            <summary>Sets the shim of Binding.get_Condition()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ConditionSetFuncOfIRequestBoolean">
            <summary>Sets the shim of Binding.set_Condition(Func`2&lt;IRequest,Boolean&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ConstructorType">
            <summary>Sets the shim of Binding.Binding(Type service)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ConstructorTypeIBindingConfiguration">
            <summary>Sets the shim of Binding.Binding(Type service, IBindingConfiguration configuration)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.DeactivationActionsGet">
            <summary>Sets the shim of Binding.get_DeactivationActions()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.GetProviderIContext">
            <summary>Sets the shim of Binding.GetProvider(IContext context)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.GetScopeIContext">
            <summary>Sets the shim of Binding.GetScope(IContext context)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.IsConditionalGet">
            <summary>Sets the shim of Binding.get_IsConditional()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.IsImplicitGet">
            <summary>Sets the shim of Binding.get_IsImplicit()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.IsImplicitSetBoolean">
            <summary>Sets the shim of Binding.set_IsImplicit(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.MatchesIRequest">
            <summary>Sets the shim of Binding.Matches(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.MetadataGet">
            <summary>Sets the shim of Binding.get_Metadata()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ParametersGet">
            <summary>Sets the shim of Binding.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ProviderCallbackGet">
            <summary>Sets the shim of Binding.get_ProviderCallback()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ProviderCallbackSetFuncOfIContextIProvider">
            <summary>Sets the shim of Binding.set_ProviderCallback(Func`2&lt;IContext,IProvider&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ScopeCallbackGet">
            <summary>Sets the shim of Binding.get_ScopeCallback()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ScopeCallbackSetFuncOfIContextObject">
            <summary>Sets the shim of Binding.set_ScopeCallback(Func`2&lt;IContext,Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ServiceGet">
            <summary>Sets the shim of Binding.get_Service()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.ServiceSetType">
            <summary>Sets the shim of Binding.set_Service(Type value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.TargetGet">
            <summary>Sets the shim of Binding.get_Target()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBinding.TargetSetBindingTarget">
            <summary>Sets the shim of Binding.set_Target(BindingTarget value)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder">
            <summary>Shim type of Ninject.Planning.Bindings.BindingBuilder</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.#ctor(Ninject.Planning.Bindings.BindingBuilder)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AddConstructorArgumentExpressionStringParameterExpression">
            <summary>Sets the shim of BindingBuilder.AddConstructorArgument(Expression argument, String argumentName, ParameterExpression constructorArgumentSyntaxParameterExpression)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AddConstructorArgumentsNewExpressionParameterExpression">
            <summary>Sets the shim of BindingBuilder.AddConstructorArguments(NewExpression ctorExpression, ParameterExpression constructorArgumentSyntaxParameterExpression)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.AddConstructorArgumentExpressionStringParameterExpression">
            <summary>Sets the shim of BindingBuilder.AddConstructorArgument(Expression argument, String argumentName, ParameterExpression constructorArgumentSyntaxParameterExpression)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.AddConstructorArgumentsNewExpressionParameterExpression">
            <summary>Sets the shim of BindingBuilder.AddConstructorArguments(NewExpression ctorExpression, ParameterExpression constructorArgumentSyntaxParameterExpression)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.BindingConfigurationGet">
            <summary>Sets the shim of BindingBuilder.get_BindingConfiguration()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.BindingConfigurationSetIBindingConfiguration">
            <summary>Sets the shim of BindingBuilder.set_BindingConfiguration(IBindingConfiguration value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.InternalToConfigurationOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder,``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalToConfiguration(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.InternalToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder,System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.InternalToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder,System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.InternalToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalTo()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.InternalToOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder,System.Type,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalTo(Type implementation)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.InternalToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder,Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.KernelGet">
            <summary>Sets the shim of BindingBuilder.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.KernelSetIKernel">
            <summary>Sets the shim of BindingBuilder.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.ServiceNamesGet">
            <summary>Sets the shim of BindingBuilder.get_ServiceNames()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.ServiceNamesSetString">
            <summary>Sets the shim of BindingBuilder.set_ServiceNames(String value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.ToProviderInternalOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder,System.Type,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.ToProviderInternal(Type providerType)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.AllInstances.ToProviderInternalOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets the shim of BindingBuilder.ToProviderInternal()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.BindingConfigurationGet">
            <summary>Sets the shim of BindingBuilder.get_BindingConfiguration()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.BindingConfigurationSetIBindingConfiguration">
            <summary>Sets the shim of BindingBuilder.set_BindingConfiguration(IBindingConfiguration value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.ConstructorIBindingConfigurationIKernelString">
            <summary>Sets the shim of BindingBuilder.BindingBuilder(IBindingConfiguration bindingConfiguration, IKernel kernel, String serviceNames)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.InternalToConfigurationOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalToConfiguration(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.InternalToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.InternalToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.InternalToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalTo()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.InternalToOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalTo(Type implementation)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.InternalToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.InternalToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.KernelGet">
            <summary>Sets the shim of BindingBuilder.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.KernelSetIKernel">
            <summary>Sets the shim of BindingBuilder.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.ServiceNamesGet">
            <summary>Sets the shim of BindingBuilder.get_ServiceNames()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.ServiceNamesSetString">
            <summary>Sets the shim of BindingBuilder.set_ServiceNames(String value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.ToProviderInternalOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder.ToProviderInternal(Type providerType)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder.ToProviderInternalOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets the shim of BindingBuilder.ToProviderInternal()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder._ToProviderInternalb__9Of2IContext``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.IContext,Ninject.Activation.IProvider})">
            <summary>Sets the shim of BindingBuilder.&lt;ToProviderInternal&gt;b__9(IContext ctx)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1">
            <summary>Shim type of Ninject.Planning.Bindings.BindingBuilder`1</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.#ctor(Ninject.Planning.Bindings.BindingBuilder{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.BindingGet">
            <summary>Sets the shim of BindingBuilder`1.get_Binding()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.BindingSetIBinding">
            <summary>Sets the shim of BindingBuilder`1.set_Binding(IBinding value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingBuilder`1.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0},``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`1.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0},System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`1.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.ToMethodFuncOfIContextT0">
            <summary>Sets the shim of BindingBuilder`1.ToMethod(Func`2&lt;IContext,!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0},System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`1.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`1.To()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingBuilder`1.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0},Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`1.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.ToProviderType">
            <summary>Sets the shim of BindingBuilder`1.ToProvider(Type providerType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.ToSelf">
            <summary>Sets the shim of BindingBuilder`1.ToSelf()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.AllInstances.ToType">
            <summary>Sets the shim of BindingBuilder`1.To(Type implementation)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.Bind(Ninject.Infrastructure.IHaveBindingConfiguration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.Bind(Ninject.Infrastructure.IHaveKernel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.Bind(Ninject.Syntax.IBindingSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.Bind(Ninject.Syntax.IBindingToSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.BindingGet">
            <summary>Sets the shim of BindingBuilder`1.get_Binding()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.BindingSetIBinding">
            <summary>Sets the shim of BindingBuilder`1.set_Binding(IBinding value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ConstructorIBindingIKernelString">
            <summary>Sets the shim of BindingBuilder`1.BindingBuilder`1(IBinding binding, IKernel kernel, String serviceNames)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingBuilder`1.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`1.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`1.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ToMethodFuncOfIContextT0">
            <summary>Sets the shim of BindingBuilder`1.ToMethod(Func`2&lt;IContext,!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`1.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`1.To()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingBuilder`1.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`1.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ToProviderType">
            <summary>Sets the shim of BindingBuilder`1.ToProvider(Type providerType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ToSelf">
            <summary>Sets the shim of BindingBuilder`1.ToSelf()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`1.ToType">
            <summary>Sets the shim of BindingBuilder`1.To(Type implementation)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2">
            <summary>Shim type of Ninject.Planning.Bindings.BindingBuilder`2</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.#ctor(Ninject.Planning.Bindings.BindingBuilder{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingBuilder`2.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1},``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`2.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1},System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`2.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1},System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`2.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`2.To()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{System.Object}})">
            <summary>Sets the shim of BindingBuilder`2.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1},Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`2.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances.ToProviderOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets the shim of BindingBuilder`2.ToProvider()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances.ToProviderType">
            <summary>Sets the shim of BindingBuilder`2.ToProvider(Type providerType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.AllInstances.ToType">
            <summary>Sets the shim of BindingBuilder`2.To(Type implementation)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.Bind(Ninject.Infrastructure.IHaveBindingConfiguration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.Bind(Ninject.Infrastructure.IHaveKernel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.Bind(Ninject.Syntax.IBindingSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.Bind(Ninject.Syntax.IBindingToSyntax{`0,`1})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.ConstructorIBindingConfigurationIKernelString">
            <summary>Sets the shim of BindingBuilder`2.BindingBuilder`2(IBindingConfiguration bindingConfigurationConfiguration, IKernel kernel, String serviceNames)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingBuilder`2.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`2.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`2.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`2.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`2.To()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{System.Object}})">
            <summary>Sets the shim of BindingBuilder`2.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`2.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.ToProviderOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets the shim of BindingBuilder`2.ToProvider()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.ToProviderType">
            <summary>Sets the shim of BindingBuilder`2.ToProvider(Type providerType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`2.ToType">
            <summary>Sets the shim of BindingBuilder`2.To(Type implementation)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3">
            <summary>Shim type of Ninject.Planning.Bindings.BindingBuilder`3</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.#ctor(Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingBuilder`3.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2},``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`3.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2},System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`3.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2},System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`3.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`3.To()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{System.Object}})">
            <summary>Sets the shim of BindingBuilder`3.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2},Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`3.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances.ToProviderOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets the shim of BindingBuilder`3.ToProvider()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances.ToProviderType">
            <summary>Sets the shim of BindingBuilder`3.ToProvider(Type providerType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.AllInstances.ToType">
            <summary>Sets the shim of BindingBuilder`3.To(Type implementation)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.Bind(Ninject.Infrastructure.IHaveBindingConfiguration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.Bind(Ninject.Infrastructure.IHaveKernel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.Bind(Ninject.Syntax.IBindingSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.Bind(Ninject.Syntax.IBindingToSyntax{`0,`1,`2})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.ConstructorIBindingConfigurationIKernelString">
            <summary>Sets the shim of BindingBuilder`3.BindingBuilder`3(IBindingConfiguration bindingConfigurationConfiguration, IKernel kernel, String serviceNames)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingBuilder`3.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`3.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`3.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`3.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`3.To()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{System.Object}})">
            <summary>Sets the shim of BindingBuilder`3.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`3.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.ToProviderOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets the shim of BindingBuilder`3.ToProvider()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.ToProviderType">
            <summary>Sets the shim of BindingBuilder`3.ToProvider(Type providerType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`3.ToType">
            <summary>Sets the shim of BindingBuilder`3.To(Type implementation)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4">
            <summary>Shim type of Ninject.Planning.Bindings.BindingBuilder`4</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.#ctor(Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2,`3})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingBuilder`4.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2,`3},``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`4.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2,`3},System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`4.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2,`3},System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`4.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2,`3},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`4.To()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2,`3},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{System.Object}})">
            <summary>Sets the shim of BindingBuilder`4.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2,`3},Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`4.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances.ToProviderOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingBuilder{`0,`1,`2,`3},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets the shim of BindingBuilder`4.ToProvider()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances.ToProviderType">
            <summary>Sets the shim of BindingBuilder`4.ToProvider(Type providerType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.AllInstances.ToType">
            <summary>Sets the shim of BindingBuilder`4.To(Type implementation)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.Bind(Ninject.Infrastructure.IHaveBindingConfiguration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.Bind(Ninject.Infrastructure.IHaveKernel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.Bind(Ninject.Syntax.IBindingSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.Bind(Ninject.Syntax.IBindingToSyntax{`0,`1,`2,`3})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.ConstructorIBindingConfigurationIKernelString">
            <summary>Sets the shim of BindingBuilder`4.BindingBuilder`4(IBindingConfiguration bindingConfigurationConfiguration, IKernel kernel, String serviceNames)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingBuilder`4.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`4.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`4.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`4.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`4.To()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{System.Object}})">
            <summary>Sets the shim of BindingBuilder`4.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets the shim of BindingBuilder`4.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.ToProviderOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets the shim of BindingBuilder`4.ToProvider()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.ToProviderType">
            <summary>Sets the shim of BindingBuilder`4.ToProvider(Type providerType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingBuilder`4.ToType">
            <summary>Sets the shim of BindingBuilder`4.To(Type implementation)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration">
            <summary>Shim type of Ninject.Planning.Bindings.BindingConfiguration</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.#ctor(Ninject.Planning.Bindings.BindingConfiguration)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.ActivationActionsGet">
            <summary>Sets the shim of BindingConfiguration.get_ActivationActions()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.ActivationActionsSetICollectionOfActionOfIContextObject">
            <summary>Sets the shim of BindingConfiguration.set_ActivationActions(ICollection`1&lt;Action`2&lt;IContext,Object&gt;&gt; value)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.ActivationActionsGet">
            <summary>Sets the shim of BindingConfiguration.get_ActivationActions()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.ActivationActionsSetICollectionOfActionOfIContextObject">
            <summary>Sets the shim of BindingConfiguration.set_ActivationActions(ICollection`1&lt;Action`2&lt;IContext,Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.ConditionGet">
            <summary>Sets the shim of BindingConfiguration.get_Condition()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.ConditionSetFuncOfIRequestBoolean">
            <summary>Sets the shim of BindingConfiguration.set_Condition(Func`2&lt;IRequest,Boolean&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.DeactivationActionsGet">
            <summary>Sets the shim of BindingConfiguration.get_DeactivationActions()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.DeactivationActionsSetICollectionOfActionOfIContextObject">
            <summary>Sets the shim of BindingConfiguration.set_DeactivationActions(ICollection`1&lt;Action`2&lt;IContext,Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.GetProviderIContext">
            <summary>Sets the shim of BindingConfiguration.GetProvider(IContext context)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.GetScopeIContext">
            <summary>Sets the shim of BindingConfiguration.GetScope(IContext context)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.IsConditionalGet">
            <summary>Sets the shim of BindingConfiguration.get_IsConditional()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.IsImplicitGet">
            <summary>Sets the shim of BindingConfiguration.get_IsImplicit()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.IsImplicitSetBoolean">
            <summary>Sets the shim of BindingConfiguration.set_IsImplicit(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.MatchesIRequest">
            <summary>Sets the shim of BindingConfiguration.Matches(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.MetadataGet">
            <summary>Sets the shim of BindingConfiguration.get_Metadata()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.MetadataSetIBindingMetadata">
            <summary>Sets the shim of BindingConfiguration.set_Metadata(IBindingMetadata value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.ParametersGet">
            <summary>Sets the shim of BindingConfiguration.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.ParametersSetICollectionOfIParameter">
            <summary>Sets the shim of BindingConfiguration.set_Parameters(ICollection`1&lt;IParameter&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.ProviderCallbackGet">
            <summary>Sets the shim of BindingConfiguration.get_ProviderCallback()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.ProviderCallbackSetFuncOfIContextIProvider">
            <summary>Sets the shim of BindingConfiguration.set_ProviderCallback(Func`2&lt;IContext,IProvider&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.ScopeCallbackGet">
            <summary>Sets the shim of BindingConfiguration.get_ScopeCallback()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.ScopeCallbackSetFuncOfIContextObject">
            <summary>Sets the shim of BindingConfiguration.set_ScopeCallback(Func`2&lt;IContext,Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.TargetGet">
            <summary>Sets the shim of BindingConfiguration.get_Target()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.AllInstances.TargetSetBindingTarget">
            <summary>Sets the shim of BindingConfiguration.set_Target(BindingTarget value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.Bind(Ninject.Planning.Bindings.IBindingConfiguration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.ConditionGet">
            <summary>Sets the shim of BindingConfiguration.get_Condition()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.ConditionSetFuncOfIRequestBoolean">
            <summary>Sets the shim of BindingConfiguration.set_Condition(Func`2&lt;IRequest,Boolean&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.Constructor">
            <summary>Sets the shim of BindingConfiguration.BindingConfiguration()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.DeactivationActionsGet">
            <summary>Sets the shim of BindingConfiguration.get_DeactivationActions()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.DeactivationActionsSetICollectionOfActionOfIContextObject">
            <summary>Sets the shim of BindingConfiguration.set_DeactivationActions(ICollection`1&lt;Action`2&lt;IContext,Object&gt;&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.GetProviderIContext">
            <summary>Sets the shim of BindingConfiguration.GetProvider(IContext context)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.GetScopeIContext">
            <summary>Sets the shim of BindingConfiguration.GetScope(IContext context)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.IsConditionalGet">
            <summary>Sets the shim of BindingConfiguration.get_IsConditional()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.IsImplicitGet">
            <summary>Sets the shim of BindingConfiguration.get_IsImplicit()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.IsImplicitSetBoolean">
            <summary>Sets the shim of BindingConfiguration.set_IsImplicit(Boolean value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.MatchesIRequest">
            <summary>Sets the shim of BindingConfiguration.Matches(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.MetadataGet">
            <summary>Sets the shim of BindingConfiguration.get_Metadata()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.MetadataSetIBindingMetadata">
            <summary>Sets the shim of BindingConfiguration.set_Metadata(IBindingMetadata value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.ParametersGet">
            <summary>Sets the shim of BindingConfiguration.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.ParametersSetICollectionOfIParameter">
            <summary>Sets the shim of BindingConfiguration.set_Parameters(ICollection`1&lt;IParameter&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.ProviderCallbackGet">
            <summary>Sets the shim of BindingConfiguration.get_ProviderCallback()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.ProviderCallbackSetFuncOfIContextIProvider">
            <summary>Sets the shim of BindingConfiguration.set_ProviderCallback(Func`2&lt;IContext,IProvider&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.ScopeCallbackGet">
            <summary>Sets the shim of BindingConfiguration.get_ScopeCallback()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.ScopeCallbackSetFuncOfIContextObject">
            <summary>Sets the shim of BindingConfiguration.set_ScopeCallback(Func`2&lt;IContext,Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.TargetGet">
            <summary>Sets the shim of BindingConfiguration.get_Target()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfiguration.TargetSetBindingTarget">
            <summary>Sets the shim of BindingConfiguration.set_Target(BindingTarget value)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1">
            <summary>Shim type of Ninject.Planning.Bindings.BindingConfigurationBuilder`1</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.#ctor(Ninject.Planning.Bindings.BindingConfigurationBuilder{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.BindingConfigurationGet">
            <summary>Sets the shim of BindingConfigurationBuilder`1.get_BindingConfiguration()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.BindingConfigurationSetIBindingConfiguration">
            <summary>Sets the shim of BindingConfigurationBuilder`1.set_BindingConfiguration(IBindingConfiguration value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.InScopeFuncOfIContextObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.InScope(Func`2&lt;IContext,Object&gt; scope)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.InSingletonScope">
            <summary>Sets the shim of BindingConfigurationBuilder`1.InSingletonScope()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.InThreadScope">
            <summary>Sets the shim of BindingConfigurationBuilder`1.InThreadScope()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.InTransientScope">
            <summary>Sets the shim of BindingConfigurationBuilder`1.InTransientScope()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.KernelGet">
            <summary>Sets the shim of BindingConfigurationBuilder`1.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.KernelSetIKernel">
            <summary>Sets the shim of BindingConfigurationBuilder`1.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.NamedString">
            <summary>Sets the shim of BindingConfigurationBuilder`1.Named(String name)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.OnActivationActionOfIContextT0">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.OnActivationActionOfT0">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.OnActivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingConfigurationBuilder{`0},System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.OnActivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingConfigurationBuilder{`0},System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.OnDeactivationActionOfIContextT0">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.OnDeactivationActionOfT0">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.OnDeactivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingConfigurationBuilder{`0},System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.OnDeactivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingConfigurationBuilder{`0},System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenAnyAncestorMatchesPredicateOfIContext">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenAnyAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenAnyAncestorNamedString">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenAnyAncestorNamed(String name)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenAnyAnchestorNamedString">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenAnyAnchestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenClassHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingConfigurationBuilder{`0},Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenClassHas()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenClassHasType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenClassHas(Type attributeType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenFuncOfIRequestBoolean">
            <summary>Sets the shim of BindingConfigurationBuilder`1.When(Func`2&lt;IRequest,Boolean&gt; condition)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenInjectedExactlyIntoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingConfigurationBuilder{`0},Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedExactlyInto()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenInjectedExactlyIntoType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedExactlyInto(Type parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenInjectedExactlyIntoTypeArray">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedExactlyInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenInjectedIntoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingConfigurationBuilder{`0},Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedInto()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenInjectedIntoType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedInto(Type parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenInjectedIntoTypeArray">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenMemberHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingConfigurationBuilder{`0},Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenMemberHas()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenMemberHasType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenMemberHas(Type attributeType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenNoAncestorMatchesPredicateOfIContext">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenNoAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenNoAncestorNamedString">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenNoAncestorNamed(String name)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenParentNamedString">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenParentNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenTargetHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingConfigurationBuilder{`0},Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenTargetHas()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WhenTargetHasType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenTargetHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithConstructorArgumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingConfigurationBuilder{`0},``0,Ninject.Syntax.IBindingWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithConstructorArgumentStringFuncOfIContextITargetObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithConstructorArgumentStringFuncOfIContextObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithConstructorArgumentStringObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithConstructorArgumentTypeFuncOfIContextITargetObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithConstructorArgumentTypeFuncOfIContextObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithConstructorArgumentTypeObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithMetadataStringObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithParameterIParameter">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithPropertyValueStringFuncOfIContextITargetObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithPropertyValueStringFuncOfIContextObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.AllInstances.WithPropertyValueStringObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Infrastructure.IHaveBindingConfiguration)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Infrastructure.IHaveKernel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Planning.Bindings.IBindingConfigurationSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IBindingSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IBindingInSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IBindingNamedSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IBindingNamedWithOrOnSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IBindingOnSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IBindingWhenSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IBindingWithOrOnSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.Bind(Ninject.Syntax.IBindingWithSyntax{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.BindingConfigurationGet">
            <summary>Sets the shim of BindingConfigurationBuilder`1.get_BindingConfiguration()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.BindingConfigurationSetIBindingConfiguration">
            <summary>Sets the shim of BindingConfigurationBuilder`1.set_BindingConfiguration(IBindingConfiguration value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.ConstructorIBindingConfigurationStringIKernel">
            <summary>Sets the shim of BindingConfigurationBuilder`1.BindingConfigurationBuilder`1(IBindingConfiguration bindingConfiguration, String serviceNames, IKernel kernel)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.DoesAnyAncestorMatchIRequestPredicateOfIContext">
            <summary>Sets the shim of BindingConfigurationBuilder`1.DoesAnyAncestorMatch(IRequest request, Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.InScopeFuncOfIContextObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.InScope(Func`2&lt;IContext,Object&gt; scope)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.InSingletonScope">
            <summary>Sets the shim of BindingConfigurationBuilder`1.InSingletonScope()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.InThreadScope">
            <summary>Sets the shim of BindingConfigurationBuilder`1.InThreadScope()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.InTransientScope">
            <summary>Sets the shim of BindingConfigurationBuilder`1.InTransientScope()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.KernelGet">
            <summary>Sets the shim of BindingConfigurationBuilder`1.get_Kernel()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.KernelSetIKernel">
            <summary>Sets the shim of BindingConfigurationBuilder`1.set_Kernel(IKernel value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.NamedString">
            <summary>Sets the shim of BindingConfigurationBuilder`1.Named(String name)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.OnActivationActionOfIContextT0">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.OnActivationActionOfT0">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.OnActivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.OnActivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.OnDeactivationActionOfIContextT0">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.OnDeactivationActionOfT0">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.OnDeactivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.OnDeactivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenAnyAncestorMatchesPredicateOfIContext">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenAnyAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenAnyAncestorNamedString">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenAnyAncestorNamed(String name)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenAnyAnchestorNamedString">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenAnyAnchestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenClassHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenClassHas()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenClassHasType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenClassHas(Type attributeType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenFuncOfIRequestBoolean">
            <summary>Sets the shim of BindingConfigurationBuilder`1.When(Func`2&lt;IRequest,Boolean&gt; condition)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenInjectedExactlyIntoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedExactlyInto()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenInjectedExactlyIntoType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedExactlyInto(Type parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenInjectedExactlyIntoTypeArray">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedExactlyInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenInjectedIntoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedInto()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenInjectedIntoType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedInto(Type parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenInjectedIntoTypeArray">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenInjectedInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenMemberHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenMemberHas()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenMemberHasType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenMemberHas(Type attributeType)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenNoAncestorMatchesPredicateOfIContext">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenNoAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenNoAncestorNamedString">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenNoAncestorNamed(String name)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenParentNamedString">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenParentNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenTargetHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenTargetHas()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WhenTargetHasType">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WhenTargetHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithConstructorArgumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWithOrOnSyntax{`0}})">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithConstructorArgumentStringFuncOfIContextITargetObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithConstructorArgumentStringFuncOfIContextObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithConstructorArgumentStringObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithConstructorArgumentTypeFuncOfIContextITargetObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithConstructorArgumentTypeFuncOfIContextObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithConstructorArgumentTypeObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithMetadataStringObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithParameterIParameter">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithPropertyValueStringFuncOfIContextITargetObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithPropertyValueStringFuncOfIContextObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingConfigurationBuilder`1.WithPropertyValueStringObject">
            <summary>Sets the shim of BindingConfigurationBuilder`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata">
            <summary>Shim type of Ninject.Planning.Bindings.BindingMetadata</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.#ctor(Ninject.Planning.Bindings.BindingMetadata)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.AllInstances.GetOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingMetadata,System.String,``0})">
            <summary>Sets the shim of BindingMetadata.Get(String key)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.AllInstances.GetOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Bindings.BindingMetadata,System.String,``0,``0})">
            <summary>Sets the shim of BindingMetadata.Get(String key, !!0 defaultValue)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.AllInstances.HasString">
            <summary>Sets the shim of BindingMetadata.Has(String key)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.AllInstances.NameGet">
            <summary>Sets the shim of BindingMetadata.get_Name()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.AllInstances.NameSetString">
            <summary>Sets the shim of BindingMetadata.set_Name(String value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.AllInstances.SetStringObject">
            <summary>Sets the shim of BindingMetadata.Set(String key, Object value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.Bind(Ninject.Planning.Bindings.IBindingMetadata)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.Constructor">
            <summary>Sets the shim of BindingMetadata.BindingMetadata()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.GetOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets the shim of BindingMetadata.Get(String key)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.GetOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0,``0})">
            <summary>Sets the shim of BindingMetadata.Get(String key, !!0 defaultValue)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.HasString">
            <summary>Sets the shim of BindingMetadata.Has(String key)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.NameGet">
            <summary>Sets the shim of BindingMetadata.get_Name()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.NameSetString">
            <summary>Sets the shim of BindingMetadata.set_Name(String value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.ShimBindingMetadata.SetStringObject">
            <summary>Sets the shim of BindingMetadata.Set(String key, Object value)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubBinding">
            <summary>Stub type of Ninject.Planning.Bindings.Binding</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBinding.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBinding.#ctor(System.Type,Ninject.Planning.Bindings.IBindingConfiguration)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBinding.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBinding.InitializeStub">
            <summary>Initializes a new instance of type StubBinding</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBinding.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBinding.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubBindingBuilder">
            <summary>Stub type of Ninject.Planning.Bindings.BindingBuilder</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingBuilder.#ctor(Ninject.Planning.Bindings.IBindingConfiguration,Ninject.IKernel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingBuilder.InitializeStub">
            <summary>Initializes a new instance of type StubBindingBuilder</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`1">
            <summary>Stub type of Ninject.Planning.Bindings.BindingBuilder`1</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`1.#ctor(Ninject.Planning.Bindings.IBinding,Ninject.IKernel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`1.InitializeStub">
            <summary>Initializes a new instance of type StubBindingBuilder</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`2">
            <summary>Stub type of Ninject.Planning.Bindings.BindingBuilder`2</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`2.#ctor(Ninject.Planning.Bindings.IBindingConfiguration,Ninject.IKernel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`2.InitializeStub">
            <summary>Initializes a new instance of type StubBindingBuilder</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`3">
            <summary>Stub type of Ninject.Planning.Bindings.BindingBuilder`3</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`3.#ctor(Ninject.Planning.Bindings.IBindingConfiguration,Ninject.IKernel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`3.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`3.InitializeStub">
            <summary>Initializes a new instance of type StubBindingBuilder</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`3.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`3.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`4">
            <summary>Stub type of Ninject.Planning.Bindings.BindingBuilder`4</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`4.#ctor(Ninject.Planning.Bindings.IBindingConfiguration,Ninject.IKernel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`4.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`4.InitializeStub">
            <summary>Initializes a new instance of type StubBindingBuilder</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`4.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingBuilder`4.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubBindingConfiguration">
            <summary>Stub type of Ninject.Planning.Bindings.BindingConfiguration</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingConfiguration.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingConfiguration.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingConfiguration.InitializeStub">
            <summary>Initializes a new instance of type StubBindingConfiguration</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingConfiguration.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingConfiguration.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubBindingConfigurationBuilder`1">
            <summary>Stub type of Ninject.Planning.Bindings.BindingConfigurationBuilder`1</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingConfigurationBuilder`1.#ctor(Ninject.Planning.Bindings.IBindingConfiguration,System.String,Ninject.IKernel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingConfigurationBuilder`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingConfigurationBuilder`1.InitializeStub">
            <summary>Initializes a new instance of type StubBindingConfigurationBuilder</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingConfigurationBuilder`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingConfigurationBuilder`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubBindingMetadata">
            <summary>Stub type of Ninject.Planning.Bindings.BindingMetadata</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingMetadata.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingMetadata.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubBindingMetadata.InitializeStub">
            <summary>Initializes a new instance of type StubBindingMetadata</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingMetadata.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubBindingMetadata.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubIBinding">
            <summary>Stub type of Ninject.Planning.Bindings.IBinding</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBinding.#ctor">
            <summary>Initializes a new instance of type StubIBinding</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#ActivationActions">
            <summary>Sets the stub of IBindingConfiguration.get_ActivationActions()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.ActivationActionsGet">
            <summary>Sets the stub of IBindingConfiguration.get_ActivationActions()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBinding.AttachBackingFieldToCondition">
            <summary>Attaches delegates to emulate StubIBinding.Condition as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBinding.AttachBackingFieldToIsImplicit">
            <summary>Attaches delegates to emulate StubIBinding.IsImplicit as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBinding.AttachBackingFieldToProviderCallback">
            <summary>Attaches delegates to emulate StubIBinding.ProviderCallback as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBinding.AttachBackingFieldToScopeCallback">
            <summary>Attaches delegates to emulate StubIBinding.ScopeCallback as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBinding.AttachBackingFieldToTarget">
            <summary>Attaches delegates to emulate StubIBinding.Target as a property with a backing field.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBinding#BindingConfiguration">
            <summary>Sets the stub of IBinding.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.BindingConfigurationGet">
            <summary>Sets the stub of IBinding.get_BindingConfiguration()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#Condition">
            <summary>Sets the stub of IBindingConfiguration.get_Condition()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.ConditionGet">
            <summary>Sets the stub of IBindingConfiguration.get_Condition()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.ConditionSetFuncOfIRequestBoolean">
            <summary>Sets the stub of IBindingConfiguration.set_Condition(Func`2&lt;IRequest,Boolean&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#DeactivationActions">
            <summary>Sets the stub of IBindingConfiguration.get_DeactivationActions()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.DeactivationActionsGet">
            <summary>Sets the stub of IBindingConfiguration.get_DeactivationActions()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.GetProviderIContext">
            <summary>Sets the stub of IBindingConfiguration.GetProvider(IContext context)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.GetScopeIContext">
            <summary>Sets the stub of IBindingConfiguration.GetScope(IContext context)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#IsConditional">
            <summary>Sets the stub of IBindingConfiguration.get_IsConditional()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.IsConditionalGet">
            <summary>Sets the stub of IBindingConfiguration.get_IsConditional()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#IsImplicit">
            <summary>Sets the stub of IBindingConfiguration.get_IsImplicit()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.IsImplicitGet">
            <summary>Sets the stub of IBindingConfiguration.get_IsImplicit()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.IsImplicitSetBoolean">
            <summary>Sets the stub of IBindingConfiguration.set_IsImplicit(Boolean value)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.MatchesIRequest">
            <summary>Sets the stub of IBindingConfiguration.Matches(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#Metadata">
            <summary>Sets the stub of IBindingConfiguration.get_Metadata()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.MetadataGet">
            <summary>Sets the stub of IBindingConfiguration.get_Metadata()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#GetProvider(Ninject.Activation.IContext)">
            <summary>Sets the stub of IBindingConfiguration.GetProvider(IContext context)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#GetScope(Ninject.Activation.IContext)">
            <summary>Sets the stub of IBindingConfiguration.GetScope(IContext context)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#Matches(Ninject.Activation.IRequest)">
            <summary>Sets the stub of IBindingConfiguration.Matches(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#Parameters">
            <summary>Sets the stub of IBindingConfiguration.get_Parameters()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.ParametersGet">
            <summary>Sets the stub of IBindingConfiguration.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#ProviderCallback">
            <summary>Sets the stub of IBindingConfiguration.get_ProviderCallback()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.ProviderCallbackGet">
            <summary>Sets the stub of IBindingConfiguration.get_ProviderCallback()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.ProviderCallbackSetFuncOfIContextIProvider">
            <summary>Sets the stub of IBindingConfiguration.set_ProviderCallback(Func`2&lt;IContext,IProvider&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#ScopeCallback">
            <summary>Sets the stub of IBindingConfiguration.get_ScopeCallback()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.ScopeCallbackGet">
            <summary>Sets the stub of IBindingConfiguration.get_ScopeCallback()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.ScopeCallbackSetFuncOfIContextObject">
            <summary>Sets the stub of IBindingConfiguration.set_ScopeCallback(Func`2&lt;IContext,Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBinding#Service">
            <summary>Sets the stub of IBinding.get_Service()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.ServiceGet">
            <summary>Sets the stub of IBinding.get_Service()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBinding.Ninject#Planning#Bindings#IBindingConfiguration#Target">
            <summary>Sets the stub of IBindingConfiguration.get_Target()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.TargetGet">
            <summary>Sets the stub of IBindingConfiguration.get_Target()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBinding.TargetSetBindingTarget">
            <summary>Sets the stub of IBindingConfiguration.set_Target(BindingTarget value)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration">
            <summary>Stub type of Ninject.Planning.Bindings.IBindingConfiguration</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.#ctor">
            <summary>Initializes a new instance of type StubIBindingConfiguration</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#ActivationActions">
            <summary>Sets the stub of IBindingConfiguration.get_ActivationActions()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.ActivationActionsGet">
            <summary>Sets the stub of IBindingConfiguration.get_ActivationActions()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.AttachBackingFieldToCondition">
            <summary>Attaches delegates to emulate StubIBindingConfiguration.Condition as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.AttachBackingFieldToIsImplicit">
            <summary>Attaches delegates to emulate StubIBindingConfiguration.IsImplicit as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.AttachBackingFieldToProviderCallback">
            <summary>Attaches delegates to emulate StubIBindingConfiguration.ProviderCallback as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.AttachBackingFieldToScopeCallback">
            <summary>Attaches delegates to emulate StubIBindingConfiguration.ScopeCallback as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.AttachBackingFieldToTarget">
            <summary>Attaches delegates to emulate StubIBindingConfiguration.Target as a property with a backing field.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#Condition">
            <summary>Sets the stub of IBindingConfiguration.get_Condition()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.ConditionGet">
            <summary>Sets the stub of IBindingConfiguration.get_Condition()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.ConditionSetFuncOfIRequestBoolean">
            <summary>Sets the stub of IBindingConfiguration.set_Condition(Func`2&lt;IRequest,Boolean&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#DeactivationActions">
            <summary>Sets the stub of IBindingConfiguration.get_DeactivationActions()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.DeactivationActionsGet">
            <summary>Sets the stub of IBindingConfiguration.get_DeactivationActions()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.GetProviderIContext">
            <summary>Sets the stub of IBindingConfiguration.GetProvider(IContext context)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.GetScopeIContext">
            <summary>Sets the stub of IBindingConfiguration.GetScope(IContext context)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#IsConditional">
            <summary>Sets the stub of IBindingConfiguration.get_IsConditional()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.IsConditionalGet">
            <summary>Sets the stub of IBindingConfiguration.get_IsConditional()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#IsImplicit">
            <summary>Sets the stub of IBindingConfiguration.get_IsImplicit()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.IsImplicitGet">
            <summary>Sets the stub of IBindingConfiguration.get_IsImplicit()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.IsImplicitSetBoolean">
            <summary>Sets the stub of IBindingConfiguration.set_IsImplicit(Boolean value)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.MatchesIRequest">
            <summary>Sets the stub of IBindingConfiguration.Matches(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#Metadata">
            <summary>Sets the stub of IBindingConfiguration.get_Metadata()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.MetadataGet">
            <summary>Sets the stub of IBindingConfiguration.get_Metadata()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#GetProvider(Ninject.Activation.IContext)">
            <summary>Sets the stub of IBindingConfiguration.GetProvider(IContext context)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#GetScope(Ninject.Activation.IContext)">
            <summary>Sets the stub of IBindingConfiguration.GetScope(IContext context)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#Matches(Ninject.Activation.IRequest)">
            <summary>Sets the stub of IBindingConfiguration.Matches(IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#Parameters">
            <summary>Sets the stub of IBindingConfiguration.get_Parameters()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.ParametersGet">
            <summary>Sets the stub of IBindingConfiguration.get_Parameters()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#ProviderCallback">
            <summary>Sets the stub of IBindingConfiguration.get_ProviderCallback()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.ProviderCallbackGet">
            <summary>Sets the stub of IBindingConfiguration.get_ProviderCallback()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.ProviderCallbackSetFuncOfIContextIProvider">
            <summary>Sets the stub of IBindingConfiguration.set_ProviderCallback(Func`2&lt;IContext,IProvider&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#ScopeCallback">
            <summary>Sets the stub of IBindingConfiguration.get_ScopeCallback()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.ScopeCallbackGet">
            <summary>Sets the stub of IBindingConfiguration.get_ScopeCallback()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.ScopeCallbackSetFuncOfIContextObject">
            <summary>Sets the stub of IBindingConfiguration.set_ScopeCallback(Func`2&lt;IContext,Object&gt; value)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.Ninject#Planning#Bindings#IBindingConfiguration#Target">
            <summary>Sets the stub of IBindingConfiguration.get_Target()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.TargetGet">
            <summary>Sets the stub of IBindingConfiguration.get_Target()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfiguration.TargetSetBindingTarget">
            <summary>Sets the stub of IBindingConfiguration.set_Target(BindingTarget value)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1">
            <summary>Stub type of Ninject.Planning.Bindings.IBindingConfigurationSyntax`1</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingConfigurationSyntax</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.InScopeFuncOfIContextObject">
            <summary>Sets the stub of IBindingInSyntax`1.InScope(Func`2&lt;IContext,Object&gt; scope)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.InSingletonScope">
            <summary>Sets the stub of IBindingInSyntax`1.InSingletonScope()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.InThreadScope">
            <summary>Sets the stub of IBindingInSyntax`1.InThreadScope()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.InTransientScope">
            <summary>Sets the stub of IBindingInSyntax`1.InTransientScope()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.NamedString">
            <summary>Sets the stub of IBindingNamedSyntax`1.Named(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InScope(System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingInSyntax`1.InScope(Func`2&lt;IContext,Object&gt; scope)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InSingletonScope">
            <summary>Sets the stub of IBindingInSyntax`1.InSingletonScope()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InThreadScope">
            <summary>Sets the stub of IBindingInSyntax`1.InThreadScope()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InTransientScope">
            <summary>Sets the stub of IBindingInSyntax`1.InTransientScope()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingNamedSyntax{T}#Named(System.String)">
            <summary>Sets the stub of IBindingNamedSyntax`1.Named(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#When(System.Func{Ninject.Activation.IRequest,System.Boolean})">
            <summary>Sets the stub of IBindingWhenSyntax`1.When(Func`2&lt;IRequest,Boolean&gt; condition)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenAnyAncestorMatches(System.Predicate{Ninject.Activation.IContext})">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenAnyAncestorNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenAnyAnchestorNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAnchestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenClassHas``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenClassHas()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenClassHas(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenClassHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedExactlyInto``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedExactlyInto(System.Type[])">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedExactlyInto(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type parent)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedInto``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedInto(System.Type[])">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedInto(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type parent)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenMemberHas``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenMemberHas()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenMemberHas(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenMemberHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenNoAncestorMatches(System.Predicate{Ninject.Activation.IContext})">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenNoAncestorNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenParentNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenParentNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenTargetHas``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenTargetHas()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenTargetHas(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenTargetHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument``1(``0)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithMetadata(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithParameter(Ninject.Parameters.IParameter)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.OnActivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.OnActivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.OnActivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.OnActivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.OnDeactivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.OnDeactivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.OnDeactivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.OnDeactivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenAnyAncestorMatchesPredicateOfIContext">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenAnyAncestorNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorNamed(String name)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenAnyAnchestorNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAnchestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenClassHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenClassHas()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenClassHasType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenClassHas(Type attributeType)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenFuncOfIRequestBoolean">
            <summary>Sets the stub of IBindingWhenSyntax`1.When(Func`2&lt;IRequest,Boolean&gt; condition)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenInjectedExactlyIntoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenInjectedExactlyInto()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenInjectedExactlyIntoType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type parent)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenInjectedExactlyIntoTypeArray">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenInjectedIntoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenInjectedInto()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenInjectedIntoType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type parent)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenInjectedIntoTypeArray">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenMemberHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenMemberHas()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenMemberHasType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenMemberHas(Type attributeType)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenNoAncestorMatchesPredicateOfIContext">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenNoAncestorNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorNamed(String name)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenParentNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenParentNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenTargetHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenTargetHas()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WhenTargetHasType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenTargetHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithConstructorArgumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithConstructorArgumentStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithConstructorArgumentStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithConstructorArgumentStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithConstructorArgumentTypeFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithConstructorArgumentTypeFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithConstructorArgumentTypeObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithMetadataStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithParameterIParameter">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithPropertyValueStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithPropertyValueStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingConfigurationSyntax`1.WithPropertyValueStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata">
            <summary>Stub type of Ninject.Planning.Bindings.IBindingMetadata</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.#ctor">
            <summary>Initializes a new instance of type StubIBindingMetadata</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.AttachBackingFieldToName">
            <summary>Attaches delegates to emulate StubIBindingMetadata.Name as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.GetOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets stubs of Get(String key)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.GetOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0,``0})">
            <summary>Sets stubs of Get(String key, !!0 defaultValue)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.HasString">
            <summary>Sets the stub of IBindingMetadata.Has(String key)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.Ninject#Planning#Bindings#IBindingMetadata#Name">
            <summary>Sets the stub of IBindingMetadata.get_Name()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.NameGet">
            <summary>Sets the stub of IBindingMetadata.get_Name()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.NameSetString">
            <summary>Sets the stub of IBindingMetadata.set_Name(String value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.Ninject#Planning#Bindings#IBindingMetadata#Get``1(System.String)">
            <summary>Sets the stub of IBindingMetadata.Get(String key)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.Ninject#Planning#Bindings#IBindingMetadata#Get``1(System.String,``0)">
            <summary>Sets the stub of IBindingMetadata.Get(String key, !!0 defaultValue)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.Ninject#Planning#Bindings#IBindingMetadata#Has(System.String)">
            <summary>Sets the stub of IBindingMetadata.Has(String key)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.Ninject#Planning#Bindings#IBindingMetadata#Set(System.String,System.Object)">
            <summary>Sets the stub of IBindingMetadata.Set(String key, Object value)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Fakes.StubIBindingMetadata.SetStringObject">
            <summary>Sets the stub of IBindingMetadata.Set(String key, Object value)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver">
            <summary>Shim type of Ninject.Planning.Bindings.Resolvers.DefaultValueBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.#ctor(Ninject.Planning.Bindings.Resolvers.DefaultValueBindingResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.AllInstances.ResolveMultimapOfTypeIBindingIRequest">
            <summary>Sets the shim of DefaultValueBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, IRequest request)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.Bind(Ninject.Planning.Bindings.Resolvers.IMissingBindingResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.Constructor">
            <summary>Sets the shim of DefaultValueBindingResolver.DefaultValueBindingResolver()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.HasDefaultValueITarget">
            <summary>Sets the shim of DefaultValueBindingResolver.HasDefaultValue(ITarget target)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver.ResolveMultimapOfTypeIBindingIRequest">
            <summary>Sets the shim of DefaultValueBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimDefaultValueBindingResolver._Resolveb__1IRequest">
            <summary>Sets the shim of DefaultValueBindingResolver.&lt;Resolve&gt;b__1(IRequest r)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver">
            <summary>Shim type of Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.#ctor(Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.AllInstances.ResolveMultimapOfTypeIBindingType">
            <summary>Sets the shim of OpenGenericBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, Type service)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.Bind(Ninject.Planning.Bindings.Resolvers.IBindingResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.Constructor">
            <summary>Sets the shim of OpenGenericBindingResolver.OpenGenericBindingResolver()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimOpenGenericBindingResolver.ResolveMultimapOfTypeIBindingType">
            <summary>Sets the shim of OpenGenericBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, Type service)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver">
            <summary>Shim type of Ninject.Planning.Bindings.Resolvers.SelfBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.#ctor(Ninject.Planning.Bindings.Resolvers.SelfBindingResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.AllInstances.ResolveMultimapOfTypeIBindingIRequest">
            <summary>Sets the shim of SelfBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.AllInstances.TypeIsSelfBindableType">
            <summary>Sets the shim of SelfBindingResolver.TypeIsSelfBindable(Type service)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.Bind(Ninject.Planning.Bindings.Resolvers.IMissingBindingResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.Constructor">
            <summary>Sets the shim of SelfBindingResolver.SelfBindingResolver()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.ResolveMultimapOfTypeIBindingIRequest">
            <summary>Sets the shim of SelfBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimSelfBindingResolver.TypeIsSelfBindableType">
            <summary>Sets the shim of SelfBindingResolver.TypeIsSelfBindable(Type service)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver">
            <summary>Shim type of Ninject.Planning.Bindings.Resolvers.StandardBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.#ctor(Ninject.Planning.Bindings.Resolvers.StandardBindingResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.AllInstances.ResolveMultimapOfTypeIBindingType">
            <summary>Sets the shim of StandardBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, Type service)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.Bind(Ninject.Planning.Bindings.Resolvers.IBindingResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.Constructor">
            <summary>Sets the shim of StandardBindingResolver.StandardBindingResolver()</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.ShimStandardBindingResolver.ResolveMultimapOfTypeIBindingType">
            <summary>Sets the shim of StandardBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, Type service)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.StubDefaultValueBindingResolver">
            <summary>Stub type of Ninject.Planning.Bindings.Resolvers.DefaultValueBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubDefaultValueBindingResolver.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubDefaultValueBindingResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubDefaultValueBindingResolver.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubDefaultValueBindingResolver.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubDefaultValueBindingResolver.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultValueBindingResolver</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubDefaultValueBindingResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubDefaultValueBindingResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.StubIBindingResolver">
            <summary>Stub type of Ninject.Planning.Bindings.Resolvers.IBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubIBindingResolver.#ctor">
            <summary>Initializes a new instance of type StubIBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubIBindingResolver.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIBindingResolver.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubIBindingResolver.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubIBindingResolver.Ninject#Planning#Bindings#Resolvers#IBindingResolver#Resolve(Ninject.Infrastructure.Multimap{System.Type,Ninject.Planning.Bindings.IBinding},System.Type)">
            <summary>Sets the stub of IBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, Type service)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubIBindingResolver.ResolveMultimapOfTypeIBindingType">
            <summary>Sets the stub of IBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, Type service)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubIBindingResolver.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubIBindingResolver.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubIBindingResolver.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubIBindingResolver.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.StubIMissingBindingResolver">
            <summary>Stub type of Ninject.Planning.Bindings.Resolvers.IMissingBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubIMissingBindingResolver.#ctor">
            <summary>Initializes a new instance of type StubIMissingBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubIMissingBindingResolver.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIMissingBindingResolver.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubIMissingBindingResolver.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubIMissingBindingResolver.Ninject#Planning#Bindings#Resolvers#IMissingBindingResolver#Resolve(Ninject.Infrastructure.Multimap{System.Type,Ninject.Planning.Bindings.IBinding},Ninject.Activation.IRequest)">
            <summary>Sets the stub of IMissingBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, IRequest request)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubIMissingBindingResolver.ResolveMultimapOfTypeIBindingIRequest">
            <summary>Sets the stub of IMissingBindingResolver.Resolve(Multimap`2&lt;Type,IBinding&gt; bindings, IRequest request)</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubIMissingBindingResolver.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubIMissingBindingResolver.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubIMissingBindingResolver.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubIMissingBindingResolver.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.StubOpenGenericBindingResolver">
            <summary>Stub type of Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubOpenGenericBindingResolver.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubOpenGenericBindingResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubOpenGenericBindingResolver.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubOpenGenericBindingResolver.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubOpenGenericBindingResolver.InitializeStub">
            <summary>Initializes a new instance of type StubOpenGenericBindingResolver</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubOpenGenericBindingResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubOpenGenericBindingResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.StubSelfBindingResolver">
            <summary>Stub type of Ninject.Planning.Bindings.Resolvers.SelfBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubSelfBindingResolver.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubSelfBindingResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubSelfBindingResolver.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubSelfBindingResolver.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubSelfBindingResolver.InitializeStub">
            <summary>Initializes a new instance of type StubSelfBindingResolver</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubSelfBindingResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubSelfBindingResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubSelfBindingResolver.TypeIsSelfBindable(System.Type)">
            <summary>Sets the stub of SelfBindingResolver.TypeIsSelfBindable(Type service)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubSelfBindingResolver.TypeIsSelfBindableType">
            <summary>Sets the stub of SelfBindingResolver.TypeIsSelfBindable(Type service)</summary>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.Fakes.StubStandardBindingResolver">
            <summary>Stub type of Ninject.Planning.Bindings.Resolvers.StandardBindingResolver</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubStandardBindingResolver.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubStandardBindingResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubStandardBindingResolver.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Planning.Bindings.Resolvers.Fakes.StubStandardBindingResolver.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.Fakes.StubStandardBindingResolver.InitializeStub">
            <summary>Initializes a new instance of type StubStandardBindingResolver</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubStandardBindingResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Bindings.Resolvers.Fakes.StubStandardBindingResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective">
            <summary>Shim type of Ninject.Planning.Directives.ConstructorInjectionDirective</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.#ctor(Ninject.Planning.Directives.ConstructorInjectionDirective)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.AllInstances.ConstructorGet">
            <summary>Sets the shim of ConstructorInjectionDirective.get_Constructor()</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.AllInstances.ConstructorSetConstructorInfo">
            <summary>Sets the shim of ConstructorInjectionDirective.set_Constructor(ConstructorInfo value)</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.Bind(Ninject.Planning.Directives.IDirective)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.ConstructorConstructorInfoConstructorInjector">
            <summary>Sets the shim of ConstructorInjectionDirective.ConstructorInjectionDirective(ConstructorInfo constructor, ConstructorInjector injector)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.ConstructorGet">
            <summary>Sets the shim of ConstructorInjectionDirective.get_Constructor()</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimConstructorInjectionDirective.ConstructorSetConstructorInfo">
            <summary>Sets the shim of ConstructorInjectionDirective.set_Constructor(ConstructorInfo value)</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirective">
            <summary>Shim type of Ninject.Planning.Directives.MethodInjectionDirective</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirective.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirective.#ctor(Ninject.Planning.Directives.MethodInjectionDirective)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirective.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirective.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirective.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirective.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirective.Bind(Ninject.Planning.Directives.IDirective)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirective.ConstructorMethodInfoMethodInjector">
            <summary>Sets the shim of MethodInjectionDirective.MethodInjectionDirective(MethodInfo method, MethodInjector injector)</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2">
            <summary>Shim type of Ninject.Planning.Directives.MethodInjectionDirectiveBase`2</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.#ctor(Ninject.Planning.Directives.MethodInjectionDirectiveBase{`0,`1})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.AllInstances.CreateTargetsFromParametersT0">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.CreateTargetsFromParameters(!0 method)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.AllInstances.InjectorGet">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.get_Injector()</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.AllInstances.InjectorSetT1">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.set_Injector(!1 value)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.AllInstances.TargetsGet">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.get_Targets()</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.AllInstances.TargetsSetITargetArray">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.set_Targets(ITarget[] value)</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.Bind(Ninject.Planning.Directives.IDirective)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.ConstructorT0T1">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.MethodInjectionDirectiveBase`2(!0 method, !1 injector)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.CreateTargetsFromParametersT0">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.CreateTargetsFromParameters(!0 method)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.InjectorGet">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.get_Injector()</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.InjectorSetT1">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.set_Injector(!1 value)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.TargetsGet">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.get_Targets()</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimMethodInjectionDirectiveBase`2.TargetsSetITargetArray">
            <summary>Sets the shim of MethodInjectionDirectiveBase`2.set_Targets(ITarget[] value)</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective">
            <summary>Shim type of Ninject.Planning.Directives.PropertyInjectionDirective</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.#ctor(Ninject.Planning.Directives.PropertyInjectionDirective)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.AllInstances.CreateTargetPropertyInfo">
            <summary>Sets the shim of PropertyInjectionDirective.CreateTarget(PropertyInfo propertyInfo)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.AllInstances.InjectorGet">
            <summary>Sets the shim of PropertyInjectionDirective.get_Injector()</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.AllInstances.InjectorSetPropertyInjector">
            <summary>Sets the shim of PropertyInjectionDirective.set_Injector(PropertyInjector value)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.AllInstances.TargetGet">
            <summary>Sets the shim of PropertyInjectionDirective.get_Target()</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.AllInstances.TargetSetITarget">
            <summary>Sets the shim of PropertyInjectionDirective.set_Target(ITarget value)</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.Bind(Ninject.Planning.Directives.IDirective)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.ConstructorPropertyInfoPropertyInjector">
            <summary>Sets the shim of PropertyInjectionDirective.PropertyInjectionDirective(PropertyInfo member, PropertyInjector injector)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.CreateTargetPropertyInfo">
            <summary>Sets the shim of PropertyInjectionDirective.CreateTarget(PropertyInfo propertyInfo)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.InjectorGet">
            <summary>Sets the shim of PropertyInjectionDirective.get_Injector()</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.InjectorSetPropertyInjector">
            <summary>Sets the shim of PropertyInjectionDirective.set_Injector(PropertyInjector value)</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.TargetGet">
            <summary>Sets the shim of PropertyInjectionDirective.get_Target()</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.ShimPropertyInjectionDirective.TargetSetITarget">
            <summary>Sets the shim of PropertyInjectionDirective.set_Target(ITarget value)</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.StubConstructorInjectionDirective">
            <summary>Stub type of Ninject.Planning.Directives.ConstructorInjectionDirective</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubConstructorInjectionDirective.#ctor(System.Reflection.ConstructorInfo,Ninject.Injection.ConstructorInjector)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubConstructorInjectionDirective.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubConstructorInjectionDirective.CreateTargetsFromParameters(System.Reflection.ConstructorInfo)">
            <summary>Sets the stub of MethodInjectionDirectiveBase`2.CreateTargetsFromParameters(!0 method)</summary>
        </member>
        <member name="F:Ninject.Planning.Directives.Fakes.StubConstructorInjectionDirective.CreateTargetsFromParametersConstructorInfo">
            <summary>Sets the stub of MethodInjectionDirectiveBase`2.CreateTargetsFromParameters(!0 method)</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubConstructorInjectionDirective.InitializeStub">
            <summary>Initializes a new instance of type StubConstructorInjectionDirective</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubConstructorInjectionDirective.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubConstructorInjectionDirective.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.StubIDirective">
            <summary>Stub type of Ninject.Planning.Directives.IDirective</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubIDirective.#ctor">
            <summary>Initializes a new instance of type StubIDirective</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirective">
            <summary>Stub type of Ninject.Planning.Directives.MethodInjectionDirective</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirective.#ctor(System.Reflection.MethodInfo,Ninject.Injection.MethodInjector)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirective.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirective.CreateTargetsFromParameters(System.Reflection.MethodInfo)">
            <summary>Sets the stub of MethodInjectionDirectiveBase`2.CreateTargetsFromParameters(!0 method)</summary>
        </member>
        <member name="F:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirective.CreateTargetsFromParametersMethodInfo">
            <summary>Sets the stub of MethodInjectionDirectiveBase`2.CreateTargetsFromParameters(!0 method)</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirective.InitializeStub">
            <summary>Initializes a new instance of type StubMethodInjectionDirective</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirective.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirective.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirectiveBase`2">
            <summary>Stub type of Ninject.Planning.Directives.MethodInjectionDirectiveBase`2</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirectiveBase`2.#ctor(`0,`1)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirectiveBase`2.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirectiveBase`2.CreateTargetsFromParameters(`0)">
            <summary>Sets the stub of MethodInjectionDirectiveBase`2.CreateTargetsFromParameters(!0 method)</summary>
        </member>
        <member name="F:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirectiveBase`2.CreateTargetsFromParametersT0">
            <summary>Sets the stub of MethodInjectionDirectiveBase`2.CreateTargetsFromParameters(!0 method)</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirectiveBase`2.InitializeStub">
            <summary>Initializes a new instance of type StubMethodInjectionDirectiveBase</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirectiveBase`2.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubMethodInjectionDirectiveBase`2.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Directives.Fakes.StubPropertyInjectionDirective">
            <summary>Stub type of Ninject.Planning.Directives.PropertyInjectionDirective</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubPropertyInjectionDirective.#ctor(System.Reflection.PropertyInfo,Ninject.Injection.PropertyInjector)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubPropertyInjectionDirective.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubPropertyInjectionDirective.CreateTarget(System.Reflection.PropertyInfo)">
            <summary>Sets the stub of PropertyInjectionDirective.CreateTarget(PropertyInfo propertyInfo)</summary>
        </member>
        <member name="F:Ninject.Planning.Directives.Fakes.StubPropertyInjectionDirective.CreateTargetPropertyInfo">
            <summary>Sets the stub of PropertyInjectionDirective.CreateTarget(PropertyInfo propertyInfo)</summary>
        </member>
        <member name="M:Ninject.Planning.Directives.Fakes.StubPropertyInjectionDirective.InitializeStub">
            <summary>Initializes a new instance of type StubPropertyInjectionDirective</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubPropertyInjectionDirective.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Directives.Fakes.StubPropertyInjectionDirective.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Fakes.ShimPlan">
            <summary>Shim type of Ninject.Planning.Plan</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.#ctor(Ninject.Planning.Plan)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.AddIDirective">
            <summary>Sets the shim of Plan.Add(IDirective directive)</summary>
        </member>
        <member name="T:Ninject.Planning.Fakes.ShimPlan.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.AllInstances.AddIDirective">
            <summary>Sets the shim of Plan.Add(IDirective directive)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.AllInstances.DirectivesGet">
            <summary>Sets the shim of Plan.get_Directives()</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.AllInstances.DirectivesSetICollectionOfIDirective">
            <summary>Sets the shim of Plan.set_Directives(ICollection`1&lt;IDirective&gt; value)</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.AllInstances.GetAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Plan,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of Plan.GetAll()</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.AllInstances.GetOneOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Plan,``0})">
            <summary>Sets the shim of Plan.GetOne()</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.AllInstances.HasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Planning.Plan,System.Boolean})">
            <summary>Sets the shim of Plan.Has()</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.AllInstances.TypeGet">
            <summary>Sets the shim of Plan.get_Type()</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.AllInstances.TypeSetType">
            <summary>Sets the shim of Plan.set_Type(Type value)</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.Bind(Ninject.Planning.IPlan)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.ConstructorType">
            <summary>Sets the shim of Plan.Plan(Type type)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.DirectivesGet">
            <summary>Sets the shim of Plan.get_Directives()</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.DirectivesSetICollectionOfIDirective">
            <summary>Sets the shim of Plan.set_Directives(ICollection`1&lt;IDirective&gt; value)</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.GetAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of Plan.GetAll()</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.GetOneOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets the shim of Plan.GetOne()</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlan.HasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Boolean})">
            <summary>Sets the shim of Plan.Has()</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.TypeGet">
            <summary>Sets the shim of Plan.get_Type()</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlan.TypeSetType">
            <summary>Sets the shim of Plan.set_Type(Type value)</summary>
        </member>
        <member name="T:Ninject.Planning.Fakes.ShimPlanner">
            <summary>Shim type of Ninject.Planning.Planner</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlanner.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlanner.#ctor(Ninject.Planning.Planner)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Fakes.ShimPlanner.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.AllInstances.CreateEmptyPlanType">
            <summary>Sets the shim of Planner.CreateEmptyPlan(Type type)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.AllInstances.CreateNewPlanType">
            <summary>Sets the shim of Planner.CreateNewPlan(Type type)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.AllInstances.GetPlanType">
            <summary>Sets the shim of Planner.GetPlan(Type type)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.AllInstances.StrategiesGet">
            <summary>Sets the shim of Planner.get_Strategies()</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.AllInstances.StrategiesSetIListOfIPlanningStrategy">
            <summary>Sets the shim of Planner.set_Strategies(IList`1&lt;IPlanningStrategy&gt; value)</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlanner.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlanner.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlanner.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlanner.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlanner.Bind(Ninject.Planning.IPlanner)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.ShimPlanner.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.ConstructorIEnumerableOfIPlanningStrategy">
            <summary>Sets the shim of Planner.Planner(IEnumerable`1&lt;IPlanningStrategy&gt; strategies)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.CreateEmptyPlanType">
            <summary>Sets the shim of Planner.CreateEmptyPlan(Type type)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.CreateNewPlanType">
            <summary>Sets the shim of Planner.CreateNewPlan(Type type)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.GetPlanType">
            <summary>Sets the shim of Planner.GetPlan(Type type)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.StrategiesGet">
            <summary>Sets the shim of Planner.get_Strategies()</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.ShimPlanner.StrategiesSetIListOfIPlanningStrategy">
            <summary>Sets the shim of Planner.set_Strategies(IList`1&lt;IPlanningStrategy&gt; value)</summary>
        </member>
        <member name="T:Ninject.Planning.Fakes.StubIPlan">
            <summary>Stub type of Ninject.Planning.IPlan</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlan.#ctor">
            <summary>Initializes a new instance of type StubIPlan</summary>
        </member>
        <member name="F:Ninject.Planning.Fakes.StubIPlan.AddIDirective">
            <summary>Sets the stub of IPlan.Add(IDirective directive)</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlan.GetAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets stubs of GetAll()</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlan.GetOneOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets stubs of GetOne()</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlan.HasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Boolean})">
            <summary>Sets stubs of Has()</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlan.Ninject#Planning#IPlan#Add(Ninject.Planning.Directives.IDirective)">
            <summary>Sets the stub of IPlan.Add(IDirective directive)</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlan.Ninject#Planning#IPlan#GetAll``1">
            <summary>Sets the stub of IPlan.GetAll()</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlan.Ninject#Planning#IPlan#GetOne``1">
            <summary>Sets the stub of IPlan.GetOne()</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlan.Ninject#Planning#IPlan#Has``1">
            <summary>Sets the stub of IPlan.Has()</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.StubIPlan.Ninject#Planning#IPlan#Type">
            <summary>Sets the stub of IPlan.get_Type()</summary>
        </member>
        <member name="F:Ninject.Planning.Fakes.StubIPlan.TypeGet">
            <summary>Sets the stub of IPlan.get_Type()</summary>
        </member>
        <member name="T:Ninject.Planning.Fakes.StubIPlanner">
            <summary>Stub type of Ninject.Planning.IPlanner</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlanner.#ctor">
            <summary>Initializes a new instance of type StubIPlanner</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlanner.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIPlanner.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Planning.Fakes.StubIPlanner.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Ninject.Planning.Fakes.StubIPlanner.GetPlanType">
            <summary>Sets the stub of IPlanner.GetPlan(Type type)</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlanner.Ninject#Planning#IPlanner#GetPlan(System.Type)">
            <summary>Sets the stub of IPlanner.GetPlan(Type type)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.StubIPlanner.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Planning.Fakes.StubIPlanner.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Planning.Fakes.StubIPlanner.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.StubIPlanner.Ninject#Planning#IPlanner#Strategies">
            <summary>Sets the stub of IPlanner.get_Strategies()</summary>
        </member>
        <member name="F:Ninject.Planning.Fakes.StubIPlanner.StrategiesGet">
            <summary>Sets the stub of IPlanner.get_Strategies()</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubIPlanner.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Planning.Fakes.StubPlan">
            <summary>Stub type of Ninject.Planning.Plan</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubPlan.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.StubPlan.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubPlan.InitializeStub">
            <summary>Initializes a new instance of type StubPlan</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.StubPlan.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.StubPlan.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Fakes.StubPlanner">
            <summary>Stub type of Ninject.Planning.Planner</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubPlanner.#ctor(System.Collections.Generic.IEnumerable{Ninject.Planning.Strategies.IPlanningStrategy})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.StubPlanner.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubPlanner.CreateEmptyPlan(System.Type)">
            <summary>Sets the stub of Planner.CreateEmptyPlan(Type type)</summary>
        </member>
        <member name="F:Ninject.Planning.Fakes.StubPlanner.CreateEmptyPlanType">
            <summary>Sets the stub of Planner.CreateEmptyPlan(Type type)</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubPlanner.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Planning.Fakes.StubPlanner.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Planning.Fakes.StubPlanner.InitializeStub">
            <summary>Initializes a new instance of type StubPlanner</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.StubPlanner.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Fakes.StubPlanner.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy">
            <summary>Shim type of Ninject.Planning.Strategies.ConstructorReflectionStrategy</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.#ctor(Ninject.Planning.Strategies.ConstructorReflectionStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.AllInstances.ExecuteIPlan">
            <summary>Sets the shim of ConstructorReflectionStrategy.Execute(IPlan plan)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.AllInstances.InjectorFactoryGet">
            <summary>Sets the shim of ConstructorReflectionStrategy.get_InjectorFactory()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.AllInstances.InjectorFactorySetIInjectorFactory">
            <summary>Sets the shim of ConstructorReflectionStrategy.set_InjectorFactory(IInjectorFactory value)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.AllInstances.SelectorGet">
            <summary>Sets the shim of ConstructorReflectionStrategy.get_Selector()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.AllInstances.SelectorSetISelector">
            <summary>Sets the shim of ConstructorReflectionStrategy.set_Selector(ISelector value)</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.Bind(Ninject.Planning.Strategies.IPlanningStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.ConstructorISelectorIInjectorFactory">
            <summary>Sets the shim of ConstructorReflectionStrategy.ConstructorReflectionStrategy(ISelector selector, IInjectorFactory injectorFactory)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.ExecuteIPlan">
            <summary>Sets the shim of ConstructorReflectionStrategy.Execute(IPlan plan)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.InjectorFactoryGet">
            <summary>Sets the shim of ConstructorReflectionStrategy.get_InjectorFactory()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.InjectorFactorySetIInjectorFactory">
            <summary>Sets the shim of ConstructorReflectionStrategy.set_InjectorFactory(IInjectorFactory value)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.SelectorGet">
            <summary>Sets the shim of ConstructorReflectionStrategy.get_Selector()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimConstructorReflectionStrategy.SelectorSetISelector">
            <summary>Sets the shim of ConstructorReflectionStrategy.set_Selector(ISelector value)</summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy">
            <summary>Shim type of Ninject.Planning.Strategies.MethodReflectionStrategy</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.#ctor(Ninject.Planning.Strategies.MethodReflectionStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.AllInstances.ExecuteIPlan">
            <summary>Sets the shim of MethodReflectionStrategy.Execute(IPlan plan)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.AllInstances.InjectorFactoryGet">
            <summary>Sets the shim of MethodReflectionStrategy.get_InjectorFactory()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.AllInstances.InjectorFactorySetIInjectorFactory">
            <summary>Sets the shim of MethodReflectionStrategy.set_InjectorFactory(IInjectorFactory value)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.AllInstances.SelectorGet">
            <summary>Sets the shim of MethodReflectionStrategy.get_Selector()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.AllInstances.SelectorSetISelector">
            <summary>Sets the shim of MethodReflectionStrategy.set_Selector(ISelector value)</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.Bind(Ninject.Planning.Strategies.IPlanningStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.ConstructorISelectorIInjectorFactory">
            <summary>Sets the shim of MethodReflectionStrategy.MethodReflectionStrategy(ISelector selector, IInjectorFactory injectorFactory)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.ExecuteIPlan">
            <summary>Sets the shim of MethodReflectionStrategy.Execute(IPlan plan)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.InjectorFactoryGet">
            <summary>Sets the shim of MethodReflectionStrategy.get_InjectorFactory()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.InjectorFactorySetIInjectorFactory">
            <summary>Sets the shim of MethodReflectionStrategy.set_InjectorFactory(IInjectorFactory value)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.SelectorGet">
            <summary>Sets the shim of MethodReflectionStrategy.get_Selector()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimMethodReflectionStrategy.SelectorSetISelector">
            <summary>Sets the shim of MethodReflectionStrategy.set_Selector(ISelector value)</summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy">
            <summary>Shim type of Ninject.Planning.Strategies.PropertyReflectionStrategy</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.#ctor(Ninject.Planning.Strategies.PropertyReflectionStrategy)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.AllInstances.ExecuteIPlan">
            <summary>Sets the shim of PropertyReflectionStrategy.Execute(IPlan plan)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.AllInstances.InjectorFactoryGet">
            <summary>Sets the shim of PropertyReflectionStrategy.get_InjectorFactory()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.AllInstances.InjectorFactorySetIInjectorFactory">
            <summary>Sets the shim of PropertyReflectionStrategy.set_InjectorFactory(IInjectorFactory value)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.AllInstances.SelectorGet">
            <summary>Sets the shim of PropertyReflectionStrategy.get_Selector()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.AllInstances.SelectorSetISelector">
            <summary>Sets the shim of PropertyReflectionStrategy.set_Selector(ISelector value)</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.Bind(Ninject.Planning.Strategies.IPlanningStrategy)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.ConstructorISelectorIInjectorFactory">
            <summary>Sets the shim of PropertyReflectionStrategy.PropertyReflectionStrategy(ISelector selector, IInjectorFactory injectorFactory)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.ExecuteIPlan">
            <summary>Sets the shim of PropertyReflectionStrategy.Execute(IPlan plan)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.InjectorFactoryGet">
            <summary>Sets the shim of PropertyReflectionStrategy.get_InjectorFactory()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.InjectorFactorySetIInjectorFactory">
            <summary>Sets the shim of PropertyReflectionStrategy.set_InjectorFactory(IInjectorFactory value)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.SelectorGet">
            <summary>Sets the shim of PropertyReflectionStrategy.get_Selector()</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.ShimPropertyReflectionStrategy.SelectorSetISelector">
            <summary>Sets the shim of PropertyReflectionStrategy.set_Selector(ISelector value)</summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.Fakes.StubConstructorReflectionStrategy">
            <summary>Stub type of Ninject.Planning.Strategies.ConstructorReflectionStrategy</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubConstructorReflectionStrategy.#ctor(Ninject.Selection.ISelector,Ninject.Injection.IInjectorFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.StubConstructorReflectionStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubConstructorReflectionStrategy.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Planning.Strategies.Fakes.StubConstructorReflectionStrategy.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubConstructorReflectionStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubConstructorReflectionStrategy</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.StubConstructorReflectionStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.StubConstructorReflectionStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.Fakes.StubIPlanningStrategy">
            <summary>Stub type of Ninject.Planning.Strategies.IPlanningStrategy</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubIPlanningStrategy.#ctor">
            <summary>Initializes a new instance of type StubIPlanningStrategy</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubIPlanningStrategy.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIPlanningStrategy.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Planning.Strategies.Fakes.StubIPlanningStrategy.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:Ninject.Planning.Strategies.Fakes.StubIPlanningStrategy.ExecuteIPlan">
            <summary>Sets the stub of IPlanningStrategy.Execute(IPlan plan)</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubIPlanningStrategy.Ninject#Planning#Strategies#IPlanningStrategy#Execute(Ninject.Planning.IPlan)">
            <summary>Sets the stub of IPlanningStrategy.Execute(IPlan plan)</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.StubIPlanningStrategy.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Planning.Strategies.Fakes.StubIPlanningStrategy.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Planning.Strategies.Fakes.StubIPlanningStrategy.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubIPlanningStrategy.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.Fakes.StubMethodReflectionStrategy">
            <summary>Stub type of Ninject.Planning.Strategies.MethodReflectionStrategy</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubMethodReflectionStrategy.#ctor(Ninject.Selection.ISelector,Ninject.Injection.IInjectorFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.StubMethodReflectionStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubMethodReflectionStrategy.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Planning.Strategies.Fakes.StubMethodReflectionStrategy.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubMethodReflectionStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubMethodReflectionStrategy</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.StubMethodReflectionStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.StubMethodReflectionStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.Fakes.StubPropertyReflectionStrategy">
            <summary>Stub type of Ninject.Planning.Strategies.PropertyReflectionStrategy</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubPropertyReflectionStrategy.#ctor(Ninject.Selection.ISelector,Ninject.Injection.IInjectorFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.StubPropertyReflectionStrategy.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubPropertyReflectionStrategy.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Planning.Strategies.Fakes.StubPropertyReflectionStrategy.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.Fakes.StubPropertyReflectionStrategy.InitializeStub">
            <summary>Initializes a new instance of type StubPropertyReflectionStrategy</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.StubPropertyReflectionStrategy.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.Fakes.StubPropertyReflectionStrategy.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Fakes.ShimParameterTarget">
            <summary>Shim type of Ninject.Planning.Targets.ParameterTarget</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimParameterTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimParameterTarget.#ctor(Ninject.Planning.Targets.ParameterTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Fakes.ShimParameterTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimParameterTarget.AllInstances.DefaultValueGet">
            <summary>Sets the shim of ParameterTarget.get_DefaultValue()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimParameterTarget.AllInstances.HasDefaultValueGet">
            <summary>Sets the shim of ParameterTarget.get_HasDefaultValue()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimParameterTarget.AllInstances.NameGet">
            <summary>Sets the shim of ParameterTarget.get_Name()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimParameterTarget.AllInstances.TypeGet">
            <summary>Sets the shim of ParameterTarget.get_Type()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimParameterTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimParameterTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimParameterTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimParameterTarget.Bind(Ninject.Planning.Targets.ITarget)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimParameterTarget.ConstructorMethodBaseParameterInfo">
            <summary>Sets the shim of ParameterTarget.ParameterTarget(MethodBase method, ParameterInfo site)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimParameterTarget.DefaultValueGet">
            <summary>Sets the shim of ParameterTarget.get_DefaultValue()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimParameterTarget.HasDefaultValueGet">
            <summary>Sets the shim of ParameterTarget.get_HasDefaultValue()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimParameterTarget.NameGet">
            <summary>Sets the shim of ParameterTarget.get_Name()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimParameterTarget.TypeGet">
            <summary>Sets the shim of ParameterTarget.get_Type()</summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Fakes.ShimPropertyTarget">
            <summary>Shim type of Ninject.Planning.Targets.PropertyTarget</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.#ctor(Ninject.Planning.Targets.PropertyTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.AllInstances.NameGet">
            <summary>Sets the shim of PropertyTarget.get_Name()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.AllInstances.TypeGet">
            <summary>Sets the shim of PropertyTarget.get_Type()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.Bind(Ninject.Planning.Targets.ITarget)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.ConstructorPropertyInfo">
            <summary>Sets the shim of PropertyTarget.PropertyTarget(PropertyInfo site)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.NameGet">
            <summary>Sets the shim of PropertyTarget.get_Name()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimPropertyTarget.TypeGet">
            <summary>Sets the shim of PropertyTarget.get_Type()</summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Fakes.ShimTarget`1">
            <summary>Shim type of Ninject.Planning.Targets.Target`1</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimTarget`1.#ctor(Ninject.Planning.Targets.Target{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.ConstraintGet">
            <summary>Sets the shim of Target`1.get_Constraint()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.DefaultValueGet">
            <summary>Sets the shim of Target`1.get_DefaultValue()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.GetCustomAttributesBoolean">
            <summary>Sets the shim of Target`1.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.GetCustomAttributesTypeBoolean">
            <summary>Sets the shim of Target`1.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.GetValueTypeIContext">
            <summary>Sets the shim of Target`1.GetValue(Type service, IContext parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.GetValuesTypeIContext">
            <summary>Sets the shim of Target`1.GetValues(Type service, IContext parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.HasDefaultValueGet">
            <summary>Sets the shim of Target`1.get_HasDefaultValue()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.IsDefinedTypeBoolean">
            <summary>Sets the shim of Target`1.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.IsOptionalGet">
            <summary>Sets the shim of Target`1.get_IsOptional()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.MemberGet">
            <summary>Sets the shim of Target`1.get_Member()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.MemberSetMemberInfo">
            <summary>Sets the shim of Target`1.set_Member(MemberInfo value)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.ReadConstraintFromTarget">
            <summary>Sets the shim of Target`1.ReadConstraintFromTarget()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.ReadOptionalFromTarget">
            <summary>Sets the shim of Target`1.ReadOptionalFromTarget()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.ResolveWithinIContext">
            <summary>Sets the shim of Target`1.ResolveWithin(IContext parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.SiteGet">
            <summary>Sets the shim of Target`1.get_Site()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.AllInstances.SiteSetT0">
            <summary>Sets the shim of Target`1.set_Site(!0 value)</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimTarget`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimTarget`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.ShimTarget`1.Bind(Ninject.Planning.Targets.ITarget)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.ConstraintGet">
            <summary>Sets the shim of Target`1.get_Constraint()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.ConstructorMemberInfoT0">
            <summary>Sets the shim of Target`1.Target`1(MemberInfo member, !0 site)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.DefaultValueGet">
            <summary>Sets the shim of Target`1.get_DefaultValue()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.GetCustomAttributesBoolean">
            <summary>Sets the shim of Target`1.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.GetCustomAttributesTypeBoolean">
            <summary>Sets the shim of Target`1.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.GetValueTypeIContext">
            <summary>Sets the shim of Target`1.GetValue(Type service, IContext parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.GetValuesTypeIContext">
            <summary>Sets the shim of Target`1.GetValues(Type service, IContext parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.HasDefaultValueGet">
            <summary>Sets the shim of Target`1.get_HasDefaultValue()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.IsDefinedTypeBoolean">
            <summary>Sets the shim of Target`1.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.IsOptionalGet">
            <summary>Sets the shim of Target`1.get_IsOptional()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.MemberGet">
            <summary>Sets the shim of Target`1.get_Member()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.MemberSetMemberInfo">
            <summary>Sets the shim of Target`1.set_Member(MemberInfo value)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.ReadConstraintFromTarget">
            <summary>Sets the shim of Target`1.ReadConstraintFromTarget()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.ReadOptionalFromTarget">
            <summary>Sets the shim of Target`1.ReadOptionalFromTarget()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.ResolveWithinIContext">
            <summary>Sets the shim of Target`1.ResolveWithin(IContext parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.SiteGet">
            <summary>Sets the shim of Target`1.get_Site()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.ShimTarget`1.SiteSetT0">
            <summary>Sets the shim of Target`1.set_Site(!0 value)</summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Fakes.StubITarget">
            <summary>Stub type of Ninject.Planning.Targets.ITarget</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubITarget.#ctor">
            <summary>Initializes a new instance of type StubITarget</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubITarget.Ninject#Planning#Targets#ITarget#Constraint">
            <summary>Sets the stub of ITarget.get_Constraint()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.ConstraintGet">
            <summary>Sets the stub of ITarget.get_Constraint()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubITarget.Ninject#Planning#Targets#ITarget#DefaultValue">
            <summary>Sets the stub of ITarget.get_DefaultValue()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.DefaultValueGet">
            <summary>Sets the stub of ITarget.get_DefaultValue()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.GetCustomAttributesBoolean">
            <summary>Sets the stub of ICustomAttributeProvider.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.GetCustomAttributesTypeBoolean">
            <summary>Sets the stub of ICustomAttributeProvider.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubITarget.Ninject#Planning#Targets#ITarget#HasDefaultValue">
            <summary>Sets the stub of ITarget.get_HasDefaultValue()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.HasDefaultValueGet">
            <summary>Sets the stub of ITarget.get_HasDefaultValue()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.IsDefinedTypeBoolean">
            <summary>Sets the stub of ICustomAttributeProvider.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubITarget.Ninject#Planning#Targets#ITarget#IsOptional">
            <summary>Sets the stub of ITarget.get_IsOptional()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.IsOptionalGet">
            <summary>Sets the stub of ITarget.get_IsOptional()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubITarget.Ninject#Planning#Targets#ITarget#Member">
            <summary>Sets the stub of ITarget.get_Member()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.MemberGet">
            <summary>Sets the stub of ITarget.get_Member()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubITarget.Ninject#Planning#Targets#ITarget#Name">
            <summary>Sets the stub of ITarget.get_Name()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.NameGet">
            <summary>Sets the stub of ITarget.get_Name()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubITarget.Ninject#Planning#Targets#ITarget#ResolveWithin(Ninject.Activation.IContext)">
            <summary>Sets the stub of ITarget.ResolveWithin(IContext parent)</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.ResolveWithinIContext">
            <summary>Sets the stub of ITarget.ResolveWithin(IContext parent)</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubITarget.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)">
            <summary>Sets the stub of ICustomAttributeProvider.GetCustomAttributes(Boolean inherit)</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubITarget.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Sets the stub of ICustomAttributeProvider.GetCustomAttributes(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubITarget.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)">
            <summary>Sets the stub of ICustomAttributeProvider.IsDefined(Type attributeType, Boolean inherit)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubITarget.Ninject#Planning#Targets#ITarget#Type">
            <summary>Sets the stub of ITarget.get_Type()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubITarget.TypeGet">
            <summary>Sets the stub of ITarget.get_Type()</summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Fakes.StubParameterTarget">
            <summary>Stub type of Ninject.Planning.Targets.ParameterTarget</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubParameterTarget.#ctor(System.Reflection.MethodBase,System.Reflection.ParameterInfo)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubParameterTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubParameterTarget.DefaultValue">
            <summary>Sets the stub of ParameterTarget.get_DefaultValue()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubParameterTarget.DefaultValueGet">
            <summary>Sets the stub of ParameterTarget.get_DefaultValue()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubParameterTarget.GetValue(System.Type,Ninject.Activation.IContext)">
            <summary>Sets the stub of Target`1.GetValue(Type service, IContext parent)</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubParameterTarget.GetValueTypeIContext">
            <summary>Sets the stub of Target`1.GetValue(Type service, IContext parent)</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubParameterTarget.GetValues(System.Type,Ninject.Activation.IContext)">
            <summary>Sets the stub of Target`1.GetValues(Type service, IContext parent)</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubParameterTarget.GetValuesTypeIContext">
            <summary>Sets the stub of Target`1.GetValues(Type service, IContext parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubParameterTarget.HasDefaultValue">
            <summary>Sets the stub of ParameterTarget.get_HasDefaultValue()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubParameterTarget.HasDefaultValueGet">
            <summary>Sets the stub of ParameterTarget.get_HasDefaultValue()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubParameterTarget.InitializeStub">
            <summary>Initializes a new instance of type StubParameterTarget</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubParameterTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubParameterTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubParameterTarget.Name">
            <summary>Sets the stub of ParameterTarget.get_Name()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubParameterTarget.NameGet">
            <summary>Sets the stub of ParameterTarget.get_Name()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubParameterTarget.ReadConstraintFromTarget">
            <summary>Sets the stub of Target`1.ReadConstraintFromTarget()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubParameterTarget.ReadConstraintFromTarget01">
            <summary>Sets the stub of Target`1.ReadConstraintFromTarget()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubParameterTarget.ReadOptionalFromTarget">
            <summary>Sets the stub of Target`1.ReadOptionalFromTarget()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubParameterTarget.ReadOptionalFromTarget01">
            <summary>Sets the stub of Target`1.ReadOptionalFromTarget()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubParameterTarget.Type">
            <summary>Sets the stub of ParameterTarget.get_Type()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubParameterTarget.TypeGet">
            <summary>Sets the stub of ParameterTarget.get_Type()</summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Fakes.StubPropertyTarget">
            <summary>Stub type of Ninject.Planning.Targets.PropertyTarget</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubPropertyTarget.#ctor(System.Reflection.PropertyInfo)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubPropertyTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubPropertyTarget.DefaultValue">
            <summary>Sets the stub of Target`1.get_DefaultValue()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubPropertyTarget.DefaultValueGet">
            <summary>Sets the stub of Target`1.get_DefaultValue()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubPropertyTarget.GetValue(System.Type,Ninject.Activation.IContext)">
            <summary>Sets the stub of Target`1.GetValue(Type service, IContext parent)</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubPropertyTarget.GetValueTypeIContext">
            <summary>Sets the stub of Target`1.GetValue(Type service, IContext parent)</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubPropertyTarget.GetValues(System.Type,Ninject.Activation.IContext)">
            <summary>Sets the stub of Target`1.GetValues(Type service, IContext parent)</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubPropertyTarget.GetValuesTypeIContext">
            <summary>Sets the stub of Target`1.GetValues(Type service, IContext parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubPropertyTarget.HasDefaultValue">
            <summary>Sets the stub of Target`1.get_HasDefaultValue()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubPropertyTarget.HasDefaultValueGet">
            <summary>Sets the stub of Target`1.get_HasDefaultValue()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubPropertyTarget.InitializeStub">
            <summary>Initializes a new instance of type StubPropertyTarget</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubPropertyTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubPropertyTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubPropertyTarget.Name">
            <summary>Sets the stub of PropertyTarget.get_Name()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubPropertyTarget.NameGet">
            <summary>Sets the stub of PropertyTarget.get_Name()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubPropertyTarget.ReadConstraintFromTarget">
            <summary>Sets the stub of Target`1.ReadConstraintFromTarget()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubPropertyTarget.ReadConstraintFromTarget01">
            <summary>Sets the stub of Target`1.ReadConstraintFromTarget()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubPropertyTarget.ReadOptionalFromTarget">
            <summary>Sets the stub of Target`1.ReadOptionalFromTarget()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubPropertyTarget.ReadOptionalFromTarget01">
            <summary>Sets the stub of Target`1.ReadOptionalFromTarget()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubPropertyTarget.Type">
            <summary>Sets the stub of PropertyTarget.get_Type()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubPropertyTarget.TypeGet">
            <summary>Sets the stub of PropertyTarget.get_Type()</summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Fakes.StubTarget`1">
            <summary>Stub type of Ninject.Planning.Targets.Target`1</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubTarget`1.#ctor(System.Reflection.MemberInfo,`0)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubTarget`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubTarget`1.DefaultValue">
            <summary>Sets the stub of Target`1.get_DefaultValue()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubTarget`1.DefaultValueGet">
            <summary>Sets the stub of Target`1.get_DefaultValue()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubTarget`1.GetValue(System.Type,Ninject.Activation.IContext)">
            <summary>Sets the stub of Target`1.GetValue(Type service, IContext parent)</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubTarget`1.GetValueTypeIContext">
            <summary>Sets the stub of Target`1.GetValue(Type service, IContext parent)</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubTarget`1.GetValues(System.Type,Ninject.Activation.IContext)">
            <summary>Sets the stub of Target`1.GetValues(Type service, IContext parent)</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubTarget`1.GetValuesTypeIContext">
            <summary>Sets the stub of Target`1.GetValues(Type service, IContext parent)</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubTarget`1.HasDefaultValue">
            <summary>Sets the stub of Target`1.get_HasDefaultValue()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubTarget`1.HasDefaultValueGet">
            <summary>Sets the stub of Target`1.get_HasDefaultValue()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubTarget`1.InitializeStub">
            <summary>Initializes a new instance of type StubTarget</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubTarget`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubTarget`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubTarget`1.Name">
            <summary>Sets the stub of Target`1.get_Name()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubTarget`1.NameGet">
            <summary>Sets the stub of Target`1.get_Name()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubTarget`1.ReadConstraintFromTarget">
            <summary>Sets the stub of Target`1.ReadConstraintFromTarget()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubTarget`1.ReadConstraintFromTarget01">
            <summary>Sets the stub of Target`1.ReadConstraintFromTarget()</summary>
        </member>
        <member name="M:Ninject.Planning.Targets.Fakes.StubTarget`1.ReadOptionalFromTarget">
            <summary>Sets the stub of Target`1.ReadOptionalFromTarget()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubTarget`1.ReadOptionalFromTarget01">
            <summary>Sets the stub of Target`1.ReadOptionalFromTarget()</summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Fakes.StubTarget`1.Type">
            <summary>Sets the stub of Target`1.get_Type()</summary>
        </member>
        <member name="F:Ninject.Planning.Targets.Fakes.StubTarget`1.TypeGet">
            <summary>Sets the stub of Target`1.get_Type()</summary>
        </member>
        <member name="T:Ninject.Selection.Fakes.ShimSelector">
            <summary>Shim type of Ninject.Selection.Selector</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.ShimSelector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.ShimSelector.#ctor(Ninject.Selection.Selector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Selection.Fakes.ShimSelector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances.ConstructorScorerGet">
            <summary>Sets the shim of Selector.get_ConstructorScorer()</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances.ConstructorScorerSetIConstructorScorer">
            <summary>Sets the shim of Selector.set_ConstructorScorer(IConstructorScorer value)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances.FlagsGet">
            <summary>Sets the shim of Selector.get_Flags()</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances.GetPrivatePropertiesType">
            <summary>Sets the shim of Selector.GetPrivateProperties(Type type)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances.InjectionHeuristicsGet">
            <summary>Sets the shim of Selector.get_InjectionHeuristics()</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances.InjectionHeuristicsSetICollectionOfIInjectionHeuristic">
            <summary>Sets the shim of Selector.set_InjectionHeuristics(ICollection`1&lt;IInjectionHeuristic&gt; value)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances.SelectConstructorsForInjectionType">
            <summary>Sets the shim of Selector.SelectConstructorsForInjection(Type type)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances.SelectMethodsForInjectionType">
            <summary>Sets the shim of Selector.SelectMethodsForInjection(Type type)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances.SelectPropertiesForInjectionType">
            <summary>Sets the shim of Selector.SelectPropertiesForInjection(Type type)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances._GetPrivatePropertiesb__6PropertyInfo">
            <summary>Sets the shim of Selector.&lt;GetPrivateProperties&gt;b__6(PropertyInfo p)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances._SelectMethodsForInjectionb__cMethodInfo">
            <summary>Sets the shim of Selector.&lt;SelectMethodsForInjection&gt;b__c(MethodInfo m)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances._SelectPropertiesForInjectionb__0PropertyInfo">
            <summary>Sets the shim of Selector.&lt;SelectPropertiesForInjection&gt;b__0(PropertyInfo p)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.AllInstances._SelectPropertiesForInjectionb__1PropertyInfo">
            <summary>Sets the shim of Selector.&lt;SelectPropertiesForInjection&gt;b__1(PropertyInfo p)</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.ShimSelector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.ShimSelector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.ShimSelector.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.ShimSelector.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.ShimSelector.Bind(Ninject.Selection.ISelector)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.ShimSelector.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.ConstructorIConstructorScorerIEnumerableOfIInjectionHeuristic">
            <summary>Sets the shim of Selector.Selector(IConstructorScorer constructorScorer, IEnumerable`1&lt;IInjectionHeuristic&gt; injectionHeuristics)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.ConstructorScorerGet">
            <summary>Sets the shim of Selector.get_ConstructorScorer()</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.ConstructorScorerSetIConstructorScorer">
            <summary>Sets the shim of Selector.set_ConstructorScorer(IConstructorScorer value)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.FlagsGet">
            <summary>Sets the shim of Selector.get_Flags()</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.GetPrivatePropertiesType">
            <summary>Sets the shim of Selector.GetPrivateProperties(Type type)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.InjectionHeuristicsGet">
            <summary>Sets the shim of Selector.get_InjectionHeuristics()</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.InjectionHeuristicsSetICollectionOfIInjectionHeuristic">
            <summary>Sets the shim of Selector.set_InjectionHeuristics(ICollection`1&lt;IInjectionHeuristic&gt; value)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.SelectConstructorsForInjectionType">
            <summary>Sets the shim of Selector.SelectConstructorsForInjection(Type type)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.SelectMethodsForInjectionType">
            <summary>Sets the shim of Selector.SelectMethodsForInjection(Type type)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector.SelectPropertiesForInjectionType">
            <summary>Sets the shim of Selector.SelectPropertiesForInjection(Type type)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector._GetPrivatePropertiesb__6PropertyInfo">
            <summary>Sets the shim of Selector.&lt;GetPrivateProperties&gt;b__6(PropertyInfo p)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector._SelectMethodsForInjectionb__cMethodInfo">
            <summary>Sets the shim of Selector.&lt;SelectMethodsForInjection&gt;b__c(MethodInfo m)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector._SelectPropertiesForInjectionb__0PropertyInfo">
            <summary>Sets the shim of Selector.&lt;SelectPropertiesForInjection&gt;b__0(PropertyInfo p)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.ShimSelector._SelectPropertiesForInjectionb__1PropertyInfo">
            <summary>Sets the shim of Selector.&lt;SelectPropertiesForInjection&gt;b__1(PropertyInfo p)</summary>
        </member>
        <member name="T:Ninject.Selection.Fakes.StubISelector">
            <summary>Stub type of Ninject.Selection.ISelector</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubISelector.#ctor">
            <summary>Initializes a new instance of type StubISelector</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubISelector.AttachBackingFieldToConstructorScorer">
            <summary>Attaches delegates to emulate StubISelector.ConstructorScorer as a property with a backing field.</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubISelector.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubISelector.Settings as a property with a backing field.</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.StubISelector.Ninject#Selection#ISelector#ConstructorScorer">
            <summary>Sets the stub of ISelector.get_ConstructorScorer()</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubISelector.ConstructorScorerGet">
            <summary>Sets the stub of ISelector.get_ConstructorScorer()</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubISelector.ConstructorScorerSetIConstructorScorer">
            <summary>Sets the stub of ISelector.set_ConstructorScorer(IConstructorScorer value)</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubISelector.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.StubISelector.Ninject#Selection#ISelector#InjectionHeuristics">
            <summary>Sets the stub of ISelector.get_InjectionHeuristics()</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubISelector.InjectionHeuristicsGet">
            <summary>Sets the stub of ISelector.get_InjectionHeuristics()</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubISelector.Ninject#Selection#ISelector#SelectConstructorsForInjection(System.Type)">
            <summary>Sets the stub of ISelector.SelectConstructorsForInjection(Type type)</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubISelector.Ninject#Selection#ISelector#SelectMethodsForInjection(System.Type)">
            <summary>Sets the stub of ISelector.SelectMethodsForInjection(Type type)</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubISelector.Ninject#Selection#ISelector#SelectPropertiesForInjection(System.Type)">
            <summary>Sets the stub of ISelector.SelectPropertiesForInjection(Type type)</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubISelector.SelectConstructorsForInjectionType">
            <summary>Sets the stub of ISelector.SelectConstructorsForInjection(Type type)</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubISelector.SelectMethodsForInjectionType">
            <summary>Sets the stub of ISelector.SelectMethodsForInjection(Type type)</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubISelector.SelectPropertiesForInjectionType">
            <summary>Sets the stub of ISelector.SelectPropertiesForInjection(Type type)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.StubISelector.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubISelector.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubISelector.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubISelector.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Selection.Fakes.StubSelector">
            <summary>Stub type of Ninject.Selection.Selector</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubSelector.#ctor(Ninject.Selection.Heuristics.IConstructorScorer,System.Collections.Generic.IEnumerable{Ninject.Selection.Heuristics.IInjectionHeuristic})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.StubSelector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubSelector.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubSelector.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.StubSelector.Flags">
            <summary>Sets the stub of Selector.get_Flags()</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubSelector.FlagsGet">
            <summary>Sets the stub of Selector.get_Flags()</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubSelector.InitializeStub">
            <summary>Initializes a new instance of type StubSelector</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.StubSelector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Selection.Fakes.StubSelector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubSelector.SelectConstructorsForInjection(System.Type)">
            <summary>Sets the stub of Selector.SelectConstructorsForInjection(Type type)</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubSelector.SelectConstructorsForInjectionType">
            <summary>Sets the stub of Selector.SelectConstructorsForInjection(Type type)</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubSelector.SelectMethodsForInjection(System.Type)">
            <summary>Sets the stub of Selector.SelectMethodsForInjection(Type type)</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubSelector.SelectMethodsForInjectionType">
            <summary>Sets the stub of Selector.SelectMethodsForInjection(Type type)</summary>
        </member>
        <member name="M:Ninject.Selection.Fakes.StubSelector.SelectPropertiesForInjection(System.Type)">
            <summary>Sets the stub of Selector.SelectPropertiesForInjection(Type type)</summary>
        </member>
        <member name="F:Ninject.Selection.Fakes.StubSelector.SelectPropertiesForInjectionType">
            <summary>Sets the stub of Selector.SelectPropertiesForInjection(Type type)</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector">
            <summary>Shim type of Ninject.Selection.Heuristics.SpecificConstructorSelector</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.#ctor(Ninject.Selection.Heuristics.SpecificConstructorSelector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.AllInstances.ScoreIContextConstructorInjectionDirective">
            <summary>Sets the shim of SpecificConstructorSelector.Score(IContext context, ConstructorInjectionDirective directive)</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.Bind(Ninject.Selection.Heuristics.IConstructorScorer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.ConstructorConstructorInfo">
            <summary>Sets the shim of SpecificConstructorSelector.SpecificConstructorSelector(ConstructorInfo constructorInfo)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimSpecificConstructorSelector.ScoreIContextConstructorInjectionDirective">
            <summary>Sets the shim of SpecificConstructorSelector.Score(IContext context, ConstructorInjectionDirective directive)</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer">
            <summary>Shim type of Ninject.Selection.Heuristics.StandardConstructorScorer</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.#ctor(Ninject.Selection.Heuristics.StandardConstructorScorer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.AllInstances.BindingExistsIContextITarget">
            <summary>Sets the shim of StandardConstructorScorer.BindingExists(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.AllInstances.BindingExistsIKernelIContextITarget">
            <summary>Sets the shim of StandardConstructorScorer.BindingExists(IKernel kernel, IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.AllInstances.GetTargetTypeITarget">
            <summary>Sets the shim of StandardConstructorScorer.GetTargetType(ITarget target)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.AllInstances.ParameterExistsIContextITarget">
            <summary>Sets the shim of StandardConstructorScorer.ParameterExists(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.AllInstances.ScoreIContextConstructorInjectionDirective">
            <summary>Sets the shim of StandardConstructorScorer.Score(IContext context, ConstructorInjectionDirective directive)</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.Bind(Ninject.Selection.Heuristics.IConstructorScorer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.BindingExistsIContextITarget">
            <summary>Sets the shim of StandardConstructorScorer.BindingExists(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.BindingExistsIKernelIContextITarget">
            <summary>Sets the shim of StandardConstructorScorer.BindingExists(IKernel kernel, IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.Constructor">
            <summary>Sets the shim of StandardConstructorScorer.StandardConstructorScorer()</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.GetTargetTypeITarget">
            <summary>Sets the shim of StandardConstructorScorer.GetTargetType(ITarget target)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.ParameterExistsIContextITarget">
            <summary>Sets the shim of StandardConstructorScorer.ParameterExists(IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer.ScoreIContextConstructorInjectionDirective">
            <summary>Sets the shim of StandardConstructorScorer.Score(IContext context, ConstructorInjectionDirective directive)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer._BindingExistsb__0IBinding">
            <summary>Sets the shim of StandardConstructorScorer.&lt;BindingExists&gt;b__0(IBinding b)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardConstructorScorer._GetTargetTypeb__2Type">
            <summary>Sets the shim of StandardConstructorScorer.&lt;GetTargetType&gt;b__2(Type type)</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic">
            <summary>Shim type of Ninject.Selection.Heuristics.StandardInjectionHeuristic</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.#ctor(Ninject.Selection.Heuristics.StandardInjectionHeuristic)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.AllInstances.ShouldInjectMemberInfo">
            <summary>Sets the shim of StandardInjectionHeuristic.ShouldInject(MemberInfo member)</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.Bind(Ninject.Components.INinjectComponent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.Bind(Ninject.Selection.Heuristics.IInjectionHeuristic)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.Constructor">
            <summary>Sets the shim of StandardInjectionHeuristic.StandardInjectionHeuristic()</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.ShimStandardInjectionHeuristic.ShouldInjectMemberInfo">
            <summary>Sets the shim of StandardInjectionHeuristic.ShouldInject(MemberInfo member)</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.StubIConstructorScorer">
            <summary>Stub type of Ninject.Selection.Heuristics.IConstructorScorer</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubIConstructorScorer.#ctor">
            <summary>Initializes a new instance of type StubIConstructorScorer</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubIConstructorScorer.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIConstructorScorer.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubIConstructorScorer.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubIConstructorScorer.Ninject#Selection#Heuristics#IConstructorScorer#Score(Ninject.Activation.IContext,Ninject.Planning.Directives.ConstructorInjectionDirective)">
            <summary>Sets the stub of IConstructorScorer.Score(IContext context, ConstructorInjectionDirective directive)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubIConstructorScorer.ScoreIContextConstructorInjectionDirective">
            <summary>Sets the stub of IConstructorScorer.Score(IContext context, ConstructorInjectionDirective directive)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubIConstructorScorer.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubIConstructorScorer.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubIConstructorScorer.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubIConstructorScorer.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.StubIInjectionHeuristic">
            <summary>Stub type of Ninject.Selection.Heuristics.IInjectionHeuristic</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubIInjectionHeuristic.#ctor">
            <summary>Initializes a new instance of type StubIInjectionHeuristic</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubIInjectionHeuristic.AttachBackingFieldToSettings">
            <summary>Attaches delegates to emulate StubIInjectionHeuristic.Settings as a property with a backing field.</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubIInjectionHeuristic.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubIInjectionHeuristic.Ninject#Selection#Heuristics#IInjectionHeuristic#ShouldInject(System.Reflection.MemberInfo)">
            <summary>Sets the stub of IInjectionHeuristic.ShouldInject(MemberInfo member)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubIInjectionHeuristic.Ninject#Components#INinjectComponent#Settings">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubIInjectionHeuristic.SettingsGet">
            <summary>Sets the stub of INinjectComponent.get_Settings()</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubIInjectionHeuristic.SettingsSetINinjectSettings">
            <summary>Sets the stub of INinjectComponent.set_Settings(INinjectSettings value)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubIInjectionHeuristic.ShouldInjectMemberInfo">
            <summary>Sets the stub of IInjectionHeuristic.ShouldInject(MemberInfo member)</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubIInjectionHeuristic.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.StubSpecificConstructorSelector">
            <summary>Stub type of Ninject.Selection.Heuristics.SpecificConstructorSelector</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubSpecificConstructorSelector.#ctor(System.Reflection.ConstructorInfo)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubSpecificConstructorSelector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubSpecificConstructorSelector.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubSpecificConstructorSelector.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubSpecificConstructorSelector.InitializeStub">
            <summary>Initializes a new instance of type StubSpecificConstructorSelector</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubSpecificConstructorSelector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubSpecificConstructorSelector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubSpecificConstructorSelector.Score(Ninject.Activation.IContext,Ninject.Planning.Directives.ConstructorInjectionDirective)">
            <summary>Sets the stub of SpecificConstructorSelector.Score(IContext context, ConstructorInjectionDirective directive)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubSpecificConstructorSelector.ScoreIContextConstructorInjectionDirective">
            <summary>Sets the stub of SpecificConstructorSelector.Score(IContext context, ConstructorInjectionDirective directive)</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer">
            <summary>Stub type of Ninject.Selection.Heuristics.StandardConstructorScorer</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.BindingExists(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>Sets the stub of StandardConstructorScorer.BindingExists(IContext context, ITarget target)</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.BindingExists(Ninject.IKernel,Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>Sets the stub of StandardConstructorScorer.BindingExists(IKernel kernel, IContext context, ITarget target)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.BindingExistsIContextITarget">
            <summary>Sets the stub of StandardConstructorScorer.BindingExists(IContext context, ITarget target)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.BindingExistsIKernelIContextITarget">
            <summary>Sets the stub of StandardConstructorScorer.BindingExists(IKernel kernel, IContext context, ITarget target)</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.InitializeStub">
            <summary>Initializes a new instance of type StubStandardConstructorScorer</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.ParameterExists(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>Sets the stub of StandardConstructorScorer.ParameterExists(IContext context, ITarget target)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.ParameterExistsIContextITarget">
            <summary>Sets the stub of StandardConstructorScorer.ParameterExists(IContext context, ITarget target)</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.Score(Ninject.Activation.IContext,Ninject.Planning.Directives.ConstructorInjectionDirective)">
            <summary>Sets the stub of StandardConstructorScorer.Score(IContext context, ConstructorInjectionDirective directive)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubStandardConstructorScorer.ScoreIContextConstructorInjectionDirective">
            <summary>Sets the stub of StandardConstructorScorer.Score(IContext context, ConstructorInjectionDirective directive)</summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.Fakes.StubStandardInjectionHeuristic">
            <summary>Stub type of Ninject.Selection.Heuristics.StandardInjectionHeuristic</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardInjectionHeuristic.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubStandardInjectionHeuristic.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardInjectionHeuristic.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubStandardInjectionHeuristic.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardInjectionHeuristic.InitializeStub">
            <summary>Initializes a new instance of type StubStandardInjectionHeuristic</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubStandardInjectionHeuristic.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Selection.Heuristics.Fakes.StubStandardInjectionHeuristic.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.Fakes.StubStandardInjectionHeuristic.ShouldInject(System.Reflection.MemberInfo)">
            <summary>Sets the stub of StandardInjectionHeuristic.ShouldInject(MemberInfo member)</summary>
        </member>
        <member name="F:Ninject.Selection.Heuristics.Fakes.StubStandardInjectionHeuristic.ShouldInjectMemberInfo">
            <summary>Sets the stub of StandardInjectionHeuristic.ShouldInject(MemberInfo member)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.ShimBindingRoot">
            <summary>Shim type of Ninject.Syntax.BindingRoot</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.#ctor(Ninject.Syntax.BindingRoot)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.BindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.BindingRoot,Ninject.Syntax.IBindingToSyntax{``0}})">
            <summary>Sets the shim of BindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.BindOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.BindingRoot,Ninject.Syntax.IBindingToSyntax{``0,``1}})">
            <summary>Sets the shim of BindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.BindOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.BindingRoot,Ninject.Syntax.IBindingToSyntax{``0,``1,``2}})">
            <summary>Sets the shim of BindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.BindOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.BindingRoot,Ninject.Syntax.IBindingToSyntax{``0,``1,``2,``3}})">
            <summary>Sets the shim of BindingRoot.Bind()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.BindTypeArray">
            <summary>Sets the shim of BindingRoot.Bind(Type[] services)</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingRoot.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.RebindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.BindingRoot,Ninject.Syntax.IBindingToSyntax{``0}})">
            <summary>Sets the shim of BindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.RebindOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.BindingRoot,Ninject.Syntax.IBindingToSyntax{``0,``1}})">
            <summary>Sets the shim of BindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.RebindOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.BindingRoot,Ninject.Syntax.IBindingToSyntax{``0,``1,``2}})">
            <summary>Sets the shim of BindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.RebindOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.BindingRoot,Ninject.Syntax.IBindingToSyntax{``0,``1,``2,``3}})">
            <summary>Sets the shim of BindingRoot.Rebind()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.RebindTypeArray">
            <summary>Sets the shim of BindingRoot.Rebind(Type[] services)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.AllInstances.UnbindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Ninject.Syntax.BindingRoot})">
            <summary>Sets the shim of BindingRoot.Unbind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.ShimBindingRoot.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.Bind(Ninject.Infrastructure.Disposal.IDisposableObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.Bind(Ninject.Syntax.IBindingRoot)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.Bind(Ninject.Syntax.IFluentSyntax)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.BindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0}})">
            <summary>Sets the shim of BindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.BindOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1}})">
            <summary>Sets the shim of BindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.BindOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2}})">
            <summary>Sets the shim of BindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.BindOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2,``3}})">
            <summary>Sets the shim of BindingRoot.Bind()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.ShimBindingRoot.BindTypeArray">
            <summary>Sets the shim of BindingRoot.Bind(Type[] services)</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.ShimBindingRoot.Constructor">
            <summary>Sets the shim of BindingRoot.BindingRoot()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.ShimBindingRoot.NinjectSyntaxIFluentSyntaxGetType">
            <summary>Sets the shim of BindingRoot.Ninject.Syntax.IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.RebindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0}})">
            <summary>Sets the shim of BindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.RebindOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1}})">
            <summary>Sets the shim of BindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.RebindOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2}})">
            <summary>Sets the shim of BindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.RebindOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2,``3}})">
            <summary>Sets the shim of BindingRoot.Rebind()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.ShimBindingRoot.RebindTypeArray">
            <summary>Sets the shim of BindingRoot.Rebind(Type[] services)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.ShimBindingRoot.UnbindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets the shim of BindingRoot.Unbind()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.ShimBindingRoot._Bindb__0Type">
            <summary>Sets the shim of BindingRoot.&lt;Bind&gt;b__0(Type service)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubBindingRoot">
            <summary>Stub type of Ninject.Syntax.BindingRoot</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubBindingRoot.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubBindingRoot.AddBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of BindingRoot.AddBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubBindingRoot.AddBindingIBinding">
            <summary>Sets the stub of BindingRoot.AddBinding(IBinding binding)</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubBindingRoot.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubBindingRoot.Dispose(System.Boolean)">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubBindingRoot.DisposeBoolean">
            <summary>Sets the stub of DisposableObject.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubBindingRoot.InitializeStub">
            <summary>Initializes a new instance of type StubBindingRoot</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubBindingRoot.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubBindingRoot.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubBindingRoot.KernelInstance">
            <summary>Sets the stub of BindingRoot.get_KernelInstance()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubBindingRoot.KernelInstanceGet">
            <summary>Sets the stub of BindingRoot.get_KernelInstance()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubBindingRoot.RemoveBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of BindingRoot.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubBindingRoot.RemoveBindingIBinding">
            <summary>Sets the stub of BindingRoot.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubBindingRoot.Unbind(System.Type)">
            <summary>Sets the stub of BindingRoot.Unbind(Type service)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubBindingRoot.UnbindType">
            <summary>Sets the stub of BindingRoot.Unbind(Type service)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1">
            <summary>Stub type of Ninject.Syntax.IBindingInNamedWithOrOnSyntax`1</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingInNamedWithOrOnSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.InScopeFuncOfIContextObject">
            <summary>Sets the stub of IBindingInSyntax`1.InScope(Func`2&lt;IContext,Object&gt; scope)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.InSingletonScope">
            <summary>Sets the stub of IBindingInSyntax`1.InSingletonScope()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.InThreadScope">
            <summary>Sets the stub of IBindingInSyntax`1.InThreadScope()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.InTransientScope">
            <summary>Sets the stub of IBindingInSyntax`1.InTransientScope()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.NamedString">
            <summary>Sets the stub of IBindingNamedSyntax`1.Named(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InScope(System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingInSyntax`1.InScope(Func`2&lt;IContext,Object&gt; scope)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InSingletonScope">
            <summary>Sets the stub of IBindingInSyntax`1.InSingletonScope()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InThreadScope">
            <summary>Sets the stub of IBindingInSyntax`1.InThreadScope()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InTransientScope">
            <summary>Sets the stub of IBindingInSyntax`1.InTransientScope()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingNamedSyntax{T}#Named(System.String)">
            <summary>Sets the stub of IBindingNamedSyntax`1.Named(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument``1(``0)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithMetadata(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithParameter(Ninject.Parameters.IParameter)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.OnActivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.OnActivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.OnActivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.OnActivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.OnDeactivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.OnDeactivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.OnDeactivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.OnDeactivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithConstructorArgumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithConstructorArgumentStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithConstructorArgumentStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithConstructorArgumentStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithConstructorArgumentTypeFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithConstructorArgumentTypeFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithConstructorArgumentTypeObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithMetadataStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithParameterIParameter">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithPropertyValueStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithPropertyValueStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInNamedWithOrOnSyntax`1.WithPropertyValueStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingInSyntax`1">
            <summary>Stub type of Ninject.Syntax.IBindingInSyntax`1</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingInSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.InScopeFuncOfIContextObject">
            <summary>Sets the stub of IBindingInSyntax`1.InScope(Func`2&lt;IContext,Object&gt; scope)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.InSingletonScope">
            <summary>Sets the stub of IBindingInSyntax`1.InSingletonScope()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.InThreadScope">
            <summary>Sets the stub of IBindingInSyntax`1.InThreadScope()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.InTransientScope">
            <summary>Sets the stub of IBindingInSyntax`1.InTransientScope()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InScope(System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingInSyntax`1.InScope(Func`2&lt;IContext,Object&gt; scope)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InSingletonScope">
            <summary>Sets the stub of IBindingInSyntax`1.InSingletonScope()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InThreadScope">
            <summary>Sets the stub of IBindingInSyntax`1.InThreadScope()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InTransientScope">
            <summary>Sets the stub of IBindingInSyntax`1.InTransientScope()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingInSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1">
            <summary>Stub type of Ninject.Syntax.IBindingNamedSyntax`1</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingNamedSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.NamedString">
            <summary>Sets the stub of IBindingNamedSyntax`1.Named(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.Ninject#Syntax#IBindingNamedSyntax{T}#Named(System.String)">
            <summary>Sets the stub of IBindingNamedSyntax`1.Named(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1">
            <summary>Stub type of Ninject.Syntax.IBindingNamedWithOrOnSyntax`1</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingNamedWithOrOnSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.NamedString">
            <summary>Sets the stub of IBindingNamedSyntax`1.Named(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingNamedSyntax{T}#Named(System.String)">
            <summary>Sets the stub of IBindingNamedSyntax`1.Named(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument``1(``0)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithMetadata(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithParameter(Ninject.Parameters.IParameter)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.OnActivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.OnActivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.OnActivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.OnActivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.OnDeactivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.OnDeactivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.OnDeactivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.OnDeactivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithConstructorArgumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithConstructorArgumentStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithConstructorArgumentStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithConstructorArgumentStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithConstructorArgumentTypeFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithConstructorArgumentTypeFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithConstructorArgumentTypeObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithMetadataStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithParameterIParameter">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithPropertyValueStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithPropertyValueStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingNamedWithOrOnSyntax`1.WithPropertyValueStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1">
            <summary>Stub type of Ninject.Syntax.IBindingOnSyntax`1</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingOnSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.OnActivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.OnActivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.OnActivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.OnActivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.OnDeactivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.OnDeactivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.OnDeactivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.OnDeactivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingOnSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingRoot">
            <summary>Stub type of Ninject.Syntax.IBindingRoot</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.#ctor">
            <summary>Initializes a new instance of type StubIBindingRoot</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingRoot.AddBindingIBinding">
            <summary>Sets the stub of IBindingRoot.AddBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.BindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0}})">
            <summary>Sets stubs of Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.BindOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1}})">
            <summary>Sets stubs of Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.BindOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2}})">
            <summary>Sets stubs of Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.BindOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2,``3}})">
            <summary>Sets stubs of Bind()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingRoot.BindTypeArray">
            <summary>Sets the stub of IBindingRoot.Bind(Type[] services)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingRoot.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingRoot.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingRoot.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#AddBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of IBindingRoot.AddBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Bind(System.Type[])">
            <summary>Sets the stub of IBindingRoot.Bind(Type[] services)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Bind``1">
            <summary>Sets the stub of IBindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Bind``2">
            <summary>Sets the stub of IBindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Bind``3">
            <summary>Sets the stub of IBindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Bind``4">
            <summary>Sets the stub of IBindingRoot.Bind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Rebind(System.Type[])">
            <summary>Sets the stub of IBindingRoot.Rebind(Type[] services)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Rebind``1">
            <summary>Sets the stub of IBindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Rebind``2">
            <summary>Sets the stub of IBindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Rebind``3">
            <summary>Sets the stub of IBindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Rebind``4">
            <summary>Sets the stub of IBindingRoot.Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#RemoveBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>Sets the stub of IBindingRoot.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Unbind``1">
            <summary>Sets the stub of IBindingRoot.Unbind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IBindingRoot#Unbind(System.Type)">
            <summary>Sets the stub of IBindingRoot.Unbind(Type service)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.RebindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0}})">
            <summary>Sets stubs of Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.RebindOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1}})">
            <summary>Sets stubs of Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.RebindOf3``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2}})">
            <summary>Sets stubs of Rebind()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.RebindOf4``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingToSyntax{``0,``1,``2,``3}})">
            <summary>Sets stubs of Rebind()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingRoot.RebindTypeArray">
            <summary>Sets the stub of IBindingRoot.Rebind(Type[] services)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingRoot.RemoveBindingIBinding">
            <summary>Sets the stub of IBindingRoot.RemoveBinding(IBinding binding)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingRoot.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingRoot.UnbindOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>Sets stubs of Unbind()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingRoot.UnbindType">
            <summary>Sets the stub of IBindingRoot.Unbind(Type service)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingSyntax">
            <summary>Stub type of Ninject.Syntax.IBindingSyntax</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingSyntax.#ctor">
            <summary>Initializes a new instance of type StubIBindingSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingSyntax.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingSyntax.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingSyntax.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingSyntax.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingSyntax.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingSyntax.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingSyntax.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingSyntax.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingSyntax.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingSyntax.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingSyntax.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingSyntax.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingToSyntax`1">
            <summary>Stub type of Ninject.Syntax.IBindingToSyntax`1</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingToSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IBindingToSyntax{T1}#To``1">
            <summary>Sets the stub of IBindingToSyntax`1.To()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IBindingToSyntax{T1}#To(System.Type)">
            <summary>Sets the stub of IBindingToSyntax`1.To(Type implementation)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IBindingToSyntax{T1}#ToConstant``1(``0)">
            <summary>Sets the stub of IBindingToSyntax`1.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IBindingToSyntax{T1}#ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>Sets the stub of IBindingToSyntax`1.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IBindingToSyntax{T1}#ToMethod(System.Func{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingToSyntax`1.ToMethod(Func`2&lt;IContext,!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IBindingToSyntax{T1}#ToMethod``1(System.Func{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingToSyntax`1.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IBindingToSyntax{T1}#ToProvider``1(Ninject.Activation.IProvider{``0})">
            <summary>Sets the stub of IBindingToSyntax`1.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IBindingToSyntax{T1}#ToProvider``1">
            <summary>Sets the stub of IBindingToSyntax`1.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IBindingToSyntax{T1}#ToProvider(System.Type)">
            <summary>Sets the stub of IBindingToSyntax`1.ToProvider(Type providerType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IBindingToSyntax{T1}#ToSelf">
            <summary>Sets the stub of IBindingToSyntax`1.ToSelf()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToMethodFuncOfIContextT0">
            <summary>Sets the stub of IBindingToSyntax`1.ToMethod(Func`2&lt;IContext,!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of To()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToProviderType">
            <summary>Sets the stub of IBindingToSyntax`1.ToProvider(Type providerType)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToSelf">
            <summary>Sets the stub of IBindingToSyntax`1.ToSelf()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`1.ToType">
            <summary>Sets the stub of IBindingToSyntax`1.To(Type implementation)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingToSyntax`2">
            <summary>Stub type of Ninject.Syntax.IBindingToSyntax`2</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.#ctor">
            <summary>Initializes a new instance of type StubIBindingToSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IBindingToSyntax{T1,T2}#To``1">
            <summary>Sets the stub of IBindingToSyntax`2.To()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IBindingToSyntax{T1,T2}#To(System.Type)">
            <summary>Sets the stub of IBindingToSyntax`2.To(Type implementation)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IBindingToSyntax{T1,T2}#ToConstant``1(``0)">
            <summary>Sets the stub of IBindingToSyntax`2.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IBindingToSyntax{T1,T2}#ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>Sets the stub of IBindingToSyntax`2.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IBindingToSyntax{T1,T2}#ToMethod``1(System.Func{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingToSyntax`2.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IBindingToSyntax{T1,T2}#ToProvider``1(Ninject.Activation.IProvider{``0})">
            <summary>Sets the stub of IBindingToSyntax`2.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IBindingToSyntax{T1,T2}#ToProvider``2">
            <summary>Sets the stub of IBindingToSyntax`2.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IBindingToSyntax{T1,T2}#ToProvider``1">
            <summary>Sets the stub of IBindingToSyntax`2.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IBindingToSyntax{T1,T2}#ToProvider(System.Type)">
            <summary>Sets the stub of IBindingToSyntax`2.ToProvider(Type providerType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of To()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{System.Object}})">
            <summary>Sets stubs of ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.ToProviderOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets stubs of ToProvider()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.ToProviderType">
            <summary>Sets the stub of IBindingToSyntax`2.ToProvider(Type providerType)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`2.ToType">
            <summary>Sets the stub of IBindingToSyntax`2.To(Type implementation)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingToSyntax`3">
            <summary>Stub type of Ninject.Syntax.IBindingToSyntax`3</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.#ctor">
            <summary>Initializes a new instance of type StubIBindingToSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IBindingToSyntax{T1,T2,T3}#To``1">
            <summary>Sets the stub of IBindingToSyntax`3.To()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IBindingToSyntax{T1,T2,T3}#To(System.Type)">
            <summary>Sets the stub of IBindingToSyntax`3.To(Type implementation)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IBindingToSyntax{T1,T2,T3}#ToConstant``1(``0)">
            <summary>Sets the stub of IBindingToSyntax`3.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IBindingToSyntax{T1,T2,T3}#ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>Sets the stub of IBindingToSyntax`3.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IBindingToSyntax{T1,T2,T3}#ToMethod``1(System.Func{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingToSyntax`3.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IBindingToSyntax{T1,T2,T3}#ToProvider``1(Ninject.Activation.IProvider{``0})">
            <summary>Sets the stub of IBindingToSyntax`3.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IBindingToSyntax{T1,T2,T3}#ToProvider``2">
            <summary>Sets the stub of IBindingToSyntax`3.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IBindingToSyntax{T1,T2,T3}#ToProvider``1">
            <summary>Sets the stub of IBindingToSyntax`3.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IBindingToSyntax{T1,T2,T3}#ToProvider(System.Type)">
            <summary>Sets the stub of IBindingToSyntax`3.ToProvider(Type providerType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of To()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{System.Object}})">
            <summary>Sets stubs of ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.ToProviderOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets stubs of ToProvider()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.ToProviderType">
            <summary>Sets the stub of IBindingToSyntax`3.ToProvider(Type providerType)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`3.ToType">
            <summary>Sets the stub of IBindingToSyntax`3.To(Type implementation)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingToSyntax`4">
            <summary>Stub type of Ninject.Syntax.IBindingToSyntax`4</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.#ctor">
            <summary>Initializes a new instance of type StubIBindingToSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IBindingToSyntax{T1,T2,T3,T4}#To``1">
            <summary>Sets the stub of IBindingToSyntax`4.To()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IBindingToSyntax{T1,T2,T3,T4}#To(System.Type)">
            <summary>Sets the stub of IBindingToSyntax`4.To(Type implementation)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IBindingToSyntax{T1,T2,T3,T4}#ToConstant``1(``0)">
            <summary>Sets the stub of IBindingToSyntax`4.ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IBindingToSyntax{T1,T2,T3,T4}#ToConstructor``1(System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}})">
            <summary>Sets the stub of IBindingToSyntax`4.ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IBindingToSyntax{T1,T2,T3,T4}#ToMethod``1(System.Func{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingToSyntax`4.ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IBindingToSyntax{T1,T2,T3,T4}#ToProvider``1(Ninject.Activation.IProvider{``0})">
            <summary>Sets the stub of IBindingToSyntax`4.ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IBindingToSyntax{T1,T2,T3,T4}#ToProvider``2">
            <summary>Sets the stub of IBindingToSyntax`4.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IBindingToSyntax{T1,T2,T3,T4}#ToProvider``1">
            <summary>Sets the stub of IBindingToSyntax`4.ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IBindingToSyntax{T1,T2,T3,T4}#ToProvider(System.Type)">
            <summary>Sets the stub of IBindingToSyntax`4.ToProvider(Type providerType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.ToConstantOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToConstant(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.ToConstructorOf1ExpressionOfFuncOfIConstructorArgumentSyntaxM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{Ninject.Syntax.IConstructorArgumentSyntax,``0}},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToConstructor(Expression`1&lt;Func`2&lt;IConstructorArgumentSyntax,!!0&gt;&gt; newExpression)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.ToMethodOf1FuncOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToMethod(Func`2&lt;IContext,!!0&gt; method)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.ToOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of To()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.ToProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{System.Object}})">
            <summary>Sets stubs of ToProvider()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.ToProviderOf1IProviderOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Activation.IProvider{``0},Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``0}})">
            <summary>Sets stubs of ToProvider(IProvider`1&lt;!!0&gt; provider)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.ToProviderOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax{``1}})">
            <summary>Sets stubs of ToProvider()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.ToProviderType">
            <summary>Sets the stub of IBindingToSyntax`4.ToProvider(Type providerType)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingToSyntax`4.ToType">
            <summary>Sets the stub of IBindingToSyntax`4.To(Type implementation)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1">
            <summary>Stub type of Ninject.Syntax.IBindingWhenInNamedWithOrOnSyntax`1</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingWhenInNamedWithOrOnSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.InScopeFuncOfIContextObject">
            <summary>Sets the stub of IBindingInSyntax`1.InScope(Func`2&lt;IContext,Object&gt; scope)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.InSingletonScope">
            <summary>Sets the stub of IBindingInSyntax`1.InSingletonScope()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.InThreadScope">
            <summary>Sets the stub of IBindingInSyntax`1.InThreadScope()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.InTransientScope">
            <summary>Sets the stub of IBindingInSyntax`1.InTransientScope()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.NamedString">
            <summary>Sets the stub of IBindingNamedSyntax`1.Named(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InScope(System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingInSyntax`1.InScope(Func`2&lt;IContext,Object&gt; scope)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InSingletonScope">
            <summary>Sets the stub of IBindingInSyntax`1.InSingletonScope()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InThreadScope">
            <summary>Sets the stub of IBindingInSyntax`1.InThreadScope()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingInSyntax{T}#InTransientScope">
            <summary>Sets the stub of IBindingInSyntax`1.InTransientScope()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingNamedSyntax{T}#Named(System.String)">
            <summary>Sets the stub of IBindingNamedSyntax`1.Named(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#When(System.Func{Ninject.Activation.IRequest,System.Boolean})">
            <summary>Sets the stub of IBindingWhenSyntax`1.When(Func`2&lt;IRequest,Boolean&gt; condition)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenAnyAncestorMatches(System.Predicate{Ninject.Activation.IContext})">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenAnyAncestorNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenAnyAnchestorNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAnchestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenClassHas``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenClassHas()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenClassHas(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenClassHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedExactlyInto``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedExactlyInto(System.Type[])">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedExactlyInto(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type parent)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedInto``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedInto(System.Type[])">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedInto(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type parent)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenMemberHas``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenMemberHas()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenMemberHas(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenMemberHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenNoAncestorMatches(System.Predicate{Ninject.Activation.IContext})">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenNoAncestorNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenParentNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenParentNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenTargetHas``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenTargetHas()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenTargetHas(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenTargetHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument``1(``0)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithMetadata(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithParameter(Ninject.Parameters.IParameter)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.OnActivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.OnActivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.OnActivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.OnActivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.OnDeactivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.OnDeactivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.OnDeactivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.OnDeactivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenAnyAncestorMatchesPredicateOfIContext">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenAnyAncestorNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorNamed(String name)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenAnyAnchestorNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAnchestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenClassHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenClassHas()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenClassHasType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenClassHas(Type attributeType)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenFuncOfIRequestBoolean">
            <summary>Sets the stub of IBindingWhenSyntax`1.When(Func`2&lt;IRequest,Boolean&gt; condition)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenInjectedExactlyIntoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenInjectedExactlyInto()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenInjectedExactlyIntoType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type parent)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenInjectedExactlyIntoTypeArray">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenInjectedIntoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenInjectedInto()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenInjectedIntoType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type parent)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenInjectedIntoTypeArray">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenMemberHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenMemberHas()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenMemberHasType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenMemberHas(Type attributeType)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenNoAncestorMatchesPredicateOfIContext">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenNoAncestorNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorNamed(String name)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenParentNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenParentNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenTargetHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenTargetHas()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WhenTargetHasType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenTargetHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithConstructorArgumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithConstructorArgumentStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithConstructorArgumentStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithConstructorArgumentStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithConstructorArgumentTypeFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithConstructorArgumentTypeFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithConstructorArgumentTypeObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithMetadataStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithParameterIParameter">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithPropertyValueStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithPropertyValueStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenInNamedWithOrOnSyntax`1.WithPropertyValueStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1">
            <summary>Stub type of Ninject.Syntax.IBindingWhenSyntax`1</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingWhenSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#When(System.Func{Ninject.Activation.IRequest,System.Boolean})">
            <summary>Sets the stub of IBindingWhenSyntax`1.When(Func`2&lt;IRequest,Boolean&gt; condition)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenAnyAncestorMatches(System.Predicate{Ninject.Activation.IContext})">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenAnyAncestorNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenAnyAnchestorNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAnchestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenClassHas``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenClassHas()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenClassHas(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenClassHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedExactlyInto``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedExactlyInto(System.Type[])">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedExactlyInto(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type parent)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedInto``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedInto(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type parent)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenInjectedInto(System.Type[])">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenMemberHas``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenMemberHas()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenMemberHas(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenMemberHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenNoAncestorMatches(System.Predicate{Ninject.Activation.IContext})">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenNoAncestorNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenParentNamed(System.String)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenParentNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenTargetHas``1">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenTargetHas()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IBindingWhenSyntax{T}#WhenTargetHas(System.Type)">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenTargetHas(Type attributeType)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenAnyAncestorMatchesPredicateOfIContext">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenAnyAncestorNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAncestorNamed(String name)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenAnyAnchestorNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenAnyAnchestorNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenClassHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenClassHas()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenClassHasType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenClassHas(Type attributeType)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenFuncOfIRequestBoolean">
            <summary>Sets the stub of IBindingWhenSyntax`1.When(Func`2&lt;IRequest,Boolean&gt; condition)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenInjectedExactlyIntoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenInjectedExactlyInto()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenInjectedExactlyIntoType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type parent)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenInjectedExactlyIntoTypeArray">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedExactlyInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenInjectedIntoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenInjectedInto()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenInjectedIntoType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type parent)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenInjectedIntoTypeArray">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenInjectedInto(Type[] parents)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenMemberHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenMemberHas()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenMemberHasType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenMemberHas(Type attributeType)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenNoAncestorMatchesPredicateOfIContext">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorMatches(Predicate`1&lt;IContext&gt; predicate)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenNoAncestorNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenNoAncestorNamed(String name)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenParentNamedString">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenParentNamed(String name)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenTargetHasOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Ninject.Syntax.IBindingInNamedWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WhenTargetHas()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWhenSyntax`1.WhenTargetHasType">
            <summary>Sets the stub of IBindingWhenSyntax`1.WhenTargetHas(Type attributeType)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1">
            <summary>Stub type of Ninject.Syntax.IBindingWithOrOnSyntax`1</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingWithOrOnSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnActivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation``1(System.Action{Ninject.Activation.IContext,``0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingOnSyntax{T}#OnDeactivation(System.Action{Ninject.Activation.IContext,`0})">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument``1(``0)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithMetadata(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithParameter(Ninject.Parameters.IParameter)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.OnActivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.OnActivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnActivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.OnActivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.OnActivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnActivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.OnDeactivationActionOfIContextT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`2&lt;IContext,!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.OnDeactivationActionOfT0">
            <summary>Sets the stub of IBindingOnSyntax`1.OnDeactivation(Action`1&lt;!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.OnDeactivationOf1ActionOfIContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{Ninject.Activation.IContext,``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`2&lt;IContext,!!0&gt; action)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.OnDeactivationOf1ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Action{``0},Ninject.Syntax.IBindingOnSyntax{`0}})">
            <summary>Sets stubs of OnDeactivation(Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithConstructorArgumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithConstructorArgumentStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithConstructorArgumentStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithConstructorArgumentStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithConstructorArgumentTypeFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithConstructorArgumentTypeFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithConstructorArgumentTypeObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithMetadataStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithParameterIParameter">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithPropertyValueStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithPropertyValueStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithOrOnSyntax`1.WithPropertyValueStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1">
            <summary>Stub type of Ninject.Syntax.IBindingWithSyntax`1</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.#ctor">
            <summary>Initializes a new instance of type StubIBindingWithSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Infrastructure#IHaveBindingConfiguration#BindingConfiguration">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.BindingConfigurationGet">
            <summary>Sets the stub of IHaveBindingConfiguration.get_BindingConfiguration()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Infrastructure#IHaveKernel#Kernel">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.KernelGet">
            <summary>Sets the stub of IHaveKernel.get_Kernel()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument``1(``0)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithConstructorArgument(System.Type,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithMetadata(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithParameter(Ninject.Parameters.IParameter)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Object)">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IBindingWithSyntax{T}#WithPropertyValue(System.String,System.Func{Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget,System.Object})">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithConstructorArgumentOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,Ninject.Syntax.IBindingWithOrOnSyntax{`0}})">
            <summary>Sets stubs of WithConstructorArgument(!!0 value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithConstructorArgumentStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithConstructorArgumentStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithConstructorArgumentStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(String name, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithConstructorArgumentTypeFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithConstructorArgumentTypeFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithConstructorArgumentTypeObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithConstructorArgument(Type type, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithMetadataStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithMetadata(String key, Object value)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithParameterIParameter">
            <summary>Sets the stub of IBindingWithSyntax`1.WithParameter(IParameter parameter)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithPropertyValueStringFuncOfIContextITargetObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`3&lt;IContext,ITarget,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithPropertyValueStringFuncOfIContextObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Func`2&lt;IContext,Object&gt; callback)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIBindingWithSyntax`1.WithPropertyValueStringObject">
            <summary>Sets the stub of IBindingWithSyntax`1.WithPropertyValue(String name, Object value)</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax">
            <summary>Stub type of Ninject.Syntax.IConstructorArgumentSyntax</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.#ctor">
            <summary>Initializes a new instance of type StubIConstructorArgumentSyntax</summary>
        </member>
        <member name="P:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.Ninject#Syntax#IConstructorArgumentSyntax#Context">
            <summary>Sets the stub of IConstructorArgumentSyntax.get_Context()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.ContextGet">
            <summary>Sets the stub of IConstructorArgumentSyntax.get_Context()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.InjectOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets stubs of Inject()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.Ninject#Syntax#IConstructorArgumentSyntax#Inject``1">
            <summary>Sets the stub of IConstructorArgumentSyntax.Inject()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIConstructorArgumentSyntax.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIFluentSyntax">
            <summary>Stub type of Ninject.Syntax.IFluentSyntax</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIFluentSyntax.#ctor">
            <summary>Initializes a new instance of type StubIFluentSyntax</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIFluentSyntax.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIFluentSyntax.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIFluentSyntax.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIFluentSyntax.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIFluentSyntax.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIFluentSyntax.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIFluentSyntax.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIFluentSyntax.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="T:Ninject.Syntax.Fakes.StubIResolutionRoot">
            <summary>Stub type of Ninject.Syntax.IResolutionRoot</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIResolutionRoot.#ctor">
            <summary>Initializes a new instance of type StubIResolutionRoot</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIResolutionRoot.CanResolveIRequest">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIResolutionRoot.CanResolveIRequestBoolean">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIResolutionRoot.CreateRequestTypeFuncOfIBindingMetadataBooleanIEnumerableOfIParameterBooleanBoolean">
            <summary>Sets the stub of IResolutionRoot.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIResolutionRoot.EqualsObject">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIResolutionRoot.GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIResolutionRoot.GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIResolutionRoot.Ninject#Syntax#IFluentSyntax#Equals(System.Object)">
            <summary>Sets the stub of IFluentSyntax.Equals(Object other)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIResolutionRoot.Ninject#Syntax#IFluentSyntax#GetHashCode">
            <summary>Sets the stub of IFluentSyntax.GetHashCode()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIResolutionRoot.Ninject#Syntax#IFluentSyntax#GetType">
            <summary>Sets the stub of IFluentSyntax.GetType()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIResolutionRoot.Ninject#Syntax#IFluentSyntax#ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIResolutionRoot.Ninject#Syntax#IResolutionRoot#CanResolve(Ninject.Activation.IRequest)">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIResolutionRoot.Ninject#Syntax#IResolutionRoot#CanResolve(Ninject.Activation.IRequest,System.Boolean)">
            <summary>Sets the stub of IResolutionRoot.CanResolve(IRequest request, Boolean ignoreImplicitBindings)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIResolutionRoot.Ninject#Syntax#IResolutionRoot#CreateRequest(System.Type,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>Sets the stub of IResolutionRoot.CreateRequest(Type service, Func`2&lt;IBindingMetadata,Boolean&gt; constraint, IEnumerable`1&lt;IParameter&gt; parameters, Boolean isOptional, Boolean isUnique)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIResolutionRoot.Ninject#Syntax#IResolutionRoot#Release(System.Object)">
            <summary>Sets the stub of IResolutionRoot.Release(Object instance)</summary>
        </member>
        <member name="M:Ninject.Syntax.Fakes.StubIResolutionRoot.Ninject#Syntax#IResolutionRoot#Resolve(Ninject.Activation.IRequest)">
            <summary>Sets the stub of IResolutionRoot.Resolve(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIResolutionRoot.ReleaseObject">
            <summary>Sets the stub of IResolutionRoot.Release(Object instance)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIResolutionRoot.ResolveIRequest">
            <summary>Sets the stub of IResolutionRoot.Resolve(IRequest request)</summary>
        </member>
        <member name="F:Ninject.Syntax.Fakes.StubIResolutionRoot.ToString">
            <summary>Sets the stub of IFluentSyntax.ToString()</summary>
        </member>
    </members>
</doc>
