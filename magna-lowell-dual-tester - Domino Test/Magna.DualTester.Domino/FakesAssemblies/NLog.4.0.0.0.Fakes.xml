<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLog.4.0.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:NLog.Common.Fakes.ShimAsyncHelpers">
            <summary>Shim type of NLog.Common.AsyncHelpers</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimAsyncHelpers.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimAsyncHelpers.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimAsyncHelpers.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncHelpers.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncHelpers.ExceptionGuardAsynchronousAction">
            <summary>Sets the shim of AsyncHelpers.ExceptionGuard(AsynchronousAction action)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimAsyncHelpers.ExceptionGuardOf1AsynchronousActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NLog.Common.AsynchronousAction{``0},NLog.Common.AsynchronousAction{``0}})">
            <summary>Sets the shim of AsyncHelpers.ExceptionGuard(AsynchronousAction`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimAsyncHelpers.ForEachItemInParallelOf1IEnumerableOfM0AsyncContinuationAsynchronousActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0}})">
            <summary>Sets the shim of AsyncHelpers.ForEachItemInParallel(IEnumerable`1&lt;!!0&gt; values, AsyncContinuation asyncContinuation, AsynchronousAction`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimAsyncHelpers.ForEachItemSequentiallyOf1IEnumerableOfM0AsyncContinuationAsynchronousActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0}})">
            <summary>Sets the shim of AsyncHelpers.ForEachItemSequentially(IEnumerable`1&lt;!!0&gt; items, AsyncContinuation asyncContinuation, AsynchronousAction`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncHelpers.GetCombinedExceptionIListOfException">
            <summary>Sets the shim of AsyncHelpers.GetCombinedException(IList`1&lt;Exception&gt; exceptions)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncHelpers.PrecededByAsyncContinuationAsynchronousAction">
            <summary>Sets the shim of AsyncHelpers.PrecededBy(AsyncContinuation asyncContinuation, AsynchronousAction action)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncHelpers.PreventMultipleCallsAsyncContinuation">
            <summary>Sets the shim of AsyncHelpers.PreventMultipleCalls(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncHelpers.RepeatInt32AsyncContinuationAsynchronousAction">
            <summary>Sets the shim of AsyncHelpers.Repeat(Int32 repeatCount, AsyncContinuation asyncContinuation, AsynchronousAction action)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncHelpers.RunSynchronouslyAsynchronousAction">
            <summary>Sets the shim of AsyncHelpers.RunSynchronously(AsynchronousAction action)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncHelpers.WithTimeoutAsyncContinuationTimeSpan">
            <summary>Sets the shim of AsyncHelpers.WithTimeout(AsyncContinuation asyncContinuation, TimeSpan timeout)</summary>
        </member>
        <member name="T:NLog.Common.Fakes.ShimAsyncLogEventInfo">
            <summary>Shim type of NLog.Common.AsyncLogEventInfo</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimAsyncLogEventInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="T:NLog.Common.Fakes.ShimAsyncLogEventInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimAsyncLogEventInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimAsyncLogEventInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncLogEventInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncLogEventInfo.EqualityOpAsyncLogEventInfoAsyncLogEventInfo">
            <summary>Sets the shim of AsyncLogEventInfo.op_Equality(AsyncLogEventInfo eventInfo1, AsyncLogEventInfo eventInfo2)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimAsyncLogEventInfo.InequalityOpAsyncLogEventInfoAsyncLogEventInfo">
            <summary>Sets the shim of AsyncLogEventInfo.op_Inequality(AsyncLogEventInfo eventInfo1, AsyncLogEventInfo eventInfo2)</summary>
        </member>
        <member name="T:NLog.Common.Fakes.ShimInternalLogger">
            <summary>Shim type of NLog.Common.InternalLogger</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.CreateDirectoriesIfNeededString">
            <summary>Sets the shim of InternalLogger.CreateDirectoriesIfNeeded(String filename)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.DebugExceptionFuncOfString">
            <summary>Sets the shim of InternalLogger.Debug(Exception ex, Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.DebugExceptionString">
            <summary>Sets the shim of InternalLogger.Debug(Exception ex, String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.DebugExceptionStringObjectArray">
            <summary>Sets the shim of InternalLogger.Debug(Exception ex, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.DebugFuncOfString">
            <summary>Sets the shim of InternalLogger.Debug(Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.DebugOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of InternalLogger.Debug(String message, !!0 arg0)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.DebugOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of InternalLogger.Debug(String message, !!0 arg0, !!1 arg1)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.DebugOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of InternalLogger.Debug(String message, !!0 arg0, !!1 arg1, !!2 arg2)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.DebugString">
            <summary>Sets the shim of InternalLogger.Debug(String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.DebugStringObjectArray">
            <summary>Sets the shim of InternalLogger.Debug(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.ErrorExceptionFuncOfString">
            <summary>Sets the shim of InternalLogger.Error(Exception ex, Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.ErrorExceptionString">
            <summary>Sets the shim of InternalLogger.Error(Exception ex, String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.ErrorExceptionStringObjectArray">
            <summary>Sets the shim of InternalLogger.Error(Exception ex, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.ErrorFuncOfString">
            <summary>Sets the shim of InternalLogger.Error(Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.ErrorOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of InternalLogger.Error(String message, !!0 arg0)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.ErrorOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of InternalLogger.Error(String message, !!0 arg0, !!1 arg1)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.ErrorOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of InternalLogger.Error(String message, !!0 arg0, !!1 arg1, !!2 arg2)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.ErrorString">
            <summary>Sets the shim of InternalLogger.Error(String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.ErrorStringObjectArray">
            <summary>Sets the shim of InternalLogger.Error(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.FatalExceptionFuncOfString">
            <summary>Sets the shim of InternalLogger.Fatal(Exception ex, Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.FatalExceptionString">
            <summary>Sets the shim of InternalLogger.Fatal(Exception ex, String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.FatalExceptionStringObjectArray">
            <summary>Sets the shim of InternalLogger.Fatal(Exception ex, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.FatalFuncOfString">
            <summary>Sets the shim of InternalLogger.Fatal(Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.FatalOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of InternalLogger.Fatal(String message, !!0 arg0)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.FatalOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of InternalLogger.Fatal(String message, !!0 arg0, !!1 arg1)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.FatalOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of InternalLogger.Fatal(String message, !!0 arg0, !!1 arg1, !!2 arg2)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.FatalString">
            <summary>Sets the shim of InternalLogger.Fatal(String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.FatalStringObjectArray">
            <summary>Sets the shim of InternalLogger.Fatal(String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.GetSettingOf1StringStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.String,``0,``0})">
            <summary>Sets the shim of InternalLogger.GetSetting(String configName, String envName, !!0 defaultValue)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.GetSettingStringStringLogLevel">
            <summary>Sets the shim of InternalLogger.GetSetting(String configName, String envName, LogLevel defaultValue)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.GetSettingStringStringString">
            <summary>Sets the shim of InternalLogger.GetSettingString(String configName, String envName)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.IncludeTimestampGet">
            <summary>Sets the shim of InternalLogger.get_IncludeTimestamp()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.IncludeTimestampSetBoolean">
            <summary>Sets the shim of InternalLogger.set_IncludeTimestamp(Boolean value)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.InfoExceptionFuncOfString">
            <summary>Sets the shim of InternalLogger.Info(Exception ex, Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.InfoExceptionString">
            <summary>Sets the shim of InternalLogger.Info(Exception ex, String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.InfoExceptionStringObjectArray">
            <summary>Sets the shim of InternalLogger.Info(Exception ex, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.InfoFuncOfString">
            <summary>Sets the shim of InternalLogger.Info(Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.InfoOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of InternalLogger.Info(String message, !!0 arg0)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.InfoOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of InternalLogger.Info(String message, !!0 arg0, !!1 arg1)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.InfoOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of InternalLogger.Info(String message, !!0 arg0, !!1 arg1, !!2 arg2)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.InfoString">
            <summary>Sets the shim of InternalLogger.Info(String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.InfoStringObjectArray">
            <summary>Sets the shim of InternalLogger.Info(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.IsDebugEnabledGet">
            <summary>Sets the shim of InternalLogger.get_IsDebugEnabled()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.IsErrorEnabledGet">
            <summary>Sets the shim of InternalLogger.get_IsErrorEnabled()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.IsFatalEnabledGet">
            <summary>Sets the shim of InternalLogger.get_IsFatalEnabled()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.IsInfoEnabledGet">
            <summary>Sets the shim of InternalLogger.get_IsInfoEnabled()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.IsSeriousExceptionException">
            <summary>Sets the shim of InternalLogger.IsSeriousException(Exception exception)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.IsTraceEnabledGet">
            <summary>Sets the shim of InternalLogger.get_IsTraceEnabled()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.IsWarnEnabledGet">
            <summary>Sets the shim of InternalLogger.get_IsWarnEnabled()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogAssemblyVersionAssembly">
            <summary>Sets the shim of InternalLogger.LogAssemblyVersion(Assembly assembly)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogExceptionLogLevelFuncOfString">
            <summary>Sets the shim of InternalLogger.Log(Exception ex, LogLevel level, Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogExceptionLogLevelString">
            <summary>Sets the shim of InternalLogger.Log(Exception ex, LogLevel level, String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogExceptionLogLevelStringObjectArray">
            <summary>Sets the shim of InternalLogger.Log(Exception ex, LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogFileGet">
            <summary>Sets the shim of InternalLogger.get_LogFile()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogFileSetString">
            <summary>Sets the shim of InternalLogger.set_LogFile(String value)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogLevelGet">
            <summary>Sets the shim of InternalLogger.get_LogLevel()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogLevelSetLogLevel">
            <summary>Sets the shim of InternalLogger.set_LogLevel(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogLogLevelFuncOfString">
            <summary>Sets the shim of InternalLogger.Log(LogLevel level, Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogLogLevelString">
            <summary>Sets the shim of InternalLogger.Log(LogLevel level, String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogLogLevelStringObjectArray">
            <summary>Sets the shim of InternalLogger.Log(LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogToConsoleErrorGet">
            <summary>Sets the shim of InternalLogger.get_LogToConsoleError()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogToConsoleErrorSetBoolean">
            <summary>Sets the shim of InternalLogger.set_LogToConsoleError(Boolean value)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogToConsoleGet">
            <summary>Sets the shim of InternalLogger.get_LogToConsole()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogToConsoleSetBoolean">
            <summary>Sets the shim of InternalLogger.set_LogToConsole(Boolean value)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogToTraceGet">
            <summary>Sets the shim of InternalLogger.get_LogToTrace()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogToTraceSetBoolean">
            <summary>Sets the shim of InternalLogger.set_LogToTrace(Boolean value)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogWriterGet">
            <summary>Sets the shim of InternalLogger.get_LogWriter()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LogWriterSetTextWriter">
            <summary>Sets the shim of InternalLogger.set_LogWriter(TextWriter value)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.LoggingEnabledLogLevel">
            <summary>Sets the shim of InternalLogger.LoggingEnabled(LogLevel logLevel)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.Reset">
            <summary>Sets the shim of InternalLogger.Reset()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.StaticConstructor">
            <summary>Sets the shim of InternalLogger.InternalLogger()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.TraceExceptionFuncOfString">
            <summary>Sets the shim of InternalLogger.Trace(Exception ex, Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.TraceExceptionString">
            <summary>Sets the shim of InternalLogger.Trace(Exception ex, String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.TraceExceptionStringObjectArray">
            <summary>Sets the shim of InternalLogger.Trace(Exception ex, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.TraceFuncOfString">
            <summary>Sets the shim of InternalLogger.Trace(Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.TraceOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of InternalLogger.Trace(String message, !!0 arg0)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.TraceOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of InternalLogger.Trace(String message, !!0 arg0, !!1 arg1)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.TraceOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of InternalLogger.Trace(String message, !!0 arg0, !!1 arg1, !!2 arg2)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.TraceString">
            <summary>Sets the shim of InternalLogger.Trace(String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.TraceStringObjectArray">
            <summary>Sets the shim of InternalLogger.Trace(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.WarnExceptionFuncOfString">
            <summary>Sets the shim of InternalLogger.Warn(Exception ex, Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.WarnExceptionString">
            <summary>Sets the shim of InternalLogger.Warn(Exception ex, String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.WarnExceptionStringObjectArray">
            <summary>Sets the shim of InternalLogger.Warn(Exception ex, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.WarnFuncOfString">
            <summary>Sets the shim of InternalLogger.Warn(Func`1&lt;String&gt; messageFunc)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.WarnOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of InternalLogger.Warn(String message, !!0 arg0)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.WarnOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of InternalLogger.Warn(String message, !!0 arg0, !!1 arg1)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimInternalLogger.WarnOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of InternalLogger.Warn(String message, !!0 arg0, !!1 arg1, !!2 arg2)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.WarnString">
            <summary>Sets the shim of InternalLogger.Warn(String message)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.WarnStringObjectArray">
            <summary>Sets the shim of InternalLogger.Warn(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.WriteExceptionLogLevelStringObjectArray">
            <summary>Sets the shim of InternalLogger.Write(Exception ex, LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimInternalLogger.WriteToTraceString">
            <summary>Sets the shim of InternalLogger.WriteToTrace(String message)</summary>
        </member>
        <member name="T:NLog.Common.Fakes.ShimLogEventInfoBuffer">
            <summary>Shim type of NLog.Common.LogEventInfoBuffer</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimLogEventInfoBuffer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimLogEventInfoBuffer.#ctor(NLog.Common.LogEventInfoBuffer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Common.Fakes.ShimLogEventInfoBuffer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimLogEventInfoBuffer.AllInstances.AppendAsyncLogEventInfo">
            <summary>Sets the shim of LogEventInfoBuffer.Append(AsyncLogEventInfo eventInfo)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimLogEventInfoBuffer.AllInstances.GetEventsAndClear">
            <summary>Sets the shim of LogEventInfoBuffer.GetEventsAndClear()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimLogEventInfoBuffer.AllInstances.SizeGet">
            <summary>Sets the shim of LogEventInfoBuffer.get_Size()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimLogEventInfoBuffer.AppendAsyncLogEventInfo">
            <summary>Sets the shim of LogEventInfoBuffer.Append(AsyncLogEventInfo eventInfo)</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimLogEventInfoBuffer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Common.Fakes.ShimLogEventInfoBuffer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimLogEventInfoBuffer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimLogEventInfoBuffer.ConstructorInt32BooleanInt32">
            <summary>Sets the shim of LogEventInfoBuffer.LogEventInfoBuffer(Int32 size, Boolean growAsNeeded, Int32 growLimit)</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimLogEventInfoBuffer.GetEventsAndClear">
            <summary>Sets the shim of LogEventInfoBuffer.GetEventsAndClear()</summary>
        </member>
        <member name="P:NLog.Common.Fakes.ShimLogEventInfoBuffer.SizeGet">
            <summary>Sets the shim of LogEventInfoBuffer.get_Size()</summary>
        </member>
        <member name="T:NLog.Common.Fakes.StubLogEventInfoBuffer">
            <summary>Stub type of NLog.Common.LogEventInfoBuffer</summary>
        </member>
        <member name="M:NLog.Common.Fakes.StubLogEventInfoBuffer.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Common.Fakes.StubLogEventInfoBuffer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Common.Fakes.StubLogEventInfoBuffer.InitializeStub">
            <summary>Initializes a new instance of type StubLogEventInfoBuffer</summary>
        </member>
        <member name="P:NLog.Common.Fakes.StubLogEventInfoBuffer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Common.Fakes.StubLogEventInfoBuffer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionEvaluationException">
            <summary>Shim type of NLog.Conditions.ConditionEvaluationException</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionEvaluationException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionEvaluationException.#ctor(NLog.Conditions.ConditionEvaluationException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionEvaluationException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionEvaluationException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionEvaluationException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionEvaluationException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionEvaluationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionEvaluationException.Constructor">
            <summary>Sets the shim of ConditionEvaluationException.ConditionEvaluationException()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionEvaluationException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ConditionEvaluationException.ConditionEvaluationException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionEvaluationException.ConstructorString">
            <summary>Sets the shim of ConditionEvaluationException.ConditionEvaluationException(String message)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionEvaluationException.ConstructorStringException">
            <summary>Sets the shim of ConditionEvaluationException.ConditionEvaluationException(String message, Exception innerException)</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionExpression">
            <summary>Shim type of NLog.Conditions.ConditionExpression</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionExpression.#ctor(NLog.Conditions.ConditionExpression)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionExpression.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionExpression.AllInstances.EvaluateLogEventInfo">
            <summary>Sets the shim of ConditionExpression.Evaluate(LogEventInfo context)</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionExpression.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionExpression.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionExpression.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionExpression.Constructor">
            <summary>Sets the shim of ConditionExpression.ConditionExpression()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionExpression.EvaluateLogEventInfo">
            <summary>Sets the shim of ConditionExpression.Evaluate(LogEventInfo context)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionExpression.ImplicitOpStringConditionExpression">
            <summary>Sets the shim of ConditionExpression.op_Implicit(String conditionExpressionText)</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionMethodAttribute">
            <summary>Shim type of NLog.Conditions.ConditionMethodAttribute</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethodAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethodAttribute.#ctor(NLog.Conditions.ConditionMethodAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionMethodAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethodAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethodAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethodAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethodAttribute.ConstructorString">
            <summary>Sets the shim of ConditionMethodAttribute.ConditionMethodAttribute(String name)</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionMethods">
            <summary>Shim type of NLog.Conditions.ConditionMethods</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethods.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethods.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethods.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethods.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethods.ContainsStringStringBoolean">
            <summary>Sets the shim of ConditionMethods.Contains(String haystack, String needle, Boolean ignoreCase)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethods.EndsWithStringStringBoolean">
            <summary>Sets the shim of ConditionMethods.EndsWith(String haystack, String needle, Boolean ignoreCase)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethods.Equals2ObjectObject">
            <summary>Sets the shim of ConditionMethods.Equals2(Object firstValue, Object secondValue)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethods.Equals2StringStringBoolean">
            <summary>Sets the shim of ConditionMethods.Equals2(String firstValue, String secondValue, Boolean ignoreCase)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethods.LengthString">
            <summary>Sets the shim of ConditionMethods.Length(String text)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethods.StartsWithStringStringBoolean">
            <summary>Sets the shim of ConditionMethods.StartsWith(String haystack, String needle, Boolean ignoreCase)</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionMethodsAttribute">
            <summary>Shim type of NLog.Conditions.ConditionMethodsAttribute</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethodsAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethodsAttribute.#ctor(NLog.Conditions.ConditionMethodsAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionMethodsAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethodsAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionMethodsAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethodsAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionMethodsAttribute.Constructor">
            <summary>Sets the shim of ConditionMethodsAttribute.ConditionMethodsAttribute()</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionParseException">
            <summary>Shim type of NLog.Conditions.ConditionParseException</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionParseException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionParseException.#ctor(NLog.Conditions.ConditionParseException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionParseException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionParseException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionParseException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParseException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionParseException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParseException.Constructor">
            <summary>Sets the shim of ConditionParseException.ConditionParseException()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParseException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of ConditionParseException.ConditionParseException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParseException.ConstructorString">
            <summary>Sets the shim of ConditionParseException.ConditionParseException(String message)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParseException.ConstructorStringException">
            <summary>Sets the shim of ConditionParseException.ConditionParseException(String message, Exception innerException)</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionParser">
            <summary>Shim type of NLog.Conditions.ConditionParser</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionParser.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionParser.#ctor(NLog.Conditions.ConditionParser)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.ShimConditionParser.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.AllInstances.ParseBooleanAnd">
            <summary>Sets the shim of ConditionParser.ParseBooleanAnd()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.AllInstances.ParseBooleanExpression">
            <summary>Sets the shim of ConditionParser.ParseBooleanExpression()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.AllInstances.ParseBooleanOr">
            <summary>Sets the shim of ConditionParser.ParseBooleanOr()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.AllInstances.ParseBooleanPredicate">
            <summary>Sets the shim of ConditionParser.ParseBooleanPredicate()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.AllInstances.ParseBooleanRelation">
            <summary>Sets the shim of ConditionParser.ParseBooleanRelation()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.AllInstances.ParseExpression">
            <summary>Sets the shim of ConditionParser.ParseExpression()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.AllInstances.ParseLiteralExpression">
            <summary>Sets the shim of ConditionParser.ParseLiteralExpression()</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionParser.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.ShimConditionParser.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.ParseBooleanAnd">
            <summary>Sets the shim of ConditionParser.ParseBooleanAnd()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.ParseBooleanExpression">
            <summary>Sets the shim of ConditionParser.ParseBooleanExpression()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.ParseBooleanOr">
            <summary>Sets the shim of ConditionParser.ParseBooleanOr()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.ParseBooleanPredicate">
            <summary>Sets the shim of ConditionParser.ParseBooleanPredicate()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.ParseBooleanRelation">
            <summary>Sets the shim of ConditionParser.ParseBooleanRelation()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.ParseExpression">
            <summary>Sets the shim of ConditionParser.ParseExpression()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.ParseExpressionString">
            <summary>Sets the shim of ConditionParser.ParseExpression(String expressionText)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.ParseExpressionStringConfigurationItemFactory">
            <summary>Sets the shim of ConditionParser.ParseExpression(String expressionText, ConfigurationItemFactory configurationItemFactories)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.ShimConditionParser.ParseLiteralExpression">
            <summary>Sets the shim of ConditionParser.ParseLiteralExpression()</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.StubConditionEvaluationException">
            <summary>Stub type of NLog.Conditions.ConditionEvaluationException</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionEvaluationException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionEvaluationException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionEvaluationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionEvaluationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionEvaluationException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubConditionEvaluationException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionEvaluationException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubConditionEvaluationException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionEvaluationException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionEvaluationException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionEvaluationException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionEvaluationException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionEvaluationException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionEvaluationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionEvaluationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionEvaluationException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionEvaluationException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionEvaluationException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionEvaluationException.InitializeStub">
            <summary>Initializes a new instance of type StubConditionEvaluationException</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionEvaluationException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionEvaluationException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionEvaluationException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionEvaluationException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionEvaluationException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionEvaluationException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionEvaluationException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionEvaluationException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionEvaluationException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionEvaluationException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionEvaluationException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.StubConditionExpression">
            <summary>Stub type of NLog.Conditions.ConditionExpression</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionExpression.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionExpression.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>Sets the stub of ConditionExpression.EvaluateNode(LogEventInfo context)</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionExpression.EvaluateNodeLogEventInfo">
            <summary>Sets the stub of ConditionExpression.EvaluateNode(LogEventInfo context)</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionExpression.InitializeStub">
            <summary>Initializes a new instance of type StubConditionExpression</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionExpression.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionExpression.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionExpression.ToString">
            <summary>Sets the stub of ConditionExpression.ToString()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionExpression.ToString01">
            <summary>Sets the stub of ConditionExpression.ToString()</summary>
        </member>
        <member name="T:NLog.Conditions.Fakes.StubConditionParseException">
            <summary>Stub type of NLog.Conditions.ConditionParseException</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionParseException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionParseException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionParseException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionParseException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubConditionParseException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionParseException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubConditionParseException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionParseException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionParseException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionParseException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionParseException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionParseException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionParseException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionParseException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionParseException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionParseException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionParseException.InitializeStub">
            <summary>Initializes a new instance of type StubConditionParseException</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionParseException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionParseException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionParseException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionParseException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionParseException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionParseException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionParseException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:NLog.Conditions.Fakes.StubConditionParseException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionParseException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:NLog.Conditions.Fakes.StubConditionParseException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:NLog.Conditions.Fakes.StubConditionParseException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimAdvancedAttribute">
            <summary>Shim type of NLog.Config.AdvancedAttribute</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAdvancedAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAdvancedAttribute.#ctor(NLog.Config.AdvancedAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimAdvancedAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAdvancedAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAdvancedAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimAdvancedAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimAdvancedAttribute.Constructor">
            <summary>Sets the shim of AdvancedAttribute.AdvancedAttribute()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimAppDomainFixedOutputAttribute">
            <summary>Shim type of NLog.Config.AppDomainFixedOutputAttribute</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAppDomainFixedOutputAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAppDomainFixedOutputAttribute.#ctor(NLog.Config.AppDomainFixedOutputAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimAppDomainFixedOutputAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAppDomainFixedOutputAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAppDomainFixedOutputAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimAppDomainFixedOutputAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimAppDomainFixedOutputAttribute.Constructor">
            <summary>Sets the shim of AppDomainFixedOutputAttribute.AppDomainFixedOutputAttribute()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimArrayParameterAttribute">
            <summary>Shim type of NLog.Config.ArrayParameterAttribute</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimArrayParameterAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimArrayParameterAttribute.#ctor(NLog.Config.ArrayParameterAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimArrayParameterAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimArrayParameterAttribute.AllInstances.ElementNameGet">
            <summary>Sets the shim of ArrayParameterAttribute.get_ElementName()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimArrayParameterAttribute.AllInstances.ElementNameSetString">
            <summary>Sets the shim of ArrayParameterAttribute.set_ElementName(String value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimArrayParameterAttribute.AllInstances.ItemTypeGet">
            <summary>Sets the shim of ArrayParameterAttribute.get_ItemType()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimArrayParameterAttribute.AllInstances.ItemTypeSetType">
            <summary>Sets the shim of ArrayParameterAttribute.set_ItemType(Type value)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimArrayParameterAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimArrayParameterAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimArrayParameterAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimArrayParameterAttribute.ConstructorTypeString">
            <summary>Sets the shim of ArrayParameterAttribute.ArrayParameterAttribute(Type itemType, String elementName)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimArrayParameterAttribute.ElementNameGet">
            <summary>Sets the shim of ArrayParameterAttribute.get_ElementName()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimArrayParameterAttribute.ElementNameSetString">
            <summary>Sets the shim of ArrayParameterAttribute.set_ElementName(String value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimArrayParameterAttribute.ItemTypeGet">
            <summary>Sets the shim of ArrayParameterAttribute.get_ItemType()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimArrayParameterAttribute.ItemTypeSetType">
            <summary>Sets the shim of ArrayParameterAttribute.set_ItemType(Type value)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs">
            <summary>Shim type of NLog.Config.AssemblyLoadingEventArgs</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.#ctor(NLog.Config.AssemblyLoadingEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.AllInstances.AssemblyGet">
            <summary>Sets the shim of AssemblyLoadingEventArgs.get_Assembly()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.AllInstances.AssemblySetAssembly">
            <summary>Sets the shim of AssemblyLoadingEventArgs.set_Assembly(Assembly value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.AssemblyGet">
            <summary>Sets the shim of AssemblyLoadingEventArgs.get_Assembly()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.AssemblySetAssembly">
            <summary>Sets the shim of AssemblyLoadingEventArgs.set_Assembly(Assembly value)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimAssemblyLoadingEventArgs.ConstructorAssembly">
            <summary>Sets the shim of AssemblyLoadingEventArgs.AssemblyLoadingEventArgs(Assembly assembly)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimConfigSectionHandler">
            <summary>Shim type of NLog.Config.ConfigSectionHandler</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimConfigSectionHandler.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimConfigSectionHandler.#ctor(NLog.Config.ConfigSectionHandler)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimConfigSectionHandler.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigSectionHandler.AllInstances.CreateXmlNodeIAppDomain">
            <summary>Sets the shim of ConfigSectionHandler.Create(XmlNode section, IAppDomain appDomain)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigSectionHandler.AllInstances.SystemConfigurationIConfigurationSectionHandlerCreateObjectObjectXmlNode">
            <summary>Sets the shim of ConfigSectionHandler.System.Configuration.IConfigurationSectionHandler.Create(Object parent, Object configContext, XmlNode section)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimConfigSectionHandler.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimConfigSectionHandler.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigSectionHandler.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimConfigSectionHandler.Bind(System.Configuration.IConfigurationSectionHandler)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigSectionHandler.Constructor">
            <summary>Sets the shim of ConfigSectionHandler.ConfigSectionHandler()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigSectionHandler.CreateXmlNodeIAppDomain">
            <summary>Sets the shim of ConfigSectionHandler.Create(XmlNode section, IAppDomain appDomain)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigSectionHandler.SystemConfigurationIConfigurationSectionHandlerCreateObjectObjectXmlNode">
            <summary>Sets the shim of ConfigSectionHandler.System.Configuration.IConfigurationSectionHandler.Create(Object parent, Object configContext, XmlNode section)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimConfigurationItemFactory">
            <summary>Shim type of NLog.Config.ConfigurationItemFactory</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimConfigurationItemFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimConfigurationItemFactory.#ctor(NLog.Config.ConfigurationItemFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.AmbientPropertiesGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_AmbientProperties()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.Clear">
            <summary>Sets the shim of ConfigurationItemFactory.Clear()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.ConditionMethodsGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_ConditionMethods()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.CreateInstanceGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_CreateInstance()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.CreateInstanceSetConfigurationItemCreator">
            <summary>Sets the shim of ConfigurationItemFactory.set_CreateInstance(ConfigurationItemCreator value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.FiltersGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_Filters()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.JsonSerializerGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_JsonSerializer()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.JsonSerializerSetIJsonSerializer">
            <summary>Sets the shim of ConfigurationItemFactory.set_JsonSerializer(IJsonSerializer value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.LayoutRenderersGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_LayoutRenderers()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.LayoutsGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_Layouts()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.PreloadAssemblyTypeArray">
            <summary>Sets the shim of ConfigurationItemFactory.PreloadAssembly(Type[] typesToScan)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.RegisterExtendedItems">
            <summary>Sets the shim of ConfigurationItemFactory.RegisterExtendedItems()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.RegisterItemsFromAssemblyAssembly">
            <summary>Sets the shim of ConfigurationItemFactory.RegisterItemsFromAssembly(Assembly assembly)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.RegisterItemsFromAssemblyAssemblyString">
            <summary>Sets the shim of ConfigurationItemFactory.RegisterItemsFromAssembly(Assembly assembly, String itemNamePrefix)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.RegisterTypeTypeString">
            <summary>Sets the shim of ConfigurationItemFactory.RegisterType(Type type, String itemNamePrefix)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.TargetsGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_Targets()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AllInstances.TimeSourcesGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_TimeSources()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AmbientPropertiesGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_AmbientProperties()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AssemblyLoadingAddEventHandlerOfAssemblyLoadingEventArgs">
            <summary>Sets the shim of ConfigurationItemFactory.add_AssemblyLoading(EventHandler`1&lt;AssemblyLoadingEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.AssemblyLoadingRemoveEventHandlerOfAssemblyLoadingEventArgs">
            <summary>Sets the shim of ConfigurationItemFactory.remove_AssemblyLoading(EventHandler`1&lt;AssemblyLoadingEventArgs&gt; value)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimConfigurationItemFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimConfigurationItemFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.BuildDefaultFactory">
            <summary>Sets the shim of ConfigurationItemFactory.BuildDefaultFactory()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.CallPreloadType">
            <summary>Sets the shim of ConfigurationItemFactory.CallPreload(Type type)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.Clear">
            <summary>Sets the shim of ConfigurationItemFactory.Clear()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.ConditionMethodsGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_ConditionMethods()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.ConstructorAssemblyArray">
            <summary>Sets the shim of ConfigurationItemFactory.ConfigurationItemFactory(Assembly[] assemblies)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.CreateInstanceGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_CreateInstance()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.CreateInstanceSetConfigurationItemCreator">
            <summary>Sets the shim of ConfigurationItemFactory.set_CreateInstance(ConfigurationItemCreator value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.DefaultGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_Default()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.DefaultSetConfigurationItemFactory">
            <summary>Sets the shim of ConfigurationItemFactory.set_Default(ConfigurationItemFactory value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.FiltersGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_Filters()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.JsonSerializerGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_JsonSerializer()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.JsonSerializerSetIJsonSerializer">
            <summary>Sets the shim of ConfigurationItemFactory.set_JsonSerializer(IJsonSerializer value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.LayoutRenderersGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_LayoutRenderers()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.LayoutsGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_Layouts()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.PreloadAssemblyTypeArray">
            <summary>Sets the shim of ConfigurationItemFactory.PreloadAssembly(Type[] typesToScan)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.RegisterExtendedItems">
            <summary>Sets the shim of ConfigurationItemFactory.RegisterExtendedItems()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.RegisterItemsFromAssemblyAssembly">
            <summary>Sets the shim of ConfigurationItemFactory.RegisterItemsFromAssembly(Assembly assembly)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.RegisterItemsFromAssemblyAssemblyString">
            <summary>Sets the shim of ConfigurationItemFactory.RegisterItemsFromAssembly(Assembly assembly, String itemNamePrefix)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.RegisterTypeTypeString">
            <summary>Sets the shim of ConfigurationItemFactory.RegisterType(Type type, String itemNamePrefix)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.StaticConstructor">
            <summary>Sets the shim of ConfigurationItemFactory.ConfigurationItemFactory()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.TargetsGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_Targets()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory.TimeSourcesGet">
            <summary>Sets the shim of ConfigurationItemFactory.get_TimeSources()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory._BuildDefaultFactoryb__3String">
            <summary>Sets the shim of ConfigurationItemFactory.&lt;BuildDefaultFactory&gt;b__3(String x)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory._BuildDefaultFactoryb__4String">
            <summary>Sets the shim of ConfigurationItemFactory.&lt;BuildDefaultFactory&gt;b__4(String x)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory._BuildDefaultFactoryb__5String">
            <summary>Sets the shim of ConfigurationItemFactory.&lt;BuildDefaultFactory&gt;b__5(String x)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimConfigurationItemFactory._PreloadAssemblyb__1Type">
            <summary>Sets the shim of ConfigurationItemFactory.&lt;PreloadAssembly&gt;b__1(Type t)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimDefaultParameterAttribute">
            <summary>Shim type of NLog.Config.DefaultParameterAttribute</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimDefaultParameterAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimDefaultParameterAttribute.#ctor(NLog.Config.DefaultParameterAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimDefaultParameterAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimDefaultParameterAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimDefaultParameterAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimDefaultParameterAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimDefaultParameterAttribute.Constructor">
            <summary>Sets the shim of DefaultParameterAttribute.DefaultParameterAttribute()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimInstallationContext">
            <summary>Shim type of NLog.Config.InstallationContext</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimInstallationContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimInstallationContext.#ctor(NLog.Config.InstallationContext)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimInstallationContext.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.CreateLogEvent">
            <summary>Sets the shim of InstallationContext.CreateLogEvent()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.DebugStringObjectArray">
            <summary>Sets the shim of InstallationContext.Debug(String message, Object[] arguments)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.Dispose">
            <summary>Sets the shim of InstallationContext.Dispose()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.ErrorStringObjectArray">
            <summary>Sets the shim of InstallationContext.Error(String message, Object[] arguments)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.IgnoreFailuresGet">
            <summary>Sets the shim of InstallationContext.get_IgnoreFailures()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.IgnoreFailuresSetBoolean">
            <summary>Sets the shim of InstallationContext.set_IgnoreFailures(Boolean value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.InfoStringObjectArray">
            <summary>Sets the shim of InstallationContext.Info(String message, Object[] arguments)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.LogLevelGet">
            <summary>Sets the shim of InstallationContext.get_LogLevel()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.LogLevelSetLogLevel">
            <summary>Sets the shim of InstallationContext.set_LogLevel(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.LogLogLevelStringObjectArray">
            <summary>Sets the shim of InstallationContext.Log(LogLevel logLevel, String message, Object[] arguments)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.LogOutputGet">
            <summary>Sets the shim of InstallationContext.get_LogOutput()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.LogOutputSetTextWriter">
            <summary>Sets the shim of InstallationContext.set_LogOutput(TextWriter value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.ParametersGet">
            <summary>Sets the shim of InstallationContext.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.ParametersSetIDictionaryOfStringString">
            <summary>Sets the shim of InstallationContext.set_Parameters(IDictionary`2&lt;String,String&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.TraceStringObjectArray">
            <summary>Sets the shim of InstallationContext.Trace(String message, Object[] arguments)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.AllInstances.WarningStringObjectArray">
            <summary>Sets the shim of InstallationContext.Warning(String message, Object[] arguments)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimInstallationContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimInstallationContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimInstallationContext.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.Constructor">
            <summary>Sets the shim of InstallationContext.InstallationContext()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.ConstructorTextWriter">
            <summary>Sets the shim of InstallationContext.InstallationContext(TextWriter logOutput)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.CreateLogEvent">
            <summary>Sets the shim of InstallationContext.CreateLogEvent()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.DebugStringObjectArray">
            <summary>Sets the shim of InstallationContext.Debug(String message, Object[] arguments)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.Dispose">
            <summary>Sets the shim of InstallationContext.Dispose()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.ErrorStringObjectArray">
            <summary>Sets the shim of InstallationContext.Error(String message, Object[] arguments)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.IgnoreFailuresGet">
            <summary>Sets the shim of InstallationContext.get_IgnoreFailures()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.IgnoreFailuresSetBoolean">
            <summary>Sets the shim of InstallationContext.set_IgnoreFailures(Boolean value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.InfoStringObjectArray">
            <summary>Sets the shim of InstallationContext.Info(String message, Object[] arguments)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.LogLevelGet">
            <summary>Sets the shim of InstallationContext.get_LogLevel()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.LogLevelSetLogLevel">
            <summary>Sets the shim of InstallationContext.set_LogLevel(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.LogLogLevelStringObjectArray">
            <summary>Sets the shim of InstallationContext.Log(LogLevel logLevel, String message, Object[] arguments)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.LogOutputGet">
            <summary>Sets the shim of InstallationContext.get_LogOutput()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.LogOutputSetTextWriter">
            <summary>Sets the shim of InstallationContext.set_LogOutput(TextWriter value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.ParametersGet">
            <summary>Sets the shim of InstallationContext.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.ParametersSetIDictionaryOfStringString">
            <summary>Sets the shim of InstallationContext.set_Parameters(IDictionary`2&lt;String,String&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.StaticConstructor">
            <summary>Sets the shim of InstallationContext.InstallationContext()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.TraceStringObjectArray">
            <summary>Sets the shim of InstallationContext.Trace(String message, Object[] arguments)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimInstallationContext.WarningStringObjectArray">
            <summary>Sets the shim of InstallationContext.Warning(String message, Object[] arguments)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimLoggingConfiguration">
            <summary>Shim type of NLog.Config.LoggingConfiguration</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfiguration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfiguration.#ctor(NLog.Config.LoggingConfiguration)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AddRuleForAllLevelsStringString">
            <summary>Sets the shim of LoggingConfiguration.AddRuleForAllLevels(String targetName, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AddRuleForAllLevelsTargetString">
            <summary>Sets the shim of LoggingConfiguration.AddRuleForAllLevels(Target target, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AddRuleForOneLevelLogLevelStringString">
            <summary>Sets the shim of LoggingConfiguration.AddRuleForOneLevel(LogLevel level, String targetName, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AddRuleForOneLevelLogLevelTargetString">
            <summary>Sets the shim of LoggingConfiguration.AddRuleForOneLevel(LogLevel level, Target target, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AddRuleLogLevelLogLevelStringString">
            <summary>Sets the shim of LoggingConfiguration.AddRule(LogLevel minLevel, LogLevel maxLevel, String targetName, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AddRuleLogLevelLogLevelTargetString">
            <summary>Sets the shim of LoggingConfiguration.AddRule(LogLevel minLevel, LogLevel maxLevel, Target target, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AddTargetStringTarget">
            <summary>Sets the shim of LoggingConfiguration.AddTarget(String name, Target target)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AddTargetTarget">
            <summary>Sets the shim of LoggingConfiguration.AddTarget(Target target)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.AddRuleForAllLevelsStringString">
            <summary>Sets the shim of LoggingConfiguration.AddRuleForAllLevels(String targetName, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.AddRuleForAllLevelsTargetString">
            <summary>Sets the shim of LoggingConfiguration.AddRuleForAllLevels(Target target, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.AddRuleForOneLevelLogLevelStringString">
            <summary>Sets the shim of LoggingConfiguration.AddRuleForOneLevel(LogLevel level, String targetName, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.AddRuleForOneLevelLogLevelTargetString">
            <summary>Sets the shim of LoggingConfiguration.AddRuleForOneLevel(LogLevel level, Target target, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.AddRuleLogLevelLogLevelStringString">
            <summary>Sets the shim of LoggingConfiguration.AddRule(LogLevel minLevel, LogLevel maxLevel, String targetName, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.AddRuleLogLevelLogLevelTargetString">
            <summary>Sets the shim of LoggingConfiguration.AddRule(LogLevel minLevel, LogLevel maxLevel, Target target, String loggerNamePattern)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.AddTargetStringTarget">
            <summary>Sets the shim of LoggingConfiguration.AddTarget(String name, Target target)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.AddTargetTarget">
            <summary>Sets the shim of LoggingConfiguration.AddTarget(Target target)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.AllTargetsGet">
            <summary>Sets the shim of LoggingConfiguration.get_AllTargets()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.Close">
            <summary>Sets the shim of LoggingConfiguration.Close()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.ConfiguredNamedTargetsGet">
            <summary>Sets the shim of LoggingConfiguration.get_ConfiguredNamedTargets()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.CopyVariablesIDictionaryOfStringSimpleLayout">
            <summary>Sets the shim of LoggingConfiguration.CopyVariables(IDictionary`2&lt;String,SimpleLayout&gt; masterVariables)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.DefaultCultureInfoGet">
            <summary>Sets the shim of LoggingConfiguration.get_DefaultCultureInfo()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.DefaultCultureInfoSetCultureInfo">
            <summary>Sets the shim of LoggingConfiguration.set_DefaultCultureInfo(CultureInfo value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.Dump">
            <summary>Sets the shim of LoggingConfiguration.Dump()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.EnsureInitialized">
            <summary>Sets the shim of LoggingConfiguration.EnsureInitialized()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.ExceptionLoggingOldStyleGet">
            <summary>Sets the shim of LoggingConfiguration.get_ExceptionLoggingOldStyle()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.ExceptionLoggingOldStyleSetBoolean">
            <summary>Sets the shim of LoggingConfiguration.set_ExceptionLoggingOldStyle(Boolean value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.FileNamesToWatchGet">
            <summary>Sets the shim of LoggingConfiguration.get_FileNamesToWatch()</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.FindTargetByNameOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NLog.Config.LoggingConfiguration,System.String,``0})">
            <summary>Sets the shim of LoggingConfiguration.FindTargetByName(String name)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.FindTargetByNameString">
            <summary>Sets the shim of LoggingConfiguration.FindTargetByName(String name)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.FlushAllTargetsAsyncContinuation">
            <summary>Sets the shim of LoggingConfiguration.FlushAllTargets(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.GetInstallableItems">
            <summary>Sets the shim of LoggingConfiguration.GetInstallableItems()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.InitializeAll">
            <summary>Sets the shim of LoggingConfiguration.InitializeAll()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.InstallInstallationContext">
            <summary>Sets the shim of LoggingConfiguration.Install(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.LoggingRulesGet">
            <summary>Sets the shim of LoggingConfiguration.get_LoggingRules()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.LoggingRulesSetIListOfLoggingRule">
            <summary>Sets the shim of LoggingConfiguration.set_LoggingRules(IList`1&lt;LoggingRule&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.Reload">
            <summary>Sets the shim of LoggingConfiguration.Reload()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.RemoveTargetString">
            <summary>Sets the shim of LoggingConfiguration.RemoveTarget(String name)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.UninstallInstallationContext">
            <summary>Sets the shim of LoggingConfiguration.Uninstall(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.ValidateConfig">
            <summary>Sets the shim of LoggingConfiguration.ValidateConfig()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllInstances.VariablesGet">
            <summary>Sets the shim of LoggingConfiguration.get_Variables()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.AllTargetsGet">
            <summary>Sets the shim of LoggingConfiguration.get_AllTargets()</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfiguration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfiguration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.Close">
            <summary>Sets the shim of LoggingConfiguration.Close()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.ConfiguredNamedTargetsGet">
            <summary>Sets the shim of LoggingConfiguration.get_ConfiguredNamedTargets()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.Constructor">
            <summary>Sets the shim of LoggingConfiguration.LoggingConfiguration()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.CopyVariablesIDictionaryOfStringSimpleLayout">
            <summary>Sets the shim of LoggingConfiguration.CopyVariables(IDictionary`2&lt;String,SimpleLayout&gt; masterVariables)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.DefaultCultureInfoGet">
            <summary>Sets the shim of LoggingConfiguration.get_DefaultCultureInfo()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.DefaultCultureInfoSetCultureInfo">
            <summary>Sets the shim of LoggingConfiguration.set_DefaultCultureInfo(CultureInfo value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.Dump">
            <summary>Sets the shim of LoggingConfiguration.Dump()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.EnsureInitialized">
            <summary>Sets the shim of LoggingConfiguration.EnsureInitialized()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.ExceptionLoggingOldStyleGet">
            <summary>Sets the shim of LoggingConfiguration.get_ExceptionLoggingOldStyle()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.ExceptionLoggingOldStyleSetBoolean">
            <summary>Sets the shim of LoggingConfiguration.set_ExceptionLoggingOldStyle(Boolean value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.FileNamesToWatchGet">
            <summary>Sets the shim of LoggingConfiguration.get_FileNamesToWatch()</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfiguration.FindTargetByNameOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets the shim of LoggingConfiguration.FindTargetByName(String name)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.FindTargetByNameString">
            <summary>Sets the shim of LoggingConfiguration.FindTargetByName(String name)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.FlushAllTargetsAsyncContinuation">
            <summary>Sets the shim of LoggingConfiguration.FlushAllTargets(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.GetInstallableItems">
            <summary>Sets the shim of LoggingConfiguration.GetInstallableItems()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.InitializeAll">
            <summary>Sets the shim of LoggingConfiguration.InitializeAll()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.InstallInstallationContext">
            <summary>Sets the shim of LoggingConfiguration.Install(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.LoggingRulesGet">
            <summary>Sets the shim of LoggingConfiguration.get_LoggingRules()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.LoggingRulesSetIListOfLoggingRule">
            <summary>Sets the shim of LoggingConfiguration.set_LoggingRules(IList`1&lt;LoggingRule&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.Reload">
            <summary>Sets the shim of LoggingConfiguration.Reload()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.RemoveTargetString">
            <summary>Sets the shim of LoggingConfiguration.RemoveTarget(String name)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.StaticConstructor">
            <summary>Sets the shim of LoggingConfiguration.LoggingConfiguration()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.UninstallInstallationContext">
            <summary>Sets the shim of LoggingConfiguration.Uninstall(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.ValidateConfig">
            <summary>Sets the shim of LoggingConfiguration.ValidateConfig()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration.VariablesGet">
            <summary>Sets the shim of LoggingConfiguration.get_Variables()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfiguration._FlushAllTargetsb__0TargetAsyncContinuation">
            <summary>Sets the shim of LoggingConfiguration.&lt;FlushAllTargets&gt;b__0(Target target, AsyncContinuation cont)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs">
            <summary>Shim type of NLog.Config.LoggingConfigurationChangedEventArgs</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.#ctor(NLog.Config.LoggingConfigurationChangedEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.AllInstances.NewConfigurationGet">
            <summary>Sets the shim of LoggingConfigurationChangedEventArgs.get_NewConfiguration()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.AllInstances.NewConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of LoggingConfigurationChangedEventArgs.set_NewConfiguration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.AllInstances.OldConfigurationGet">
            <summary>Sets the shim of LoggingConfigurationChangedEventArgs.get_OldConfiguration()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.AllInstances.OldConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of LoggingConfigurationChangedEventArgs.set_OldConfiguration(LoggingConfiguration value)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.ConstructorLoggingConfigurationLoggingConfiguration">
            <summary>Sets the shim of LoggingConfigurationChangedEventArgs.LoggingConfigurationChangedEventArgs(LoggingConfiguration oldConfiguration, LoggingConfiguration newConfiguration)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.NewConfigurationGet">
            <summary>Sets the shim of LoggingConfigurationChangedEventArgs.get_NewConfiguration()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.NewConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of LoggingConfigurationChangedEventArgs.set_NewConfiguration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.OldConfigurationGet">
            <summary>Sets the shim of LoggingConfigurationChangedEventArgs.get_OldConfiguration()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationChangedEventArgs.OldConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of LoggingConfigurationChangedEventArgs.set_OldConfiguration(LoggingConfiguration value)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs">
            <summary>Shim type of NLog.Config.LoggingConfigurationReloadedEventArgs</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.#ctor(NLog.Config.LoggingConfigurationReloadedEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.AllInstances.ExceptionGet">
            <summary>Sets the shim of LoggingConfigurationReloadedEventArgs.get_Exception()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.AllInstances.ExceptionSetException">
            <summary>Sets the shim of LoggingConfigurationReloadedEventArgs.set_Exception(Exception value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.AllInstances.SucceededGet">
            <summary>Sets the shim of LoggingConfigurationReloadedEventArgs.get_Succeeded()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.AllInstances.SucceededSetBoolean">
            <summary>Sets the shim of LoggingConfigurationReloadedEventArgs.set_Succeeded(Boolean value)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.ConstructorBoolean">
            <summary>Sets the shim of LoggingConfigurationReloadedEventArgs.LoggingConfigurationReloadedEventArgs(Boolean succeeded)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.ConstructorBooleanException">
            <summary>Sets the shim of LoggingConfigurationReloadedEventArgs.LoggingConfigurationReloadedEventArgs(Boolean succeeded, Exception exception)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.ExceptionGet">
            <summary>Sets the shim of LoggingConfigurationReloadedEventArgs.get_Exception()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.ExceptionSetException">
            <summary>Sets the shim of LoggingConfigurationReloadedEventArgs.set_Exception(Exception value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.SucceededGet">
            <summary>Sets the shim of LoggingConfigurationReloadedEventArgs.get_Succeeded()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingConfigurationReloadedEventArgs.SucceededSetBoolean">
            <summary>Sets the shim of LoggingConfigurationReloadedEventArgs.set_Succeeded(Boolean value)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimLoggingRule">
            <summary>Shim type of NLog.Config.LoggingRule</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingRule.#ctor(NLog.Config.LoggingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimLoggingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.ChildRulesGet">
            <summary>Sets the shim of LoggingRule.get_ChildRules()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.ChildRulesSetIListOfLoggingRule">
            <summary>Sets the shim of LoggingRule.set_ChildRules(IList`1&lt;LoggingRule&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.DisableLoggingForLevelLogLevel">
            <summary>Sets the shim of LoggingRule.DisableLoggingForLevel(LogLevel level)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.EnableLoggingForLevelLogLevel">
            <summary>Sets the shim of LoggingRule.EnableLoggingForLevel(LogLevel level)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.EnableLoggingForLevelsLogLevelLogLevel">
            <summary>Sets the shim of LoggingRule.EnableLoggingForLevels(LogLevel minLevel, LogLevel maxLevel)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.FiltersGet">
            <summary>Sets the shim of LoggingRule.get_Filters()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.FiltersSetIListOfFilter">
            <summary>Sets the shim of LoggingRule.set_Filters(IList`1&lt;Filter&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.FinalGet">
            <summary>Sets the shim of LoggingRule.get_Final()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.FinalSetBoolean">
            <summary>Sets the shim of LoggingRule.set_Final(Boolean value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.IsLoggingEnabledForLevelLogLevel">
            <summary>Sets the shim of LoggingRule.IsLoggingEnabledForLevel(LogLevel level)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.LevelsGet">
            <summary>Sets the shim of LoggingRule.get_Levels()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.LoggerNamePatternGet">
            <summary>Sets the shim of LoggingRule.get_LoggerNamePattern()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.LoggerNamePatternSetString">
            <summary>Sets the shim of LoggingRule.set_LoggerNamePattern(String value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.NameMatchesString">
            <summary>Sets the shim of LoggingRule.NameMatches(String loggerName)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.TargetsGet">
            <summary>Sets the shim of LoggingRule.get_Targets()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.TargetsSetIListOfTarget">
            <summary>Sets the shim of LoggingRule.set_Targets(IList`1&lt;Target&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.AllInstances.ToString01">
            <summary>Sets the shim of LoggingRule.ToString()</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimLoggingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.ChildRulesGet">
            <summary>Sets the shim of LoggingRule.get_ChildRules()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.ChildRulesSetIListOfLoggingRule">
            <summary>Sets the shim of LoggingRule.set_ChildRules(IList`1&lt;LoggingRule&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.Constructor">
            <summary>Sets the shim of LoggingRule.LoggingRule()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.ConstructorStringLogLevelLogLevelTarget">
            <summary>Sets the shim of LoggingRule.LoggingRule(String loggerNamePattern, LogLevel minLevel, LogLevel maxLevel, Target target)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.ConstructorStringLogLevelTarget">
            <summary>Sets the shim of LoggingRule.LoggingRule(String loggerNamePattern, LogLevel minLevel, Target target)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.ConstructorStringTarget">
            <summary>Sets the shim of LoggingRule.LoggingRule(String loggerNamePattern, Target target)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.DisableLoggingForLevelLogLevel">
            <summary>Sets the shim of LoggingRule.DisableLoggingForLevel(LogLevel level)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.EnableLoggingForLevelLogLevel">
            <summary>Sets the shim of LoggingRule.EnableLoggingForLevel(LogLevel level)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.EnableLoggingForLevelsLogLevelLogLevel">
            <summary>Sets the shim of LoggingRule.EnableLoggingForLevels(LogLevel minLevel, LogLevel maxLevel)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.FiltersGet">
            <summary>Sets the shim of LoggingRule.get_Filters()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.FiltersSetIListOfFilter">
            <summary>Sets the shim of LoggingRule.set_Filters(IList`1&lt;Filter&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.FinalGet">
            <summary>Sets the shim of LoggingRule.get_Final()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.FinalSetBoolean">
            <summary>Sets the shim of LoggingRule.set_Final(Boolean value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.IsLoggingEnabledForLevelLogLevel">
            <summary>Sets the shim of LoggingRule.IsLoggingEnabledForLevel(LogLevel level)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.LevelsGet">
            <summary>Sets the shim of LoggingRule.get_Levels()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.LoggerNamePatternGet">
            <summary>Sets the shim of LoggingRule.get_LoggerNamePattern()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.LoggerNamePatternSetString">
            <summary>Sets the shim of LoggingRule.set_LoggerNamePattern(String value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.NameMatchesString">
            <summary>Sets the shim of LoggingRule.NameMatches(String loggerName)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.TargetsGet">
            <summary>Sets the shim of LoggingRule.get_Targets()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.TargetsSetIListOfTarget">
            <summary>Sets the shim of LoggingRule.set_Targets(IList`1&lt;Target&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimLoggingRule.ToString">
            <summary>Sets the shim of LoggingRule.ToString()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimNLogConfigurationIgnorePropertyAttribute">
            <summary>Shim type of NLog.Config.NLogConfigurationIgnorePropertyAttribute</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNLogConfigurationIgnorePropertyAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNLogConfigurationIgnorePropertyAttribute.#ctor(NLog.Config.NLogConfigurationIgnorePropertyAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimNLogConfigurationIgnorePropertyAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNLogConfigurationIgnorePropertyAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNLogConfigurationIgnorePropertyAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimNLogConfigurationIgnorePropertyAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimNLogConfigurationIgnorePropertyAttribute.Constructor">
            <summary>Sets the shim of NLogConfigurationIgnorePropertyAttribute.NLogConfigurationIgnorePropertyAttribute()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimNLogConfigurationItemAttribute">
            <summary>Shim type of NLog.Config.NLogConfigurationItemAttribute</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNLogConfigurationItemAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNLogConfigurationItemAttribute.#ctor(NLog.Config.NLogConfigurationItemAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimNLogConfigurationItemAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNLogConfigurationItemAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNLogConfigurationItemAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimNLogConfigurationItemAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimNLogConfigurationItemAttribute.Constructor">
            <summary>Sets the shim of NLogConfigurationItemAttribute.NLogConfigurationItemAttribute()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimNameBaseAttribute">
            <summary>Shim type of NLog.Config.NameBaseAttribute</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNameBaseAttribute.#ctor(NLog.Config.NameBaseAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimNameBaseAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimNameBaseAttribute.AllInstances.NameGet">
            <summary>Sets the shim of NameBaseAttribute.get_Name()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimNameBaseAttribute.AllInstances.NameSetString">
            <summary>Sets the shim of NameBaseAttribute.set_Name(String value)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNameBaseAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimNameBaseAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimNameBaseAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimNameBaseAttribute.ConstructorString">
            <summary>Sets the shim of NameBaseAttribute.NameBaseAttribute(String name)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimNameBaseAttribute.NameGet">
            <summary>Sets the shim of NameBaseAttribute.get_Name()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimNameBaseAttribute.NameSetString">
            <summary>Sets the shim of NameBaseAttribute.set_Name(String value)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimRequiredParameterAttribute">
            <summary>Shim type of NLog.Config.RequiredParameterAttribute</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimRequiredParameterAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimRequiredParameterAttribute.#ctor(NLog.Config.RequiredParameterAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimRequiredParameterAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimRequiredParameterAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimRequiredParameterAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimRequiredParameterAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimRequiredParameterAttribute.Constructor">
            <summary>Sets the shim of RequiredParameterAttribute.RequiredParameterAttribute()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimSimpleConfigurator">
            <summary>Shim type of NLog.Config.SimpleConfigurator</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimSimpleConfigurator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimSimpleConfigurator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimSimpleConfigurator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimSimpleConfigurator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimSimpleConfigurator.ConfigureForConsoleLogging">
            <summary>Sets the shim of SimpleConfigurator.ConfigureForConsoleLogging()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimSimpleConfigurator.ConfigureForConsoleLoggingLogLevel">
            <summary>Sets the shim of SimpleConfigurator.ConfigureForConsoleLogging(LogLevel minLevel)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimSimpleConfigurator.ConfigureForFileLoggingString">
            <summary>Sets the shim of SimpleConfigurator.ConfigureForFileLogging(String fileName)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimSimpleConfigurator.ConfigureForFileLoggingStringLogLevel">
            <summary>Sets the shim of SimpleConfigurator.ConfigureForFileLogging(String fileName, LogLevel minLevel)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimSimpleConfigurator.ConfigureForTargetLoggingTarget">
            <summary>Sets the shim of SimpleConfigurator.ConfigureForTargetLogging(Target target)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimSimpleConfigurator.ConfigureForTargetLoggingTargetLogLevel">
            <summary>Sets the shim of SimpleConfigurator.ConfigureForTargetLogging(Target target, LogLevel minLevel)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimThreadAgnosticAttribute">
            <summary>Shim type of NLog.Config.ThreadAgnosticAttribute</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimThreadAgnosticAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimThreadAgnosticAttribute.#ctor(NLog.Config.ThreadAgnosticAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimThreadAgnosticAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimThreadAgnosticAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimThreadAgnosticAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimThreadAgnosticAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimThreadAgnosticAttribute.Constructor">
            <summary>Sets the shim of ThreadAgnosticAttribute.ThreadAgnosticAttribute()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimXmlLoggingConfiguration">
            <summary>Shim type of NLog.Config.XmlLoggingConfiguration</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimXmlLoggingConfiguration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimXmlLoggingConfiguration.#ctor(NLog.Config.XmlLoggingConfiguration)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.AutoReloadGet">
            <summary>Sets the shim of XmlLoggingConfiguration.get_AutoReload()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.AutoReloadSetBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.set_AutoReload(Boolean value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.CheckUnusedTargets">
            <summary>Sets the shim of XmlLoggingConfiguration.CheckUnusedTargets()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.ConfigurationItemFactoryGet">
            <summary>Sets the shim of XmlLoggingConfiguration.get_ConfigurationItemFactory()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.ConfigureFromFileStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.ConfigureFromFile(String fileName, Boolean autoReloadDefault)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.ConfigureFromFilesByMaskStringStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.ConfigureFromFilesByMask(String baseDirectory, String fileMask, Boolean autoReloadDefault)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.ExpandSimpleVariablesString">
            <summary>Sets the shim of XmlLoggingConfiguration.ExpandSimpleVariables(String input)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.FileNamesToWatchGet">
            <summary>Sets the shim of XmlLoggingConfiguration.get_FileNamesToWatch()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.InitializeSucceededGet">
            <summary>Sets the shim of XmlLoggingConfiguration.get_InitializeSucceeded()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.InitializeSucceededSetNullableOfBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.set_InitializeSucceeded(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.InitializeXmlReaderStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.Initialize(XmlReader reader, String fileName, Boolean ignoreErrors)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AllInstances.Reload">
            <summary>Sets the shim of XmlLoggingConfiguration.Reload()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AppConfigGet">
            <summary>Sets the shim of XmlLoggingConfiguration.get_AppConfig()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AutoReloadGet">
            <summary>Sets the shim of XmlLoggingConfiguration.get_AutoReload()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.AutoReloadSetBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.set_AutoReload(Boolean value)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimXmlLoggingConfiguration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Config.Fakes.ShimXmlLoggingConfiguration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.CheckUnusedTargets">
            <summary>Sets the shim of XmlLoggingConfiguration.CheckUnusedTargets()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.CleanSpacesString">
            <summary>Sets the shim of XmlLoggingConfiguration.CleanSpaces(String s)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConfigurationItemFactoryGet">
            <summary>Sets the shim of XmlLoggingConfiguration.get_ConfigurationItemFactory()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConfigureFromFileStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.ConfigureFromFile(String fileName, Boolean autoReloadDefault)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConfigureFromFilesByMaskStringStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.ConfigureFromFilesByMask(String baseDirectory, String fileMask, Boolean autoReloadDefault)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConstructorString">
            <summary>Sets the shim of XmlLoggingConfiguration.XmlLoggingConfiguration(String fileName)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConstructorStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.XmlLoggingConfiguration(String fileName, Boolean ignoreErrors)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConstructorStringBooleanLogFactory">
            <summary>Sets the shim of XmlLoggingConfiguration.XmlLoggingConfiguration(String fileName, Boolean ignoreErrors, LogFactory logFactory)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConstructorStringLogFactory">
            <summary>Sets the shim of XmlLoggingConfiguration.XmlLoggingConfiguration(String fileName, LogFactory logFactory)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConstructorXmlElementString">
            <summary>Sets the shim of XmlLoggingConfiguration.XmlLoggingConfiguration(XmlElement element, String fileName)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConstructorXmlElementStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.XmlLoggingConfiguration(XmlElement element, String fileName, Boolean ignoreErrors)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConstructorXmlReaderString">
            <summary>Sets the shim of XmlLoggingConfiguration.XmlLoggingConfiguration(XmlReader reader, String fileName)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConstructorXmlReaderStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.XmlLoggingConfiguration(XmlReader reader, String fileName, Boolean ignoreErrors)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConstructorXmlReaderStringBooleanLogFactory">
            <summary>Sets the shim of XmlLoggingConfiguration.XmlLoggingConfiguration(XmlReader reader, String fileName, Boolean ignoreErrors, LogFactory logFactory)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ConstructorXmlReaderStringLogFactory">
            <summary>Sets the shim of XmlLoggingConfiguration.XmlLoggingConfiguration(XmlReader reader, String fileName, LogFactory logFactory)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.CreateFileReaderString">
            <summary>Sets the shim of XmlLoggingConfiguration.CreateFileReader(String fileName)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ExpandSimpleVariablesString">
            <summary>Sets the shim of XmlLoggingConfiguration.ExpandSimpleVariables(String input)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.FileNamesToWatchGet">
            <summary>Sets the shim of XmlLoggingConfiguration.get_FileNamesToWatch()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.GetCandidateConfigFilePaths">
            <summary>Sets the shim of XmlLoggingConfiguration.GetCandidateConfigFilePaths()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.GetFileLookupKeyString">
            <summary>Sets the shim of XmlLoggingConfiguration.GetFileLookupKey(String fileName)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.InitializeSucceededGet">
            <summary>Sets the shim of XmlLoggingConfiguration.get_InitializeSucceeded()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.InitializeSucceededSetNullableOfBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.set_InitializeSucceeded(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.InitializeXmlReaderStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.Initialize(XmlReader reader, String fileName, Boolean ignoreErrors)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.IsTargetElementString">
            <summary>Sets the shim of XmlLoggingConfiguration.IsTargetElement(String name)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.IsTargetRefElementString">
            <summary>Sets the shim of XmlLoggingConfiguration.IsTargetRefElement(String name)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.Reload">
            <summary>Sets the shim of XmlLoggingConfiguration.Reload()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.ResetCandidateConfigFilePath">
            <summary>Sets the shim of XmlLoggingConfiguration.ResetCandidateConfigFilePath()</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.SetCandidateConfigFilePathsIEnumerableOfString">
            <summary>Sets the shim of XmlLoggingConfiguration.SetCandidateConfigFilePaths(IEnumerable`1&lt;String&gt; filePaths)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.StripOptionalNamespacePrefixString">
            <summary>Sets the shim of XmlLoggingConfiguration.StripOptionalNamespacePrefix(String attributeValue)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration.WrapWithAsyncTargetWrapperTarget">
            <summary>Sets the shim of XmlLoggingConfiguration.WrapWithAsyncTargetWrapper(Target target)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration._CheckUnusedTargetsb__6LoggingRule">
            <summary>Sets the shim of XmlLoggingConfiguration.&lt;CheckUnusedTargets&gt;b__6(LoggingRule r)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration._CheckUnusedTargetsb__7Target">
            <summary>Sets the shim of XmlLoggingConfiguration.&lt;CheckUnusedTargets&gt;b__7(Target t)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration._get_AutoReloadb__0Boolean">
            <summary>Sets the shim of XmlLoggingConfiguration.&lt;get_AutoReload&gt;b__0(Boolean mustAutoReload)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration._get_FileNamesToWatchb__2KeyValuePairOfStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.&lt;get_FileNamesToWatch&gt;b__2(KeyValuePair`2&lt;String,Boolean&gt; entry)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.ShimXmlLoggingConfiguration._get_FileNamesToWatchb__3KeyValuePairOfStringBoolean">
            <summary>Sets the shim of XmlLoggingConfiguration.&lt;get_FileNamesToWatch&gt;b__3(KeyValuePair`2&lt;String,Boolean&gt; entry)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.StubAssemblyLoadingEventArgs">
            <summary>Stub type of NLog.Config.AssemblyLoadingEventArgs</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubAssemblyLoadingEventArgs.#ctor(System.Reflection.Assembly)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubAssemblyLoadingEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubAssemblyLoadingEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubAssemblyLoadingEventArgs</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubAssemblyLoadingEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubAssemblyLoadingEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Config.Fakes.StubConfigurationItemFactory">
            <summary>Stub type of NLog.Config.ConfigurationItemFactory</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubConfigurationItemFactory.#ctor(System.Reflection.Assembly[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubConfigurationItemFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubConfigurationItemFactory.InitializeStub">
            <summary>Initializes a new instance of type StubConfigurationItemFactory</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubConfigurationItemFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubConfigurationItemFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Config.Fakes.StubIInstallable">
            <summary>Stub type of NLog.Config.IInstallable</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubIInstallable.#ctor">
            <summary>Initializes a new instance of type StubIInstallable</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubIInstallable.InstallInstallationContext">
            <summary>Sets the stub of IInstallable.Install(InstallationContext installationContext)</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubIInstallable.IsInstalledInstallationContext">
            <summary>Sets the stub of IInstallable.IsInstalled(InstallationContext installationContext)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubIInstallable.NLog#Config#IInstallable#Install(NLog.Config.InstallationContext)">
            <summary>Sets the stub of IInstallable.Install(InstallationContext installationContext)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubIInstallable.NLog#Config#IInstallable#IsInstalled(NLog.Config.InstallationContext)">
            <summary>Sets the stub of IInstallable.IsInstalled(InstallationContext installationContext)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubIInstallable.NLog#Config#IInstallable#Uninstall(NLog.Config.InstallationContext)">
            <summary>Sets the stub of IInstallable.Uninstall(InstallationContext installationContext)</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubIInstallable.UninstallInstallationContext">
            <summary>Sets the stub of IInstallable.Uninstall(InstallationContext installationContext)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.StubINamedItemFactory`2">
            <summary>Stub type of NLog.Config.INamedItemFactory`2</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubINamedItemFactory`2.#ctor">
            <summary>Initializes a new instance of type StubINamedItemFactory</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubINamedItemFactory`2.CreateInstanceString">
            <summary>Sets the stub of INamedItemFactory`2.CreateInstance(String itemName)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubINamedItemFactory`2.NLog#Config#INamedItemFactory{TInstanceType,TDefinitionType}#CreateInstance(System.String)">
            <summary>Sets the stub of INamedItemFactory`2.CreateInstance(String itemName)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubINamedItemFactory`2.NLog#Config#INamedItemFactory{TInstanceType,TDefinitionType}#RegisterDefinition(System.String,`1)">
            <summary>Sets the stub of INamedItemFactory`2.RegisterDefinition(String itemName, !1 itemDefinition)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubINamedItemFactory`2.NLog#Config#INamedItemFactory{TInstanceType,TDefinitionType}#TryCreateInstance(System.String,`0@)">
            <summary>Sets the stub of INamedItemFactory`2.TryCreateInstance(String itemName, !0&amp; result)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubINamedItemFactory`2.NLog#Config#INamedItemFactory{TInstanceType,TDefinitionType}#TryGetDefinition(System.String,`1@)">
            <summary>Sets the stub of INamedItemFactory`2.TryGetDefinition(String itemName, !1&amp; result)</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubINamedItemFactory`2.RegisterDefinitionStringT1">
            <summary>Sets the stub of INamedItemFactory`2.RegisterDefinition(String itemName, !1 itemDefinition)</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubINamedItemFactory`2.TryCreateInstanceStringT0Out">
            <summary>Sets the stub of INamedItemFactory`2.TryCreateInstance(String itemName, !0&amp; result)</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubINamedItemFactory`2.TryGetDefinitionStringT1Out">
            <summary>Sets the stub of INamedItemFactory`2.TryGetDefinition(String itemName, !1&amp; result)</summary>
        </member>
        <member name="T:NLog.Config.Fakes.StubLoggingConfiguration">
            <summary>Stub type of NLog.Config.LoggingConfiguration</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingConfiguration.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingConfiguration.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingConfiguration.FileNamesToWatch">
            <summary>Sets the stub of LoggingConfiguration.get_FileNamesToWatch()</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubLoggingConfiguration.FileNamesToWatchGet">
            <summary>Sets the stub of LoggingConfiguration.get_FileNamesToWatch()</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingConfiguration.InitializeStub">
            <summary>Initializes a new instance of type StubLoggingConfiguration</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingConfiguration.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingConfiguration.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingConfiguration.Reload">
            <summary>Sets the stub of LoggingConfiguration.Reload()</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubLoggingConfiguration.Reload01">
            <summary>Sets the stub of LoggingConfiguration.Reload()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.StubLoggingConfigurationChangedEventArgs">
            <summary>Stub type of NLog.Config.LoggingConfigurationChangedEventArgs</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingConfigurationChangedEventArgs.#ctor(NLog.Config.LoggingConfiguration,NLog.Config.LoggingConfiguration)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingConfigurationChangedEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingConfigurationChangedEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubLoggingConfigurationChangedEventArgs</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingConfigurationChangedEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingConfigurationChangedEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Config.Fakes.StubLoggingConfigurationReloadedEventArgs">
            <summary>Stub type of NLog.Config.LoggingConfigurationReloadedEventArgs</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingConfigurationReloadedEventArgs.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingConfigurationReloadedEventArgs.#ctor(System.Boolean,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingConfigurationReloadedEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingConfigurationReloadedEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubLoggingConfigurationReloadedEventArgs</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingConfigurationReloadedEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingConfigurationReloadedEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Config.Fakes.StubLoggingRule">
            <summary>Stub type of NLog.Config.LoggingRule</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingRule.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingRule.#ctor(System.String,NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingRule.#ctor(System.String,NLog.LogLevel,NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingRule.#ctor(System.String,NLog.LogLevel,NLog.LogLevel,NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingRule.InitializeStub">
            <summary>Initializes a new instance of type StubLoggingRule</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubLoggingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubLoggingRule.ToString">
            <summary>Sets the stub of LoggingRule.ToString()</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubLoggingRule.ToString01">
            <summary>Sets the stub of LoggingRule.ToString()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.StubNameBaseAttribute">
            <summary>Stub type of NLog.Config.NameBaseAttribute</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubNameBaseAttribute.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubNameBaseAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubNameBaseAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubNameBaseAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubNameBaseAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubNameBaseAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubNameBaseAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubNameBaseAttribute</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubNameBaseAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubNameBaseAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubNameBaseAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubNameBaseAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubNameBaseAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubNameBaseAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubNameBaseAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubNameBaseAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:NLog.Config.Fakes.StubXmlLoggingConfiguration">
            <summary>Stub type of NLog.Config.XmlLoggingConfiguration</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubXmlLoggingConfiguration.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubXmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubXmlLoggingConfiguration.#ctor(System.String,NLog.LogFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubXmlLoggingConfiguration.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubXmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,NLog.LogFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubXmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubXmlLoggingConfiguration.#ctor(System.String,System.Boolean,NLog.LogFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubXmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,System.Boolean,NLog.LogFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubXmlLoggingConfiguration.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubXmlLoggingConfiguration.FileNamesToWatch">
            <summary>Sets the stub of XmlLoggingConfiguration.get_FileNamesToWatch()</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubXmlLoggingConfiguration.FileNamesToWatchGet">
            <summary>Sets the stub of XmlLoggingConfiguration.get_FileNamesToWatch()</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubXmlLoggingConfiguration.InitializeStub">
            <summary>Initializes a new instance of type StubXmlLoggingConfiguration</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubXmlLoggingConfiguration.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Config.Fakes.StubXmlLoggingConfiguration.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Config.Fakes.StubXmlLoggingConfiguration.Reload">
            <summary>Sets the stub of XmlLoggingConfiguration.Reload()</summary>
        </member>
        <member name="F:NLog.Config.Fakes.StubXmlLoggingConfiguration.Reload01">
            <summary>Sets the stub of XmlLoggingConfiguration.Reload()</summary>
        </member>
        <member name="T:NLog.Fakes.ShimGlobalDiagnosticsContext">
            <summary>Shim type of NLog.GlobalDiagnosticsContext</summary>
        </member>
        <member name="M:NLog.Fakes.ShimGlobalDiagnosticsContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimGlobalDiagnosticsContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimGlobalDiagnosticsContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.Clear">
            <summary>Sets the shim of GlobalDiagnosticsContext.Clear()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.ContainsString">
            <summary>Sets the shim of GlobalDiagnosticsContext.Contains(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.GetNames">
            <summary>Sets the shim of GlobalDiagnosticsContext.GetNames()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.GetObjectString">
            <summary>Sets the shim of GlobalDiagnosticsContext.GetObject(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.GetString">
            <summary>Sets the shim of GlobalDiagnosticsContext.Get(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.GetStringIFormatProvider">
            <summary>Sets the shim of GlobalDiagnosticsContext.Get(String item, IFormatProvider formatProvider)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.RemoveString">
            <summary>Sets the shim of GlobalDiagnosticsContext.Remove(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.SetStringObject">
            <summary>Sets the shim of GlobalDiagnosticsContext.Set(String item, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.SetStringString">
            <summary>Sets the shim of GlobalDiagnosticsContext.Set(String item, String value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimGlobalDiagnosticsContext.StaticConstructor">
            <summary>Sets the shim of GlobalDiagnosticsContext.GlobalDiagnosticsContext()</summary>
        </member>
        <member name="T:NLog.Fakes.ShimILoggerExtensions">
            <summary>Shim type of NLog.ILoggerExtensions</summary>
        </member>
        <member name="M:NLog.Fakes.ShimILoggerExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimILoggerExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimILoggerExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimILoggerExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimILoggerExtensions.DebugILoggerExceptionLogMessageGenerator">
            <summary>Sets the shim of ILoggerExtensions.Debug(ILogger logger, Exception exception, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimILoggerExtensions.ErrorILoggerExceptionLogMessageGenerator">
            <summary>Sets the shim of ILoggerExtensions.Error(ILogger logger, Exception exception, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimILoggerExtensions.FatalILoggerExceptionLogMessageGenerator">
            <summary>Sets the shim of ILoggerExtensions.Fatal(ILogger logger, Exception exception, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimILoggerExtensions.InfoILoggerExceptionLogMessageGenerator">
            <summary>Sets the shim of ILoggerExtensions.Info(ILogger logger, Exception exception, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimILoggerExtensions.LogILoggerLogLevelExceptionLogMessageGenerator">
            <summary>Sets the shim of ILoggerExtensions.Log(ILogger logger, LogLevel level, Exception exception, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimILoggerExtensions.TraceILoggerExceptionLogMessageGenerator">
            <summary>Sets the shim of ILoggerExtensions.Trace(ILogger logger, Exception exception, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimILoggerExtensions.WarnILoggerExceptionLogMessageGenerator">
            <summary>Sets the shim of ILoggerExtensions.Warn(ILogger logger, Exception exception, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogEventInfo">
            <summary>Shim type of NLog.LogEventInfo</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogEventInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogEventInfo.#ctor(NLog.LogEventInfo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AddCachedLayoutValueLayoutString">
            <summary>Sets the shim of LogEventInfo.AddCachedLayoutValue(Layout layout, String value)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogEventInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.AddCachedLayoutValueLayoutString">
            <summary>Sets the shim of LogEventInfo.AddCachedLayoutValue(Layout layout, String value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.CalcFormattedMessage">
            <summary>Sets the shim of LogEventInfo.CalcFormattedMessage()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.ContextGet">
            <summary>Sets the shim of LogEventInfo.get_Context()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.ExceptionGet">
            <summary>Sets the shim of LogEventInfo.get_Exception()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.ExceptionSetException">
            <summary>Sets the shim of LogEventInfo.set_Exception(Exception value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.FormatProviderGet">
            <summary>Sets the shim of LogEventInfo.get_FormatProvider()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.FormatProviderSetIFormatProvider">
            <summary>Sets the shim of LogEventInfo.set_FormatProvider(IFormatProvider value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.FormattedMessageGet">
            <summary>Sets the shim of LogEventInfo.get_FormattedMessage()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.HasPropertiesGet">
            <summary>Sets the shim of LogEventInfo.get_HasProperties()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.HasStackTraceGet">
            <summary>Sets the shim of LogEventInfo.get_HasStackTrace()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.LevelGet">
            <summary>Sets the shim of LogEventInfo.get_Level()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.LevelSetLogLevel">
            <summary>Sets the shim of LogEventInfo.set_Level(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.LoggerNameGet">
            <summary>Sets the shim of LogEventInfo.get_LoggerName()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.LoggerNameSetString">
            <summary>Sets the shim of LogEventInfo.set_LoggerName(String value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.LoggerShortNameGet">
            <summary>Sets the shim of LogEventInfo.get_LoggerShortName()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.MessageGet">
            <summary>Sets the shim of LogEventInfo.get_Message()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.MessageSetString">
            <summary>Sets the shim of LogEventInfo.set_Message(String value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.ParametersGet">
            <summary>Sets the shim of LogEventInfo.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.ParametersSetObjectArray">
            <summary>Sets the shim of LogEventInfo.set_Parameters(Object[] value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.PropertiesGet">
            <summary>Sets the shim of LogEventInfo.get_Properties()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.ResetFormattedMessage">
            <summary>Sets the shim of LogEventInfo.ResetFormattedMessage()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.SequenceIDGet">
            <summary>Sets the shim of LogEventInfo.get_SequenceID()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.SequenceIDSetInt32">
            <summary>Sets the shim of LogEventInfo.set_SequenceID(Int32 value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.SetStackTraceStackTraceInt32">
            <summary>Sets the shim of LogEventInfo.SetStackTrace(StackTrace stackTrace, Int32 userStackFrame)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.StackTraceGet">
            <summary>Sets the shim of LogEventInfo.get_StackTrace()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.StackTraceSetStackTrace">
            <summary>Sets the shim of LogEventInfo.set_StackTrace(StackTrace value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.TimeStampGet">
            <summary>Sets the shim of LogEventInfo.get_TimeStamp()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.TimeStampSetDateTime">
            <summary>Sets the shim of LogEventInfo.set_TimeStamp(DateTime value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.ToString01">
            <summary>Sets the shim of LogEventInfo.ToString()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.TryGetCachedLayoutValueLayoutStringOut">
            <summary>Sets the shim of LogEventInfo.TryGetCachedLayoutValue(Layout layout, String&amp; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.UserStackFrameGet">
            <summary>Sets the shim of LogEventInfo.get_UserStackFrame()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.UserStackFrameNumberGet">
            <summary>Sets the shim of LogEventInfo.get_UserStackFrameNumber()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.UserStackFrameNumberSetInt32">
            <summary>Sets the shim of LogEventInfo.set_UserStackFrameNumber(Int32 value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.AllInstances.WithContinuationAsyncContinuation">
            <summary>Sets the shim of LogEventInfo.WithContinuation(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogEventInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogEventInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.CalcFormattedMessage">
            <summary>Sets the shim of LogEventInfo.CalcFormattedMessage()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.Constructor">
            <summary>Sets the shim of LogEventInfo.LogEventInfo()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.ConstructorLogLevelStringIFormatProviderStringObjectArray">
            <summary>Sets the shim of LogEventInfo.LogEventInfo(LogLevel level, String loggerName, IFormatProvider formatProvider, String message, Object[] parameters)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.ConstructorLogLevelStringIFormatProviderStringObjectArrayException">
            <summary>Sets the shim of LogEventInfo.LogEventInfo(LogLevel level, String loggerName, IFormatProvider formatProvider, String message, Object[] parameters, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.ConstructorLogLevelStringString">
            <summary>Sets the shim of LogEventInfo.LogEventInfo(LogLevel level, String loggerName, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.ContextGet">
            <summary>Sets the shim of LogEventInfo.get_Context()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.CreateLogLevelStringExceptionIFormatProviderString">
            <summary>Sets the shim of LogEventInfo.Create(LogLevel logLevel, String loggerName, Exception exception, IFormatProvider formatProvider, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.CreateLogLevelStringExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of LogEventInfo.Create(LogLevel logLevel, String loggerName, Exception exception, IFormatProvider formatProvider, String message, Object[] parameters)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.CreateLogLevelStringIFormatProviderObject">
            <summary>Sets the shim of LogEventInfo.Create(LogLevel logLevel, String loggerName, IFormatProvider formatProvider, Object message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.CreateLogLevelStringIFormatProviderStringObjectArray">
            <summary>Sets the shim of LogEventInfo.Create(LogLevel logLevel, String loggerName, IFormatProvider formatProvider, String message, Object[] parameters)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.CreateLogLevelStringString">
            <summary>Sets the shim of LogEventInfo.Create(LogLevel logLevel, String loggerName, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.CreateLogLevelStringStringException">
            <summary>Sets the shim of LogEventInfo.Create(LogLevel logLevel, String loggerName, String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.CreateNullEvent">
            <summary>Sets the shim of LogEventInfo.CreateNullEvent()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.ExceptionGet">
            <summary>Sets the shim of LogEventInfo.get_Exception()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.ExceptionSetException">
            <summary>Sets the shim of LogEventInfo.set_Exception(Exception value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.FormatProviderGet">
            <summary>Sets the shim of LogEventInfo.get_FormatProvider()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.FormatProviderSetIFormatProvider">
            <summary>Sets the shim of LogEventInfo.set_FormatProvider(IFormatProvider value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.FormattedMessageGet">
            <summary>Sets the shim of LogEventInfo.get_FormattedMessage()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.HasPropertiesGet">
            <summary>Sets the shim of LogEventInfo.get_HasProperties()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.HasStackTraceGet">
            <summary>Sets the shim of LogEventInfo.get_HasStackTrace()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.IsSafeToDeferFormattingObject">
            <summary>Sets the shim of LogEventInfo.IsSafeToDeferFormatting(Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.LevelGet">
            <summary>Sets the shim of LogEventInfo.get_Level()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.LevelSetLogLevel">
            <summary>Sets the shim of LogEventInfo.set_Level(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.LoggerNameGet">
            <summary>Sets the shim of LogEventInfo.get_LoggerName()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.LoggerNameSetString">
            <summary>Sets the shim of LogEventInfo.set_LoggerName(String value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.LoggerShortNameGet">
            <summary>Sets the shim of LogEventInfo.get_LoggerShortName()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.MessageGet">
            <summary>Sets the shim of LogEventInfo.get_Message()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.MessageSetString">
            <summary>Sets the shim of LogEventInfo.set_Message(String value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.NeedToPreformatMessageObjectArray">
            <summary>Sets the shim of LogEventInfo.NeedToPreformatMessage(Object[] parameters)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.ParametersGet">
            <summary>Sets the shim of LogEventInfo.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.ParametersSetObjectArray">
            <summary>Sets the shim of LogEventInfo.set_Parameters(Object[] value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.PropertiesGet">
            <summary>Sets the shim of LogEventInfo.get_Properties()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.ResetFormattedMessage">
            <summary>Sets the shim of LogEventInfo.ResetFormattedMessage()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.SequenceIDGet">
            <summary>Sets the shim of LogEventInfo.get_SequenceID()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.SequenceIDSetInt32">
            <summary>Sets the shim of LogEventInfo.set_SequenceID(Int32 value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.SetStackTraceStackTraceInt32">
            <summary>Sets the shim of LogEventInfo.SetStackTrace(StackTrace stackTrace, Int32 userStackFrame)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.StackTraceGet">
            <summary>Sets the shim of LogEventInfo.get_StackTrace()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.StackTraceSetStackTrace">
            <summary>Sets the shim of LogEventInfo.set_StackTrace(StackTrace value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.StaticConstructor">
            <summary>Sets the shim of LogEventInfo.LogEventInfo()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.TimeStampGet">
            <summary>Sets the shim of LogEventInfo.get_TimeStamp()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.TimeStampSetDateTime">
            <summary>Sets the shim of LogEventInfo.set_TimeStamp(DateTime value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.ToString">
            <summary>Sets the shim of LogEventInfo.ToString()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.TryGetCachedLayoutValueLayoutStringOut">
            <summary>Sets the shim of LogEventInfo.TryGetCachedLayoutValue(Layout layout, String&amp; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.UserStackFrameGet">
            <summary>Sets the shim of LogEventInfo.get_UserStackFrame()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.UserStackFrameNumberGet">
            <summary>Sets the shim of LogEventInfo.get_UserStackFrameNumber()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.UserStackFrameNumberSetInt32">
            <summary>Sets the shim of LogEventInfo.set_UserStackFrameNumber(Int32 value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogEventInfo.WithContinuationAsyncContinuation">
            <summary>Sets the shim of LogEventInfo.WithContinuation(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogFactory">
            <summary>Shim type of NLog.LogFactory</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory.#ctor(NLog.LogFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.CloseTimeSpan">
            <summary>Sets the shim of LogFactory.Close(TimeSpan flushTimeout)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ConfigFileChangedObjectEventArgs">
            <summary>Sets the shim of LogFactory.ConfigFileChanged(Object sender, EventArgs args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ConfigurationChangedAddEventHandlerOfLoggingConfigurationChangedEventArgs">
            <summary>Sets the shim of LogFactory.add_ConfigurationChanged(EventHandler`1&lt;LoggingConfigurationChangedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ConfigurationChangedRemoveEventHandlerOfLoggingConfigurationChangedEventArgs">
            <summary>Sets the shim of LogFactory.remove_ConfigurationChanged(EventHandler`1&lt;LoggingConfigurationChangedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ConfigurationGet">
            <summary>Sets the shim of LogFactory.get_Configuration()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ConfigurationReloadedAddEventHandlerOfLoggingConfigurationReloadedEventArgs">
            <summary>Sets the shim of LogFactory.add_ConfigurationReloaded(EventHandler`1&lt;LoggingConfigurationReloadedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ConfigurationReloadedRemoveEventHandlerOfLoggingConfigurationReloadedEventArgs">
            <summary>Sets the shim of LogFactory.remove_ConfigurationReloaded(EventHandler`1&lt;LoggingConfigurationReloadedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of LogFactory.set_Configuration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.CreateNullLogger">
            <summary>Sets the shim of LogFactory.CreateNullLogger()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.DefaultCultureInfoGet">
            <summary>Sets the shim of LogFactory.get_DefaultCultureInfo()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.DisableLogging">
            <summary>Sets the shim of LogFactory.DisableLogging()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.Dispose">
            <summary>Sets the shim of LogFactory.Dispose()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.DisposeBoolean">
            <summary>Sets the shim of LogFactory.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.EnableLogging">
            <summary>Sets the shim of LogFactory.EnableLogging()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.Flush">
            <summary>Sets the shim of LogFactory.Flush()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.FlushAsyncContinuation">
            <summary>Sets the shim of LogFactory.Flush(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.FlushAsyncContinuationInt32">
            <summary>Sets the shim of LogFactory.Flush(AsyncContinuation asyncContinuation, Int32 timeoutMilliseconds)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.FlushAsyncContinuationTimeSpan">
            <summary>Sets the shim of LogFactory.Flush(AsyncContinuation asyncContinuation, TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.FlushInt32">
            <summary>Sets the shim of LogFactory.Flush(Int32 timeoutMilliseconds)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.FlushTimeSpan">
            <summary>Sets the shim of LogFactory.Flush(TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.GetCandidateConfigFilePaths">
            <summary>Sets the shim of LogFactory.GetCandidateConfigFilePaths()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.GetCurrentClassLogger">
            <summary>Sets the shim of LogFactory.GetCurrentClassLogger()</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory.AllInstances.GetCurrentClassLoggerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NLog.LogFactory,``0})">
            <summary>Sets the shim of LogFactory.GetCurrentClassLogger()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.GetCurrentClassLoggerType">
            <summary>Sets the shim of LogFactory.GetCurrentClassLogger(Type loggerType)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory.AllInstances.GetLoggerOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NLog.LogFactory,System.String,``0})">
            <summary>Sets the shim of LogFactory.GetLogger(String name)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.GetLoggerString">
            <summary>Sets the shim of LogFactory.GetLogger(String name)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.GetLoggerStringType">
            <summary>Sets the shim of LogFactory.GetLogger(String name, Type loggerType)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.GlobalThresholdGet">
            <summary>Sets the shim of LogFactory.get_GlobalThreshold()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.GlobalThresholdSetLogLevel">
            <summary>Sets the shim of LogFactory.set_GlobalThreshold(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.IsLoggingEnabled">
            <summary>Sets the shim of LogFactory.IsLoggingEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.KeepVariablesOnReloadGet">
            <summary>Sets the shim of LogFactory.get_KeepVariablesOnReload()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.KeepVariablesOnReloadSetBoolean">
            <summary>Sets the shim of LogFactory.set_KeepVariablesOnReload(Boolean value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.LoadLoggingConfigurationString">
            <summary>Sets the shim of LogFactory.LoadLoggingConfiguration(String configFile)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.OnConfigurationChangedLoggingConfigurationChangedEventArgs">
            <summary>Sets the shim of LogFactory.OnConfigurationChanged(LoggingConfigurationChangedEventArgs e)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.OnConfigurationReloadedLoggingConfigurationReloadedEventArgs">
            <summary>Sets the shim of LogFactory.OnConfigurationReloaded(LoggingConfigurationReloadedEventArgs e)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.OnStopLoggingObjectEventArgs">
            <summary>Sets the shim of LogFactory.OnStopLogging(Object sender, EventArgs args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ReconfigExistingLoggers">
            <summary>Sets the shim of LogFactory.ReconfigExistingLoggers()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ReloadConfigOnTimerObject">
            <summary>Sets the shim of LogFactory.ReloadConfigOnTimer(Object state)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ResetCandidateConfigFilePath">
            <summary>Sets the shim of LogFactory.ResetCandidateConfigFilePath()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ResumeLogging">
            <summary>Sets the shim of LogFactory.ResumeLogging()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.SetCandidateConfigFilePathsIEnumerableOfString">
            <summary>Sets the shim of LogFactory.SetCandidateConfigFilePaths(IEnumerable`1&lt;String&gt; filePaths)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.Shutdown">
            <summary>Sets the shim of LogFactory.Shutdown()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.SuspendLogging">
            <summary>Sets the shim of LogFactory.SuspendLogging()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ThrowConfigExceptionsGet">
            <summary>Sets the shim of LogFactory.get_ThrowConfigExceptions()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ThrowConfigExceptionsSetNullableOfBoolean">
            <summary>Sets the shim of LogFactory.set_ThrowConfigExceptions(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ThrowExceptionsGet">
            <summary>Sets the shim of LogFactory.get_ThrowExceptions()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.AllInstances.ThrowExceptionsSetBoolean">
            <summary>Sets the shim of LogFactory.set_ThrowExceptions(Boolean value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.CloseTimeSpan">
            <summary>Sets the shim of LogFactory.Close(TimeSpan flushTimeout)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ConfigFileChangedObjectEventArgs">
            <summary>Sets the shim of LogFactory.ConfigFileChanged(Object sender, EventArgs args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ConfigurationChangedAddEventHandlerOfLoggingConfigurationChangedEventArgs">
            <summary>Sets the shim of LogFactory.add_ConfigurationChanged(EventHandler`1&lt;LoggingConfigurationChangedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ConfigurationChangedRemoveEventHandlerOfLoggingConfigurationChangedEventArgs">
            <summary>Sets the shim of LogFactory.remove_ConfigurationChanged(EventHandler`1&lt;LoggingConfigurationChangedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ConfigurationGet">
            <summary>Sets the shim of LogFactory.get_Configuration()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ConfigurationReloadedAddEventHandlerOfLoggingConfigurationReloadedEventArgs">
            <summary>Sets the shim of LogFactory.add_ConfigurationReloaded(EventHandler`1&lt;LoggingConfigurationReloadedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ConfigurationReloadedRemoveEventHandlerOfLoggingConfigurationReloadedEventArgs">
            <summary>Sets the shim of LogFactory.remove_ConfigurationReloaded(EventHandler`1&lt;LoggingConfigurationReloadedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of LogFactory.set_Configuration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.Constructor">
            <summary>Sets the shim of LogFactory.LogFactory()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ConstructorLoggingConfiguration">
            <summary>Sets the shim of LogFactory.LogFactory(LoggingConfiguration config)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.CreateNullLogger">
            <summary>Sets the shim of LogFactory.CreateNullLogger()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.CurrentAppDomainGet">
            <summary>Sets the shim of LogFactory.get_CurrentAppDomain()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.CurrentAppDomainSetIAppDomain">
            <summary>Sets the shim of LogFactory.set_CurrentAppDomain(IAppDomain value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.DefaultCultureInfoGet">
            <summary>Sets the shim of LogFactory.get_DefaultCultureInfo()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.DisableLogging">
            <summary>Sets the shim of LogFactory.DisableLogging()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.Dispose">
            <summary>Sets the shim of LogFactory.Dispose()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.DisposeBoolean">
            <summary>Sets the shim of LogFactory.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.EnableLogging">
            <summary>Sets the shim of LogFactory.EnableLogging()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.Flush">
            <summary>Sets the shim of LogFactory.Flush()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.FlushAsyncContinuation">
            <summary>Sets the shim of LogFactory.Flush(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.FlushAsyncContinuationInt32">
            <summary>Sets the shim of LogFactory.Flush(AsyncContinuation asyncContinuation, Int32 timeoutMilliseconds)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.FlushAsyncContinuationTimeSpan">
            <summary>Sets the shim of LogFactory.Flush(AsyncContinuation asyncContinuation, TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.FlushInt32">
            <summary>Sets the shim of LogFactory.Flush(Int32 timeoutMilliseconds)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.FlushTimeSpan">
            <summary>Sets the shim of LogFactory.Flush(TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.GetCandidateConfigFilePaths">
            <summary>Sets the shim of LogFactory.GetCandidateConfigFilePaths()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.GetCurrentClassLogger">
            <summary>Sets the shim of LogFactory.GetCurrentClassLogger()</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory.GetCurrentClassLoggerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>Sets the shim of LogFactory.GetCurrentClassLogger()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.GetCurrentClassLoggerType">
            <summary>Sets the shim of LogFactory.GetCurrentClassLogger(Type loggerType)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.GetDefaultCandidateConfigFilePaths">
            <summary>Sets the shim of LogFactory.GetDefaultCandidateConfigFilePaths()</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory.GetLoggerOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets the shim of LogFactory.GetLogger(String name)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.GetLoggerString">
            <summary>Sets the shim of LogFactory.GetLogger(String name)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.GetLoggerStringType">
            <summary>Sets the shim of LogFactory.GetLogger(String name, Type loggerType)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.GlobalThresholdGet">
            <summary>Sets the shim of LogFactory.get_GlobalThreshold()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.GlobalThresholdSetLogLevel">
            <summary>Sets the shim of LogFactory.set_GlobalThreshold(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.IsLoggingEnabled">
            <summary>Sets the shim of LogFactory.IsLoggingEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.KeepVariablesOnReloadGet">
            <summary>Sets the shim of LogFactory.get_KeepVariablesOnReload()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.KeepVariablesOnReloadSetBoolean">
            <summary>Sets the shim of LogFactory.set_KeepVariablesOnReload(Boolean value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.LoadLoggingConfigurationString">
            <summary>Sets the shim of LogFactory.LoadLoggingConfiguration(String configFile)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.LogConfigurationInitialized">
            <summary>Sets the shim of LogFactory.LogConfigurationInitialized()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.LoggerShutdownAddEventHandlerOfEventArgs">
            <summary>Sets the shim of LogFactory.add_LoggerShutdown(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.LoggerShutdownRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of LogFactory.remove_LoggerShutdown(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.OnConfigurationChangedLoggingConfigurationChangedEventArgs">
            <summary>Sets the shim of LogFactory.OnConfigurationChanged(LoggingConfigurationChangedEventArgs e)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.OnConfigurationReloadedLoggingConfigurationReloadedEventArgs">
            <summary>Sets the shim of LogFactory.OnConfigurationReloaded(LoggingConfigurationReloadedEventArgs e)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.OnLoggerShutdownObjectEventArgs">
            <summary>Sets the shim of LogFactory.OnLoggerShutdown(Object sender, EventArgs args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.OnStopLoggingObjectEventArgs">
            <summary>Sets the shim of LogFactory.OnStopLogging(Object sender, EventArgs args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ReconfigExistingLoggers">
            <summary>Sets the shim of LogFactory.ReconfigExistingLoggers()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.RegisterEventsIAppDomain">
            <summary>Sets the shim of LogFactory.RegisterEvents(IAppDomain appDomain)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ReloadConfigOnTimerObject">
            <summary>Sets the shim of LogFactory.ReloadConfigOnTimer(Object state)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ResetCandidateConfigFilePath">
            <summary>Sets the shim of LogFactory.ResetCandidateConfigFilePath()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ResumeLogging">
            <summary>Sets the shim of LogFactory.ResumeLogging()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.SetCandidateConfigFilePathsIEnumerableOfString">
            <summary>Sets the shim of LogFactory.SetCandidateConfigFilePaths(IEnumerable`1&lt;String&gt; filePaths)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.Shutdown">
            <summary>Sets the shim of LogFactory.Shutdown()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.StaticConstructor">
            <summary>Sets the shim of LogFactory.LogFactory()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.SuspendLogging">
            <summary>Sets the shim of LogFactory.SuspendLogging()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ThrowConfigExceptionsGet">
            <summary>Sets the shim of LogFactory.get_ThrowConfigExceptions()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ThrowConfigExceptionsSetNullableOfBoolean">
            <summary>Sets the shim of LogFactory.set_ThrowConfigExceptions(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ThrowExceptionsGet">
            <summary>Sets the shim of LogFactory.get_ThrowExceptions()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.ThrowExceptionsSetBoolean">
            <summary>Sets the shim of LogFactory.set_ThrowExceptions(Boolean value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory.UnregisterEventsIAppDomain">
            <summary>Sets the shim of LogFactory.UnregisterEvents(IAppDomain appDomain)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogFactory`1">
            <summary>Shim type of NLog.LogFactory`1</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory`1.#ctor(NLog.LogFactory{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogFactory`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory`1.AllInstances.GetCurrentClassLogger">
            <summary>Sets the shim of LogFactory`1.GetCurrentClassLogger()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory`1.AllInstances.GetLoggerString">
            <summary>Sets the shim of LogFactory`1.GetLogger(String name)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogFactory`1.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory`1.Constructor">
            <summary>Sets the shim of LogFactory`1.LogFactory`1()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory`1.GetCurrentClassLogger">
            <summary>Sets the shim of LogFactory`1.GetCurrentClassLogger()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogFactory`1.GetLoggerString">
            <summary>Sets the shim of LogFactory`1.GetLogger(String name)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogLevel">
            <summary>Shim type of NLog.LogLevel</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogLevel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogLevel.#ctor(NLog.LogLevel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogLevel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.AllInstances.CompareToObject">
            <summary>Sets the shim of LogLevel.CompareTo(Object obj)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.AllInstances.EqualsLogLevel">
            <summary>Sets the shim of LogLevel.Equals(LogLevel other)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.AllInstances.EqualsObject">
            <summary>Sets the shim of LogLevel.Equals(Object obj)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.AllInstances.GetHashCode01">
            <summary>Sets the shim of LogLevel.GetHashCode()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.AllInstances.NameGet">
            <summary>Sets the shim of LogLevel.get_Name()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.AllInstances.OrdinalGet">
            <summary>Sets the shim of LogLevel.get_Ordinal()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.AllInstances.ToString01">
            <summary>Sets the shim of LogLevel.ToString()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.AllLevelsGet">
            <summary>Sets the shim of LogLevel.get_AllLevels()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.AllLoggingLevelsGet">
            <summary>Sets the shim of LogLevel.get_AllLoggingLevels()</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogLevel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogLevel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogLevel.Bind(System.IComparable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogLevel.Bind(System.IEquatable{NLog.LogLevel})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.CompareToObject">
            <summary>Sets the shim of LogLevel.CompareTo(Object obj)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.ConstructorStringInt32">
            <summary>Sets the shim of LogLevel.LogLevel(String name, Int32 ordinal)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.EqualityOpLogLevelLogLevel">
            <summary>Sets the shim of LogLevel.op_Equality(LogLevel level1, LogLevel level2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.EqualsLogLevel">
            <summary>Sets the shim of LogLevel.Equals(LogLevel other)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.EqualsObject">
            <summary>Sets the shim of LogLevel.Equals(Object obj)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.FromOrdinalInt32">
            <summary>Sets the shim of LogLevel.FromOrdinal(Int32 ordinal)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.FromStringString">
            <summary>Sets the shim of LogLevel.FromString(String levelName)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.GetHashCode">
            <summary>Sets the shim of LogLevel.GetHashCode()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.GreaterThanOpLogLevelLogLevel">
            <summary>Sets the shim of LogLevel.op_GreaterThan(LogLevel level1, LogLevel level2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.GreaterThanOrEqualOpLogLevelLogLevel">
            <summary>Sets the shim of LogLevel.op_GreaterThanOrEqual(LogLevel level1, LogLevel level2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.InequalityOpLogLevelLogLevel">
            <summary>Sets the shim of LogLevel.op_Inequality(LogLevel level1, LogLevel level2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.LessThanOpLogLevelLogLevel">
            <summary>Sets the shim of LogLevel.op_LessThan(LogLevel level1, LogLevel level2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.LessThanOrEqualOpLogLevelLogLevel">
            <summary>Sets the shim of LogLevel.op_LessThanOrEqual(LogLevel level1, LogLevel level2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.MaxLevelGet">
            <summary>Sets the shim of LogLevel.get_MaxLevel()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.MinLevelGet">
            <summary>Sets the shim of LogLevel.get_MinLevel()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.NameGet">
            <summary>Sets the shim of LogLevel.get_Name()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.OrdinalGet">
            <summary>Sets the shim of LogLevel.get_Ordinal()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.StaticConstructor">
            <summary>Sets the shim of LogLevel.LogLevel()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogLevel.ToString">
            <summary>Sets the shim of LogLevel.ToString()</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogManager">
            <summary>Shim type of NLog.LogManager</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogManager.#ctor(NLog.LogManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.AddHiddenAssemblyAssembly">
            <summary>Sets the shim of LogManager.AddHiddenAssembly(Assembly assembly)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ConfigurationChangedAddEventHandlerOfLoggingConfigurationChangedEventArgs">
            <summary>Sets the shim of LogManager.add_ConfigurationChanged(EventHandler`1&lt;LoggingConfigurationChangedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ConfigurationChangedRemoveEventHandlerOfLoggingConfigurationChangedEventArgs">
            <summary>Sets the shim of LogManager.remove_ConfigurationChanged(EventHandler`1&lt;LoggingConfigurationChangedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ConfigurationGet">
            <summary>Sets the shim of LogManager.get_Configuration()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ConfigurationReloadedAddEventHandlerOfLoggingConfigurationReloadedEventArgs">
            <summary>Sets the shim of LogManager.add_ConfigurationReloaded(EventHandler`1&lt;LoggingConfigurationReloadedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ConfigurationReloadedRemoveEventHandlerOfLoggingConfigurationReloadedEventArgs">
            <summary>Sets the shim of LogManager.remove_ConfigurationReloaded(EventHandler`1&lt;LoggingConfigurationReloadedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of LogManager.set_Configuration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.Constructor">
            <summary>Sets the shim of LogManager.LogManager()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.CreateNullLogger">
            <summary>Sets the shim of LogManager.CreateNullLogger()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.DefaultCultureInfoGet">
            <summary>Sets the shim of LogManager.get_DefaultCultureInfo()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.DefaultCultureInfoSetLogManagerGetCultureInfo">
            <summary>Sets the shim of LogManager.set_DefaultCultureInfo(GetCultureInfo value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.DisableLogging">
            <summary>Sets the shim of LogManager.DisableLogging()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.EnableLogging">
            <summary>Sets the shim of LogManager.EnableLogging()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.Flush">
            <summary>Sets the shim of LogManager.Flush()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.FlushAsyncContinuation">
            <summary>Sets the shim of LogManager.Flush(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.FlushAsyncContinuationInt32">
            <summary>Sets the shim of LogManager.Flush(AsyncContinuation asyncContinuation, Int32 timeoutMilliseconds)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.FlushAsyncContinuationTimeSpan">
            <summary>Sets the shim of LogManager.Flush(AsyncContinuation asyncContinuation, TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.FlushInt32">
            <summary>Sets the shim of LogManager.Flush(Int32 timeoutMilliseconds)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.FlushTimeSpan">
            <summary>Sets the shim of LogManager.Flush(TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.GetClassFullName">
            <summary>Sets the shim of LogManager.GetClassFullName()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.GetCurrentClassLogger">
            <summary>Sets the shim of LogManager.GetCurrentClassLogger()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.GetCurrentClassLoggerType">
            <summary>Sets the shim of LogManager.GetCurrentClassLogger(Type loggerType)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.GetLoggerString">
            <summary>Sets the shim of LogManager.GetLogger(String name)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.GetLoggerStringType">
            <summary>Sets the shim of LogManager.GetLogger(String name, Type loggerType)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.GlobalThresholdGet">
            <summary>Sets the shim of LogManager.get_GlobalThreshold()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.GlobalThresholdSetLogLevel">
            <summary>Sets the shim of LogManager.set_GlobalThreshold(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.IsHiddenAssemblyAssembly">
            <summary>Sets the shim of LogManager.IsHiddenAssembly(Assembly assembly)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.IsLoggingEnabled">
            <summary>Sets the shim of LogManager.IsLoggingEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.KeepVariablesOnReloadGet">
            <summary>Sets the shim of LogManager.get_KeepVariablesOnReload()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.KeepVariablesOnReloadSetBoolean">
            <summary>Sets the shim of LogManager.set_KeepVariablesOnReload(Boolean value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.LogFactoryGet">
            <summary>Sets the shim of LogManager.get_LogFactory()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ReconfigExistingLoggers">
            <summary>Sets the shim of LogManager.ReconfigExistingLoggers()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.Shutdown">
            <summary>Sets the shim of LogManager.Shutdown()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.StaticConstructor">
            <summary>Sets the shim of LogManager.LogManager()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ThrowConfigExceptionsGet">
            <summary>Sets the shim of LogManager.get_ThrowConfigExceptions()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ThrowConfigExceptionsSetNullableOfBoolean">
            <summary>Sets the shim of LogManager.set_ThrowConfigExceptions(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ThrowExceptionsGet">
            <summary>Sets the shim of LogManager.get_ThrowExceptions()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager.ThrowExceptionsSetBoolean">
            <summary>Sets the shim of LogManager.set_ThrowExceptions(Boolean value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogManager._get_DefaultCultureInfob__0">
            <summary>Sets the shim of LogManager.&lt;get_DefaultCultureInfo&gt;b__0()</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogger">
            <summary>Shim type of NLog.Logger</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.#ctor(NLog.Logger)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Fakes.ShimLogger.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalDebug(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugExceptionStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalDebug(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderObject">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringByte">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringChar">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringObject">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugIFormatProviderStringString">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugLogMessageGenerator">
            <summary>Sets the shim of Logger.ConditionalDebug(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugObject">
            <summary>Sets the shim of Logger.ConditionalDebug(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,``0})">
            <summary>Sets the shim of Logger.ConditionalDebug(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0})">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1})">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugString">
            <summary>Sets the shim of Logger.ConditionalDebug(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringBoolean">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringByte">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringChar">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringDecimal">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringDouble">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringInt32">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringInt64">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringObject">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringObjectObject">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringObjectObjectObject">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringSingle">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalDebugStringString">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalTrace(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceExceptionStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalTrace(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderObject">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringByte">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringChar">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringObject">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceIFormatProviderStringString">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceLogMessageGenerator">
            <summary>Sets the shim of Logger.ConditionalTrace(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceObject">
            <summary>Sets the shim of Logger.ConditionalTrace(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,``0})">
            <summary>Sets the shim of Logger.ConditionalTrace(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0})">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1})">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceString">
            <summary>Sets the shim of Logger.ConditionalTrace(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringBoolean">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringByte">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringChar">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringDecimal">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringDouble">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringInt32">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringInt64">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringObject">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringObjectObject">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringObjectObjectObject">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringSingle">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ConditionalTraceStringString">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Debug(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugExceptionString">
            <summary>Sets the shim of Logger.Debug(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugExceptionStringException">
            <summary>Sets the shim of Logger.DebugException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Debug(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderObject">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringString">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugLogMessageGenerator">
            <summary>Sets the shim of Logger.Debug(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugObject">
            <summary>Sets the shim of Logger.Debug(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.DebugOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.DebugOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.DebugOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,``0})">
            <summary>Sets the shim of Logger.Debug(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.DebugOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0})">
            <summary>Sets the shim of Logger.Debug(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.DebugOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.DebugOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Debug(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.DebugOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.DebugOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Debug(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugString">
            <summary>Sets the shim of Logger.Debug(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringBoolean">
            <summary>Sets the shim of Logger.Debug(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringByte">
            <summary>Sets the shim of Logger.Debug(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringChar">
            <summary>Sets the shim of Logger.Debug(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringDecimal">
            <summary>Sets the shim of Logger.Debug(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringDouble">
            <summary>Sets the shim of Logger.Debug(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringException">
            <summary>Sets the shim of Logger.Debug(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringInt32">
            <summary>Sets the shim of Logger.Debug(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringInt64">
            <summary>Sets the shim of Logger.Debug(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringObject">
            <summary>Sets the shim of Logger.Debug(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringObjectArray">
            <summary>Sets the shim of Logger.Debug(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringObjectObject">
            <summary>Sets the shim of Logger.Debug(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringObjectObjectObject">
            <summary>Sets the shim of Logger.Debug(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringSByte">
            <summary>Sets the shim of Logger.Debug(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringSingle">
            <summary>Sets the shim of Logger.Debug(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringString">
            <summary>Sets the shim of Logger.Debug(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringUInt32">
            <summary>Sets the shim of Logger.Debug(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.DebugStringUInt64">
            <summary>Sets the shim of Logger.Debug(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Error(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorExceptionString">
            <summary>Sets the shim of Logger.Error(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorExceptionStringException">
            <summary>Sets the shim of Logger.ErrorException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Error(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderObject">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringString">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorLogMessageGenerator">
            <summary>Sets the shim of Logger.Error(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorObject">
            <summary>Sets the shim of Logger.Error(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ErrorOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ErrorOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ErrorOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,``0})">
            <summary>Sets the shim of Logger.Error(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ErrorOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0})">
            <summary>Sets the shim of Logger.Error(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ErrorOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ErrorOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Error(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ErrorOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.ErrorOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Error(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorString">
            <summary>Sets the shim of Logger.Error(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringBoolean">
            <summary>Sets the shim of Logger.Error(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringByte">
            <summary>Sets the shim of Logger.Error(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringChar">
            <summary>Sets the shim of Logger.Error(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringDecimal">
            <summary>Sets the shim of Logger.Error(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringDouble">
            <summary>Sets the shim of Logger.Error(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringException">
            <summary>Sets the shim of Logger.Error(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringInt32">
            <summary>Sets the shim of Logger.Error(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringInt64">
            <summary>Sets the shim of Logger.Error(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringObject">
            <summary>Sets the shim of Logger.Error(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringObjectArray">
            <summary>Sets the shim of Logger.Error(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringObjectObject">
            <summary>Sets the shim of Logger.Error(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringObjectObjectObject">
            <summary>Sets the shim of Logger.Error(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringSByte">
            <summary>Sets the shim of Logger.Error(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringSingle">
            <summary>Sets the shim of Logger.Error(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringString">
            <summary>Sets the shim of Logger.Error(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringUInt32">
            <summary>Sets the shim of Logger.Error(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.ErrorStringUInt64">
            <summary>Sets the shim of Logger.Error(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FactoryGet">
            <summary>Sets the shim of Logger.get_Factory()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FactorySetLogFactory">
            <summary>Sets the shim of Logger.set_Factory(LogFactory value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Fatal(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalExceptionString">
            <summary>Sets the shim of Logger.Fatal(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalExceptionStringException">
            <summary>Sets the shim of Logger.FatalException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Fatal(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderObject">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringString">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalLogMessageGenerator">
            <summary>Sets the shim of Logger.Fatal(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalObject">
            <summary>Sets the shim of Logger.Fatal(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.FatalOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.FatalOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.FatalOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,``0})">
            <summary>Sets the shim of Logger.Fatal(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.FatalOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0})">
            <summary>Sets the shim of Logger.Fatal(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.FatalOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.FatalOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Fatal(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.FatalOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.FatalOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Fatal(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalString">
            <summary>Sets the shim of Logger.Fatal(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringBoolean">
            <summary>Sets the shim of Logger.Fatal(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringByte">
            <summary>Sets the shim of Logger.Fatal(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringChar">
            <summary>Sets the shim of Logger.Fatal(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringDecimal">
            <summary>Sets the shim of Logger.Fatal(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringDouble">
            <summary>Sets the shim of Logger.Fatal(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringException">
            <summary>Sets the shim of Logger.Fatal(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringInt32">
            <summary>Sets the shim of Logger.Fatal(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringInt64">
            <summary>Sets the shim of Logger.Fatal(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringObject">
            <summary>Sets the shim of Logger.Fatal(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringObjectArray">
            <summary>Sets the shim of Logger.Fatal(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringObjectObject">
            <summary>Sets the shim of Logger.Fatal(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringObjectObjectObject">
            <summary>Sets the shim of Logger.Fatal(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringSByte">
            <summary>Sets the shim of Logger.Fatal(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringSingle">
            <summary>Sets the shim of Logger.Fatal(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringString">
            <summary>Sets the shim of Logger.Fatal(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringUInt32">
            <summary>Sets the shim of Logger.Fatal(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.FatalStringUInt64">
            <summary>Sets the shim of Logger.Fatal(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Info(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoExceptionString">
            <summary>Sets the shim of Logger.Info(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoExceptionStringException">
            <summary>Sets the shim of Logger.InfoException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Info(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderObject">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringString">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoLogMessageGenerator">
            <summary>Sets the shim of Logger.Info(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoObject">
            <summary>Sets the shim of Logger.Info(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.InfoOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.InfoOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.InfoOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,``0})">
            <summary>Sets the shim of Logger.Info(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.InfoOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0})">
            <summary>Sets the shim of Logger.Info(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.InfoOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.InfoOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Info(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.InfoOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.InfoOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Info(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoString">
            <summary>Sets the shim of Logger.Info(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringBoolean">
            <summary>Sets the shim of Logger.Info(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringByte">
            <summary>Sets the shim of Logger.Info(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringChar">
            <summary>Sets the shim of Logger.Info(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringDecimal">
            <summary>Sets the shim of Logger.Info(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringDouble">
            <summary>Sets the shim of Logger.Info(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringException">
            <summary>Sets the shim of Logger.Info(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringInt32">
            <summary>Sets the shim of Logger.Info(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringInt64">
            <summary>Sets the shim of Logger.Info(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringObject">
            <summary>Sets the shim of Logger.Info(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringObjectArray">
            <summary>Sets the shim of Logger.Info(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringObjectObject">
            <summary>Sets the shim of Logger.Info(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringObjectObjectObject">
            <summary>Sets the shim of Logger.Info(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringSByte">
            <summary>Sets the shim of Logger.Info(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringSingle">
            <summary>Sets the shim of Logger.Info(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringString">
            <summary>Sets the shim of Logger.Info(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringUInt32">
            <summary>Sets the shim of Logger.Info(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.InfoStringUInt64">
            <summary>Sets the shim of Logger.Info(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.IsDebugEnabledGet">
            <summary>Sets the shim of Logger.get_IsDebugEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.IsEnabledLogLevel">
            <summary>Sets the shim of Logger.IsEnabled(LogLevel level)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.IsErrorEnabledGet">
            <summary>Sets the shim of Logger.get_IsErrorEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.IsFatalEnabledGet">
            <summary>Sets the shim of Logger.get_IsFatalEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.IsInfoEnabledGet">
            <summary>Sets the shim of Logger.get_IsInfoEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.IsTraceEnabledGet">
            <summary>Sets the shim of Logger.get_IsTraceEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.IsWarnEnabledGet">
            <summary>Sets the shim of Logger.get_IsWarnEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogExceptionLogLevelStringException">
            <summary>Sets the shim of Logger.LogException(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogEventInfo">
            <summary>Sets the shim of Logger.Log(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Log(LogLevel level, Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Log(LogLevel level, Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringString">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelLogMessageGenerator">
            <summary>Sets the shim of Logger.Log(LogLevel level, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelString">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringBoolean">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringByte">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringChar">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringDecimal">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringDouble">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringException">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringInt32">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringInt64">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringObjectArray">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringObjectObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringObjectObjectObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringSByte">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringSingle">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringString">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringUInt32">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogLogLevelStringUInt64">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.LogOf1LogLevelIFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,NLog.LogLevel,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.LogOf1LogLevelIFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,NLog.LogLevel,System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.LogOf1LogLevelM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,NLog.LogLevel,``0})">
            <summary>Sets the shim of Logger.Log(LogLevel level, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.LogOf1LogLevelStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,NLog.LogLevel,System.String,``0})">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.LogOf2LogLevelIFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,NLog.LogLevel,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.LogOf2LogLevelStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,NLog.LogLevel,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.LogOf3LogLevelIFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.LogOf3LogLevelStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,NLog.LogLevel,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LogTypeLogEventInfo">
            <summary>Sets the shim of Logger.Log(Type wrapperType, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LoggerReconfiguredAddEventHandlerOfEventArgs">
            <summary>Sets the shim of Logger.add_LoggerReconfigured(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.LoggerReconfiguredRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of Logger.remove_LoggerReconfigured(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.NameGet">
            <summary>Sets the shim of Logger.get_Name()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.NameSetString">
            <summary>Sets the shim of Logger.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.OnLoggerReconfiguredEventArgs">
            <summary>Sets the shim of Logger.OnLoggerReconfigured(EventArgs e)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.PrepareLogEventInfoLogEventInfo">
            <summary>Sets the shim of Logger.PrepareLogEventInfo(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.SwallowAction">
            <summary>Sets the shim of Logger.Swallow(Action action)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.SwallowAsyncFuncOfTask">
            <summary>Sets the shim of Logger.SwallowAsync(Func`1&lt;Task&gt; asyncAction)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.SwallowAsyncOf1FuncOfTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NLog.Logger,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task{``0}})">
            <summary>Sets the shim of Logger.SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.SwallowAsyncOf1FuncOfTaskOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NLog.Logger,System.Func{System.Threading.Tasks.Task{``0}},``0,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the shim of Logger.SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc, !!0 fallback)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.SwallowAsyncTask">
            <summary>Sets the shim of Logger.SwallowAsync(Task task)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.SwallowOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NLog.Logger,System.Func{``0},``0})">
            <summary>Sets the shim of Logger.Swallow(Func`1&lt;!!0&gt; func)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.SwallowOf1FuncOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NLog.Logger,System.Func{``0},``0,``0})">
            <summary>Sets the shim of Logger.Swallow(Func`1&lt;!!0&gt; func, !!0 fallback)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.SwallowTask">
            <summary>Sets the shim of Logger.Swallow(Task task)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Trace(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceExceptionString">
            <summary>Sets the shim of Logger.Trace(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceExceptionStringException">
            <summary>Sets the shim of Logger.TraceException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Trace(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderObject">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringString">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceLogMessageGenerator">
            <summary>Sets the shim of Logger.Trace(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceObject">
            <summary>Sets the shim of Logger.Trace(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.TraceOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.TraceOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.TraceOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,``0})">
            <summary>Sets the shim of Logger.Trace(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.TraceOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0})">
            <summary>Sets the shim of Logger.Trace(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.TraceOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.TraceOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Trace(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.TraceOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.TraceOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Trace(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceString">
            <summary>Sets the shim of Logger.Trace(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringBoolean">
            <summary>Sets the shim of Logger.Trace(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringByte">
            <summary>Sets the shim of Logger.Trace(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringChar">
            <summary>Sets the shim of Logger.Trace(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringDecimal">
            <summary>Sets the shim of Logger.Trace(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringDouble">
            <summary>Sets the shim of Logger.Trace(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringException">
            <summary>Sets the shim of Logger.Trace(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringInt32">
            <summary>Sets the shim of Logger.Trace(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringInt64">
            <summary>Sets the shim of Logger.Trace(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringObject">
            <summary>Sets the shim of Logger.Trace(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringObjectArray">
            <summary>Sets the shim of Logger.Trace(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringObjectObject">
            <summary>Sets the shim of Logger.Trace(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringObjectObjectObject">
            <summary>Sets the shim of Logger.Trace(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringSByte">
            <summary>Sets the shim of Logger.Trace(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringSingle">
            <summary>Sets the shim of Logger.Trace(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringString">
            <summary>Sets the shim of Logger.Trace(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringUInt32">
            <summary>Sets the shim of Logger.Trace(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.TraceStringUInt64">
            <summary>Sets the shim of Logger.Trace(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Warn(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnExceptionString">
            <summary>Sets the shim of Logger.Warn(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnExceptionStringException">
            <summary>Sets the shim of Logger.WarnException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Warn(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderObject">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringString">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnLogMessageGenerator">
            <summary>Sets the shim of Logger.Warn(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnObject">
            <summary>Sets the shim of Logger.Warn(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.WarnOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.WarnOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.WarnOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,``0})">
            <summary>Sets the shim of Logger.Warn(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.WarnOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0})">
            <summary>Sets the shim of Logger.Warn(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.WarnOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.WarnOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Warn(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.WarnOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.WarnOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Warn(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnString">
            <summary>Sets the shim of Logger.Warn(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringBoolean">
            <summary>Sets the shim of Logger.Warn(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringByte">
            <summary>Sets the shim of Logger.Warn(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringChar">
            <summary>Sets the shim of Logger.Warn(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringDecimal">
            <summary>Sets the shim of Logger.Warn(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringDouble">
            <summary>Sets the shim of Logger.Warn(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringException">
            <summary>Sets the shim of Logger.Warn(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringInt32">
            <summary>Sets the shim of Logger.Warn(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringInt64">
            <summary>Sets the shim of Logger.Warn(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringObject">
            <summary>Sets the shim of Logger.Warn(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringObjectArray">
            <summary>Sets the shim of Logger.Warn(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringObjectObject">
            <summary>Sets the shim of Logger.Warn(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringObjectObjectObject">
            <summary>Sets the shim of Logger.Warn(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringSByte">
            <summary>Sets the shim of Logger.Warn(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringSingle">
            <summary>Sets the shim of Logger.Warn(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringString">
            <summary>Sets the shim of Logger.Warn(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringUInt32">
            <summary>Sets the shim of Logger.Warn(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WarnStringUInt64">
            <summary>Sets the shim of Logger.Warn(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WriteToTargetsLogEventInfo">
            <summary>Sets the shim of Logger.WriteToTargets(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WriteToTargetsLogLevelExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, Exception ex, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WriteToTargetsLogLevelExceptionStringObjectArray">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, Exception ex, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WriteToTargetsLogLevelIFormatProviderString">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, IFormatProvider formatProvider, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WriteToTargetsLogLevelIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WriteToTargetsLogLevelStringException">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, String message, Exception ex)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WriteToTargetsLogLevelStringObjectArray">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.AllInstances.WriteToTargetsOf1LogLevelIFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.Logger,NLog.LogLevel,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.AllInstances.WriteToTargetsTypeLogEventInfo">
            <summary>Sets the shim of Logger.WriteToTargets(Type wrapperType, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.Bind(NLog.ILogger)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.Bind(NLog.ILoggerBase)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.Bind(NLog.ISuppress)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalDebug(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugExceptionStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalDebug(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderObject">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringByte">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringChar">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringObject">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugIFormatProviderStringString">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugLogMessageGenerator">
            <summary>Sets the shim of Logger.ConditionalDebug(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugObject">
            <summary>Sets the shim of Logger.ConditionalDebug(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalDebugOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalDebugOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalDebugOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of Logger.ConditionalDebug(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalDebugOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalDebugOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalDebugOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalDebugOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.ConditionalDebug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalDebugOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugString">
            <summary>Sets the shim of Logger.ConditionalDebug(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringBoolean">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringByte">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringChar">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringDecimal">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringDouble">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringInt32">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringInt64">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringObject">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringObjectObject">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringObjectObjectObject">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringSingle">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalDebugStringString">
            <summary>Sets the shim of Logger.ConditionalDebug(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalTrace(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceExceptionStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalTrace(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderObject">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringByte">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringChar">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringObject">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceIFormatProviderStringString">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceLogMessageGenerator">
            <summary>Sets the shim of Logger.ConditionalTrace(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceObject">
            <summary>Sets the shim of Logger.ConditionalTrace(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalTraceOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalTraceOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalTraceOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of Logger.ConditionalTrace(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalTraceOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalTraceOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalTraceOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalTraceOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.ConditionalTrace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ConditionalTraceOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceString">
            <summary>Sets the shim of Logger.ConditionalTrace(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringBoolean">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringByte">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringChar">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringDecimal">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringDouble">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringInt32">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringInt64">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringObject">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringObjectArray">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringObjectObject">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringObjectObjectObject">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringSingle">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ConditionalTraceStringString">
            <summary>Sets the shim of Logger.ConditionalTrace(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.Constructor">
            <summary>Sets the shim of Logger.Logger()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Debug(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugExceptionString">
            <summary>Sets the shim of Logger.Debug(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugExceptionStringException">
            <summary>Sets the shim of Logger.DebugException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Debug(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderObject">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringString">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugLogMessageGenerator">
            <summary>Sets the shim of Logger.Debug(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugObject">
            <summary>Sets the shim of Logger.Debug(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.DebugOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.DebugOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.DebugOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of Logger.Debug(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.DebugOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of Logger.Debug(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.DebugOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.DebugOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of Logger.Debug(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.DebugOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Debug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.DebugOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Debug(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugString">
            <summary>Sets the shim of Logger.Debug(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringBoolean">
            <summary>Sets the shim of Logger.Debug(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringByte">
            <summary>Sets the shim of Logger.Debug(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringChar">
            <summary>Sets the shim of Logger.Debug(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringDecimal">
            <summary>Sets the shim of Logger.Debug(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringDouble">
            <summary>Sets the shim of Logger.Debug(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringException">
            <summary>Sets the shim of Logger.Debug(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringInt32">
            <summary>Sets the shim of Logger.Debug(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringInt64">
            <summary>Sets the shim of Logger.Debug(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringObject">
            <summary>Sets the shim of Logger.Debug(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringObjectArray">
            <summary>Sets the shim of Logger.Debug(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringObjectObject">
            <summary>Sets the shim of Logger.Debug(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringObjectObjectObject">
            <summary>Sets the shim of Logger.Debug(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringSByte">
            <summary>Sets the shim of Logger.Debug(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringSingle">
            <summary>Sets the shim of Logger.Debug(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringString">
            <summary>Sets the shim of Logger.Debug(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringUInt32">
            <summary>Sets the shim of Logger.Debug(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.DebugStringUInt64">
            <summary>Sets the shim of Logger.Debug(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Error(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorExceptionString">
            <summary>Sets the shim of Logger.Error(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorExceptionStringException">
            <summary>Sets the shim of Logger.ErrorException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Error(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderObject">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringString">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorLogMessageGenerator">
            <summary>Sets the shim of Logger.Error(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorObject">
            <summary>Sets the shim of Logger.Error(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ErrorOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ErrorOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ErrorOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of Logger.Error(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ErrorOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of Logger.Error(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ErrorOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ErrorOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of Logger.Error(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ErrorOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Error(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.ErrorOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Error(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorString">
            <summary>Sets the shim of Logger.Error(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringBoolean">
            <summary>Sets the shim of Logger.Error(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringByte">
            <summary>Sets the shim of Logger.Error(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringChar">
            <summary>Sets the shim of Logger.Error(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringDecimal">
            <summary>Sets the shim of Logger.Error(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringDouble">
            <summary>Sets the shim of Logger.Error(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringException">
            <summary>Sets the shim of Logger.Error(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringInt32">
            <summary>Sets the shim of Logger.Error(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringInt64">
            <summary>Sets the shim of Logger.Error(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringObject">
            <summary>Sets the shim of Logger.Error(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringObjectArray">
            <summary>Sets the shim of Logger.Error(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringObjectObject">
            <summary>Sets the shim of Logger.Error(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringObjectObjectObject">
            <summary>Sets the shim of Logger.Error(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringSByte">
            <summary>Sets the shim of Logger.Error(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringSingle">
            <summary>Sets the shim of Logger.Error(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringString">
            <summary>Sets the shim of Logger.Error(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringUInt32">
            <summary>Sets the shim of Logger.Error(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.ErrorStringUInt64">
            <summary>Sets the shim of Logger.Error(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FactoryGet">
            <summary>Sets the shim of Logger.get_Factory()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FactorySetLogFactory">
            <summary>Sets the shim of Logger.set_Factory(LogFactory value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Fatal(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalExceptionString">
            <summary>Sets the shim of Logger.Fatal(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalExceptionStringException">
            <summary>Sets the shim of Logger.FatalException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Fatal(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderObject">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringString">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalLogMessageGenerator">
            <summary>Sets the shim of Logger.Fatal(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalObject">
            <summary>Sets the shim of Logger.Fatal(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.FatalOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.FatalOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.FatalOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of Logger.Fatal(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.FatalOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of Logger.Fatal(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.FatalOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.FatalOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of Logger.Fatal(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.FatalOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Fatal(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.FatalOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Fatal(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalString">
            <summary>Sets the shim of Logger.Fatal(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringBoolean">
            <summary>Sets the shim of Logger.Fatal(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringByte">
            <summary>Sets the shim of Logger.Fatal(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringChar">
            <summary>Sets the shim of Logger.Fatal(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringDecimal">
            <summary>Sets the shim of Logger.Fatal(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringDouble">
            <summary>Sets the shim of Logger.Fatal(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringException">
            <summary>Sets the shim of Logger.Fatal(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringInt32">
            <summary>Sets the shim of Logger.Fatal(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringInt64">
            <summary>Sets the shim of Logger.Fatal(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringObject">
            <summary>Sets the shim of Logger.Fatal(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringObjectArray">
            <summary>Sets the shim of Logger.Fatal(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringObjectObject">
            <summary>Sets the shim of Logger.Fatal(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringObjectObjectObject">
            <summary>Sets the shim of Logger.Fatal(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringSByte">
            <summary>Sets the shim of Logger.Fatal(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringSingle">
            <summary>Sets the shim of Logger.Fatal(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringString">
            <summary>Sets the shim of Logger.Fatal(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringUInt32">
            <summary>Sets the shim of Logger.Fatal(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.FatalStringUInt64">
            <summary>Sets the shim of Logger.Fatal(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Info(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoExceptionString">
            <summary>Sets the shim of Logger.Info(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoExceptionStringException">
            <summary>Sets the shim of Logger.InfoException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Info(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderObject">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringString">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoLogMessageGenerator">
            <summary>Sets the shim of Logger.Info(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoObject">
            <summary>Sets the shim of Logger.Info(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.InfoOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.InfoOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.InfoOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of Logger.Info(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.InfoOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of Logger.Info(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.InfoOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.InfoOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of Logger.Info(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.InfoOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Info(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.InfoOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Info(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoString">
            <summary>Sets the shim of Logger.Info(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringBoolean">
            <summary>Sets the shim of Logger.Info(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringByte">
            <summary>Sets the shim of Logger.Info(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringChar">
            <summary>Sets the shim of Logger.Info(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringDecimal">
            <summary>Sets the shim of Logger.Info(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringDouble">
            <summary>Sets the shim of Logger.Info(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringException">
            <summary>Sets the shim of Logger.Info(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringInt32">
            <summary>Sets the shim of Logger.Info(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringInt64">
            <summary>Sets the shim of Logger.Info(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringObject">
            <summary>Sets the shim of Logger.Info(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringObjectArray">
            <summary>Sets the shim of Logger.Info(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringObjectObject">
            <summary>Sets the shim of Logger.Info(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringObjectObjectObject">
            <summary>Sets the shim of Logger.Info(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringSByte">
            <summary>Sets the shim of Logger.Info(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringSingle">
            <summary>Sets the shim of Logger.Info(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringString">
            <summary>Sets the shim of Logger.Info(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringUInt32">
            <summary>Sets the shim of Logger.Info(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.InfoStringUInt64">
            <summary>Sets the shim of Logger.Info(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.IsDebugEnabledGet">
            <summary>Sets the shim of Logger.get_IsDebugEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.IsEnabledLogLevel">
            <summary>Sets the shim of Logger.IsEnabled(LogLevel level)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.IsErrorEnabledGet">
            <summary>Sets the shim of Logger.get_IsErrorEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.IsFatalEnabledGet">
            <summary>Sets the shim of Logger.get_IsFatalEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.IsInfoEnabledGet">
            <summary>Sets the shim of Logger.get_IsInfoEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.IsTraceEnabledGet">
            <summary>Sets the shim of Logger.get_IsTraceEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.IsWarnEnabledGet">
            <summary>Sets the shim of Logger.get_IsWarnEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogExceptionLogLevelStringException">
            <summary>Sets the shim of Logger.LogException(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogEventInfo">
            <summary>Sets the shim of Logger.Log(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Log(LogLevel level, Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Log(LogLevel level, Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringString">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelLogMessageGenerator">
            <summary>Sets the shim of Logger.Log(LogLevel level, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelString">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringBoolean">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringByte">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringChar">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringDecimal">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringDouble">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringException">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringInt32">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringInt64">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringObjectArray">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringObjectObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringObjectObjectObject">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringSByte">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringSingle">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringString">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringUInt32">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogLogLevelStringUInt64">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.LogOf1LogLevelIFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.LogOf1LogLevelIFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.LogOf1LogLevelM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,``0})">
            <summary>Sets the shim of Logger.Log(LogLevel level, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.LogOf1LogLevelStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.String,``0})">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.LogOf2LogLevelIFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.LogOf2LogLevelStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.LogOf3LogLevelIFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.LogOf3LogLevelStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Log(LogLevel level, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LogTypeLogEventInfo">
            <summary>Sets the shim of Logger.Log(Type wrapperType, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LoggerReconfiguredAddEventHandlerOfEventArgs">
            <summary>Sets the shim of Logger.add_LoggerReconfigured(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.LoggerReconfiguredRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of Logger.remove_LoggerReconfigured(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.NameGet">
            <summary>Sets the shim of Logger.get_Name()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.NameSetString">
            <summary>Sets the shim of Logger.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.OnLoggerReconfiguredEventArgs">
            <summary>Sets the shim of Logger.OnLoggerReconfigured(EventArgs e)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.PrepareLogEventInfoLogEventInfo">
            <summary>Sets the shim of Logger.PrepareLogEventInfo(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.SwallowAction">
            <summary>Sets the shim of Logger.Swallow(Action action)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.SwallowAsyncFuncOfTask">
            <summary>Sets the shim of Logger.SwallowAsync(Func`1&lt;Task&gt; asyncAction)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.SwallowAsyncOf1FuncOfTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task{``0}})">
            <summary>Sets the shim of Logger.SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.SwallowAsyncOf1FuncOfTaskOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.Tasks.Task{``0}},``0,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the shim of Logger.SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc, !!0 fallback)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.SwallowAsyncTask">
            <summary>Sets the shim of Logger.SwallowAsync(Task task)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.SwallowOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},``0})">
            <summary>Sets the shim of Logger.Swallow(Func`1&lt;!!0&gt; func)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.SwallowOf1FuncOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},``0,``0})">
            <summary>Sets the shim of Logger.Swallow(Func`1&lt;!!0&gt; func, !!0 fallback)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.SwallowTask">
            <summary>Sets the shim of Logger.Swallow(Task task)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Trace(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceExceptionString">
            <summary>Sets the shim of Logger.Trace(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceExceptionStringException">
            <summary>Sets the shim of Logger.TraceException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Trace(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderObject">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringString">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceLogMessageGenerator">
            <summary>Sets the shim of Logger.Trace(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceObject">
            <summary>Sets the shim of Logger.Trace(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.TraceOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.TraceOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.TraceOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of Logger.Trace(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.TraceOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of Logger.Trace(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.TraceOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.TraceOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of Logger.Trace(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.TraceOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Trace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.TraceOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Trace(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceString">
            <summary>Sets the shim of Logger.Trace(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringBoolean">
            <summary>Sets the shim of Logger.Trace(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringByte">
            <summary>Sets the shim of Logger.Trace(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringChar">
            <summary>Sets the shim of Logger.Trace(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringDecimal">
            <summary>Sets the shim of Logger.Trace(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringDouble">
            <summary>Sets the shim of Logger.Trace(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringException">
            <summary>Sets the shim of Logger.Trace(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringInt32">
            <summary>Sets the shim of Logger.Trace(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringInt64">
            <summary>Sets the shim of Logger.Trace(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringObject">
            <summary>Sets the shim of Logger.Trace(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringObjectArray">
            <summary>Sets the shim of Logger.Trace(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringObjectObject">
            <summary>Sets the shim of Logger.Trace(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringObjectObjectObject">
            <summary>Sets the shim of Logger.Trace(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringSByte">
            <summary>Sets the shim of Logger.Trace(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringSingle">
            <summary>Sets the shim of Logger.Trace(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringString">
            <summary>Sets the shim of Logger.Trace(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringUInt32">
            <summary>Sets the shim of Logger.Trace(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.TraceStringUInt64">
            <summary>Sets the shim of Logger.Trace(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Warn(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnExceptionString">
            <summary>Sets the shim of Logger.Warn(Exception exception, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnExceptionStringException">
            <summary>Sets the shim of Logger.WarnException(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnExceptionStringObjectArray">
            <summary>Sets the shim of Logger.Warn(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderObject">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringBoolean">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringByte">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringChar">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringDecimal">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringDouble">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringInt32">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringInt64">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringObject">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringSByte">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringSingle">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringString">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringUInt32">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnIFormatProviderStringUInt64">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnLogMessageGenerator">
            <summary>Sets the shim of Logger.Warn(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnObject">
            <summary>Sets the shim of Logger.Warn(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.WarnOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.WarnOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.WarnOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets the shim of Logger.Warn(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.WarnOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets the shim of Logger.Warn(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.WarnOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.WarnOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets the shim of Logger.Warn(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.WarnOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Warn(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.WarnOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets the shim of Logger.Warn(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnString">
            <summary>Sets the shim of Logger.Warn(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringBoolean">
            <summary>Sets the shim of Logger.Warn(String message, Boolean argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringByte">
            <summary>Sets the shim of Logger.Warn(String message, Byte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringChar">
            <summary>Sets the shim of Logger.Warn(String message, Char argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringDecimal">
            <summary>Sets the shim of Logger.Warn(String message, Decimal argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringDouble">
            <summary>Sets the shim of Logger.Warn(String message, Double argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringException">
            <summary>Sets the shim of Logger.Warn(String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringInt32">
            <summary>Sets the shim of Logger.Warn(String message, Int32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringInt64">
            <summary>Sets the shim of Logger.Warn(String message, Int64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringObject">
            <summary>Sets the shim of Logger.Warn(String message, Object argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringObjectArray">
            <summary>Sets the shim of Logger.Warn(String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringObjectObject">
            <summary>Sets the shim of Logger.Warn(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringObjectObjectObject">
            <summary>Sets the shim of Logger.Warn(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringSByte">
            <summary>Sets the shim of Logger.Warn(String message, SByte argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringSingle">
            <summary>Sets the shim of Logger.Warn(String message, Single argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringString">
            <summary>Sets the shim of Logger.Warn(String message, String argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringUInt32">
            <summary>Sets the shim of Logger.Warn(String message, UInt32 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WarnStringUInt64">
            <summary>Sets the shim of Logger.Warn(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WriteToTargetsLogEventInfo">
            <summary>Sets the shim of Logger.WriteToTargets(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WriteToTargetsLogLevelExceptionIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, Exception ex, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WriteToTargetsLogLevelExceptionStringObjectArray">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, Exception ex, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WriteToTargetsLogLevelIFormatProviderString">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, IFormatProvider formatProvider, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WriteToTargetsLogLevelIFormatProviderStringObjectArray">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WriteToTargetsLogLevelStringException">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, String message, Exception ex)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WriteToTargetsLogLevelStringObjectArray">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimLogger.WriteToTargetsOf1LogLevelIFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,``0})">
            <summary>Sets the shim of Logger.WriteToTargets(LogLevel level, IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimLogger.WriteToTargetsTypeLogEventInfo">
            <summary>Sets the shim of Logger.WriteToTargets(Type wrapperType, LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimMappedDiagnosticsContext">
            <summary>Shim type of NLog.MappedDiagnosticsContext</summary>
        </member>
        <member name="M:NLog.Fakes.ShimMappedDiagnosticsContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimMappedDiagnosticsContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimMappedDiagnosticsContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.Clear">
            <summary>Sets the shim of MappedDiagnosticsContext.Clear()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.ContainsString">
            <summary>Sets the shim of MappedDiagnosticsContext.Contains(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.GetNames">
            <summary>Sets the shim of MappedDiagnosticsContext.GetNames()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.GetObjectString">
            <summary>Sets the shim of MappedDiagnosticsContext.GetObject(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.GetString">
            <summary>Sets the shim of MappedDiagnosticsContext.Get(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.GetStringIFormatProvider">
            <summary>Sets the shim of MappedDiagnosticsContext.Get(String item, IFormatProvider formatProvider)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.GetThreadDictionaryBoolean">
            <summary>Sets the shim of MappedDiagnosticsContext.GetThreadDictionary(Boolean create)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.RemoveString">
            <summary>Sets the shim of MappedDiagnosticsContext.Remove(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.SetStringObject">
            <summary>Sets the shim of MappedDiagnosticsContext.Set(String item, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.SetStringString">
            <summary>Sets the shim of MappedDiagnosticsContext.Set(String item, String value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsContext.StaticConstructor">
            <summary>Sets the shim of MappedDiagnosticsContext.MappedDiagnosticsContext()</summary>
        </member>
        <member name="T:NLog.Fakes.ShimMappedDiagnosticsLogicalContext">
            <summary>Shim type of NLog.MappedDiagnosticsLogicalContext</summary>
        </member>
        <member name="M:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.Clear">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.Clear()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.ClearBoolean">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.Clear(Boolean free)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.ContainsString">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.Contains(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.GetLogicalThreadDictionaryBoolean">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.GetLogicalThreadDictionary(Boolean clone)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.GetNames">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.GetNames()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.GetObjectString">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.GetObject(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.GetString">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.Get(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.GetStringIFormatProvider">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.Get(String item, IFormatProvider formatProvider)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.RemoveString">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.Remove(String item)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.SetStringObject">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.Set(String item, Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.SetStringString">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.Set(String item, String value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimMappedDiagnosticsLogicalContext.StaticConstructor">
            <summary>Sets the shim of MappedDiagnosticsLogicalContext.MappedDiagnosticsLogicalContext()</summary>
        </member>
        <member name="T:NLog.Fakes.ShimNLogConfigurationException">
            <summary>Shim type of NLog.NLogConfigurationException</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogConfigurationException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogConfigurationException.#ctor(NLog.NLogConfigurationException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Fakes.ShimNLogConfigurationException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogConfigurationException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogConfigurationException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogConfigurationException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogConfigurationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogConfigurationException.Constructor">
            <summary>Sets the shim of NLogConfigurationException.NLogConfigurationException()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogConfigurationException.ConstructorExceptionStringObjectArray">
            <summary>Sets the shim of NLogConfigurationException.NLogConfigurationException(Exception innerException, String message, Object[] messageParameters)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogConfigurationException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of NLogConfigurationException.NLogConfigurationException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogConfigurationException.ConstructorString">
            <summary>Sets the shim of NLogConfigurationException.NLogConfigurationException(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogConfigurationException.ConstructorStringException">
            <summary>Sets the shim of NLogConfigurationException.NLogConfigurationException(String message, Exception innerException)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogConfigurationException.ConstructorStringObjectArray">
            <summary>Sets the shim of NLogConfigurationException.NLogConfigurationException(String message, Object[] messageParameters)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimNLogRuntimeException">
            <summary>Shim type of NLog.NLogRuntimeException</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogRuntimeException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogRuntimeException.#ctor(NLog.NLogRuntimeException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Fakes.ShimNLogRuntimeException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogRuntimeException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogRuntimeException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogRuntimeException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogRuntimeException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogRuntimeException.Constructor">
            <summary>Sets the shim of NLogRuntimeException.NLogRuntimeException()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogRuntimeException.ConstructorSerializationInfoStreamingContext">
            <summary>Sets the shim of NLogRuntimeException.NLogRuntimeException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogRuntimeException.ConstructorString">
            <summary>Sets the shim of NLogRuntimeException.NLogRuntimeException(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogRuntimeException.ConstructorStringException">
            <summary>Sets the shim of NLogRuntimeException.NLogRuntimeException(String message, Exception innerException)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogRuntimeException.ConstructorStringObjectArray">
            <summary>Sets the shim of NLogRuntimeException.NLogRuntimeException(String message, Object[] messageParameters)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimNLogTraceListener">
            <summary>Shim type of NLog.NLogTraceListener</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogTraceListener.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogTraceListener.#ctor(NLog.NLogTraceListener)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Fakes.ShimNLogTraceListener.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.AutoLoggerNameGet">
            <summary>Sets the shim of NLogTraceListener.get_AutoLoggerName()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.AutoLoggerNameSetBoolean">
            <summary>Sets the shim of NLogTraceListener.set_AutoLoggerName(Boolean value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.Close">
            <summary>Sets the shim of NLogTraceListener.Close()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.DefaultLogLevelGet">
            <summary>Sets the shim of NLogTraceListener.get_DefaultLogLevel()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.DefaultLogLevelSetLogLevel">
            <summary>Sets the shim of NLogTraceListener.set_DefaultLogLevel(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.DisableFlushGet">
            <summary>Sets the shim of NLogTraceListener.get_DisableFlush()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.DisableFlushSetBoolean">
            <summary>Sets the shim of NLogTraceListener.set_DisableFlush(Boolean value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.FailString">
            <summary>Sets the shim of NLogTraceListener.Fail(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.FailStringString">
            <summary>Sets the shim of NLogTraceListener.Fail(String message, String detailMessage)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.Flush">
            <summary>Sets the shim of NLogTraceListener.Flush()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.ForceLogLevelGet">
            <summary>Sets the shim of NLogTraceListener.get_ForceLogLevel()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.ForceLogLevelSetLogLevel">
            <summary>Sets the shim of NLogTraceListener.set_ForceLogLevel(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.GetSupportedAttributes">
            <summary>Sets the shim of NLogTraceListener.GetSupportedAttributes()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.InitAttributes">
            <summary>Sets the shim of NLogTraceListener.InitAttributes()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.IsThreadSafeGet">
            <summary>Sets the shim of NLogTraceListener.get_IsThreadSafe()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.LogFactoryGet">
            <summary>Sets the shim of NLogTraceListener.get_LogFactory()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.LogFactorySetLogFactory">
            <summary>Sets the shim of NLogTraceListener.set_LogFactory(LogFactory value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.ProcessLogEventInfoLogLevelStringStringObjectArrayNullableOfInt32NullableOfTraceEventTypeNullableOfGuid">
            <summary>Sets the shim of NLogTraceListener.ProcessLogEventInfo(LogLevel logLevel, String loggerName, String message, Object[] arguments, Nullable`1&lt;Int32&gt; eventId, Nullable`1&lt;TraceEventType&gt; eventType, Nullable`1&lt;Guid&gt; relatedActiviyId)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.TraceDataTraceEventCacheStringTraceEventTypeInt32Object">
            <summary>Sets the shim of NLogTraceListener.TraceData(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, Object data)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.TraceDataTraceEventCacheStringTraceEventTypeInt32ObjectArray">
            <summary>Sets the shim of NLogTraceListener.TraceData(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, Object[] data)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.TraceEventTraceEventCacheStringTraceEventTypeInt32">
            <summary>Sets the shim of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.TraceEventTraceEventCacheStringTraceEventTypeInt32String">
            <summary>Sets the shim of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.TraceEventTraceEventCacheStringTraceEventTypeInt32StringObjectArray">
            <summary>Sets the shim of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, String format, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.TraceTransferTraceEventCacheStringInt32StringGuid">
            <summary>Sets the shim of NLogTraceListener.TraceTransfer(TraceEventCache eventCache, String source, Int32 id, String message, Guid relatedActivityId)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.WriteLineString">
            <summary>Sets the shim of NLogTraceListener.WriteLine(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AllInstances.WriteString">
            <summary>Sets the shim of NLogTraceListener.Write(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AutoLoggerNameGet">
            <summary>Sets the shim of NLogTraceListener.get_AutoLoggerName()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.AutoLoggerNameSetBoolean">
            <summary>Sets the shim of NLogTraceListener.set_AutoLoggerName(Boolean value)</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogTraceListener.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogTraceListener.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNLogTraceListener.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.Close">
            <summary>Sets the shim of NLogTraceListener.Close()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.Constructor">
            <summary>Sets the shim of NLogTraceListener.NLogTraceListener()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.DefaultLogLevelGet">
            <summary>Sets the shim of NLogTraceListener.get_DefaultLogLevel()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.DefaultLogLevelSetLogLevel">
            <summary>Sets the shim of NLogTraceListener.set_DefaultLogLevel(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.DisableFlushGet">
            <summary>Sets the shim of NLogTraceListener.get_DisableFlush()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.DisableFlushSetBoolean">
            <summary>Sets the shim of NLogTraceListener.set_DisableFlush(Boolean value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.FailString">
            <summary>Sets the shim of NLogTraceListener.Fail(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.FailStringString">
            <summary>Sets the shim of NLogTraceListener.Fail(String message, String detailMessage)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.Flush">
            <summary>Sets the shim of NLogTraceListener.Flush()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.ForceLogLevelGet">
            <summary>Sets the shim of NLogTraceListener.get_ForceLogLevel()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.ForceLogLevelSetLogLevel">
            <summary>Sets the shim of NLogTraceListener.set_ForceLogLevel(LogLevel value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.GetSupportedAttributes">
            <summary>Sets the shim of NLogTraceListener.GetSupportedAttributes()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.InitAttributes">
            <summary>Sets the shim of NLogTraceListener.InitAttributes()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.IsThreadSafeGet">
            <summary>Sets the shim of NLogTraceListener.get_IsThreadSafe()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.LogFactoryGet">
            <summary>Sets the shim of NLogTraceListener.get_LogFactory()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.LogFactorySetLogFactory">
            <summary>Sets the shim of NLogTraceListener.set_LogFactory(LogFactory value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.ProcessLogEventInfoLogLevelStringStringObjectArrayNullableOfInt32NullableOfTraceEventTypeNullableOfGuid">
            <summary>Sets the shim of NLogTraceListener.ProcessLogEventInfo(LogLevel logLevel, String loggerName, String message, Object[] arguments, Nullable`1&lt;Int32&gt; eventId, Nullable`1&lt;TraceEventType&gt; eventType, Nullable`1&lt;Guid&gt; relatedActiviyId)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.StaticConstructor">
            <summary>Sets the shim of NLogTraceListener.NLogTraceListener()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.TraceDataTraceEventCacheStringTraceEventTypeInt32Object">
            <summary>Sets the shim of NLogTraceListener.TraceData(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, Object data)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.TraceDataTraceEventCacheStringTraceEventTypeInt32ObjectArray">
            <summary>Sets the shim of NLogTraceListener.TraceData(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, Object[] data)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.TraceEventTraceEventCacheStringTraceEventTypeInt32">
            <summary>Sets the shim of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.TraceEventTraceEventCacheStringTraceEventTypeInt32String">
            <summary>Sets the shim of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.TraceEventTraceEventCacheStringTraceEventTypeInt32StringObjectArray">
            <summary>Sets the shim of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, String format, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.TraceTransferTraceEventCacheStringInt32StringGuid">
            <summary>Sets the shim of NLogTraceListener.TraceTransfer(TraceEventCache eventCache, String source, Int32 id, String message, Guid relatedActivityId)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.TranslateLogLevelTraceEventType">
            <summary>Sets the shim of NLogTraceListener.TranslateLogLevel(TraceEventType eventType)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.WriteLineString">
            <summary>Sets the shim of NLogTraceListener.WriteLine(String message)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNLogTraceListener.WriteString">
            <summary>Sets the shim of NLogTraceListener.Write(String message)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimNestedDiagnosticsContext">
            <summary>Shim type of NLog.NestedDiagnosticsContext</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNestedDiagnosticsContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNestedDiagnosticsContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNestedDiagnosticsContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.Clear">
            <summary>Sets the shim of NestedDiagnosticsContext.Clear()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.GetAllMessages">
            <summary>Sets the shim of NestedDiagnosticsContext.GetAllMessages()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.GetAllMessagesIFormatProvider">
            <summary>Sets the shim of NestedDiagnosticsContext.GetAllMessages(IFormatProvider formatProvider)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.GetAllObjects">
            <summary>Sets the shim of NestedDiagnosticsContext.GetAllObjects()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.Pop">
            <summary>Sets the shim of NestedDiagnosticsContext.Pop()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.PopIFormatProvider">
            <summary>Sets the shim of NestedDiagnosticsContext.Pop(IFormatProvider formatProvider)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.PopObject">
            <summary>Sets the shim of NestedDiagnosticsContext.PopObject()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.PushObject">
            <summary>Sets the shim of NestedDiagnosticsContext.Push(Object value)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.PushString">
            <summary>Sets the shim of NestedDiagnosticsContext.Push(String text)</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.StaticConstructor">
            <summary>Sets the shim of NestedDiagnosticsContext.NestedDiagnosticsContext()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.ThreadStackGet">
            <summary>Sets the shim of NestedDiagnosticsContext.get_ThreadStack()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.TopMessageGet">
            <summary>Sets the shim of NestedDiagnosticsContext.get_TopMessage()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsContext.TopObjectGet">
            <summary>Sets the shim of NestedDiagnosticsContext.get_TopObject()</summary>
        </member>
        <member name="T:NLog.Fakes.ShimNestedDiagnosticsLogicalContext">
            <summary>Shim type of NLog.NestedDiagnosticsLogicalContext</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNestedDiagnosticsLogicalContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNestedDiagnosticsLogicalContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNestedDiagnosticsLogicalContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsLogicalContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsLogicalContext.Clear">
            <summary>Sets the shim of NestedDiagnosticsLogicalContext.Clear()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsLogicalContext.GetAllObjects">
            <summary>Sets the shim of NestedDiagnosticsLogicalContext.GetAllObjects()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNestedDiagnosticsLogicalContext.Pop">
            <summary>Sets the shim of NestedDiagnosticsLogicalContext.Pop()</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNestedDiagnosticsLogicalContext.PushOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.IDisposable})">
            <summary>Sets the shim of NestedDiagnosticsLogicalContext.Push(!!0 value)</summary>
        </member>
        <member name="T:NLog.Fakes.ShimNullLogger">
            <summary>Shim type of NLog.NullLogger</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNullLogger.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNullLogger.#ctor(NLog.NullLogger)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Fakes.ShimNullLogger.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNullLogger.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNullLogger.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNullLogger.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNullLogger.Bind(NLog.ILogger)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNullLogger.Bind(NLog.ILoggerBase)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.Fakes.ShimNullLogger.Bind(NLog.ISuppress)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNullLogger.Constructor">
            <summary>Sets the shim of NullLogger.NullLogger()</summary>
        </member>
        <member name="P:NLog.Fakes.ShimNullLogger.ConstructorLogFactory">
            <summary>Sets the shim of NullLogger.NullLogger(LogFactory factory)</summary>
        </member>
        <member name="T:NLog.Fakes.StubILogger">
            <summary>Stub type of NLog.ILogger</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.#ctor">
            <summary>Initializes a new instance of type StubILogger</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugExceptionIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Debug(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugExceptionString">
            <summary>Sets the stub of ILogger.Debug(Exception exception, String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugExceptionStringException">
            <summary>Sets the stub of ILogger.DebugException(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugExceptionStringObjectArray">
            <summary>Sets the stub of ILogger.Debug(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderObject">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringBoolean">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringByte">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringChar">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringDecimal">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringDouble">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringInt32">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringInt64">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringObject">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringSByte">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringSingle">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringString">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringUInt32">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugIFormatProviderStringUInt64">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugLogMessageGenerator">
            <summary>Sets the stub of ILogger.Debug(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugObject">
            <summary>Sets the stub of ILogger.Debug(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.DebugOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets stubs of Debug(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.DebugOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets stubs of Debug(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.DebugOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of Debug(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.DebugOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets stubs of Debug(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.DebugOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets stubs of Debug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.DebugOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets stubs of Debug(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.DebugOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets stubs of Debug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.DebugOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets stubs of Debug(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugString">
            <summary>Sets the stub of ILogger.Debug(String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringBoolean">
            <summary>Sets the stub of ILogger.Debug(String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringByte">
            <summary>Sets the stub of ILogger.Debug(String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringChar">
            <summary>Sets the stub of ILogger.Debug(String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringDecimal">
            <summary>Sets the stub of ILogger.Debug(String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringDouble">
            <summary>Sets the stub of ILogger.Debug(String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringException">
            <summary>Sets the stub of ILogger.Debug(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringInt32">
            <summary>Sets the stub of ILogger.Debug(String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringInt64">
            <summary>Sets the stub of ILogger.Debug(String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringObject">
            <summary>Sets the stub of ILogger.Debug(String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringObjectArray">
            <summary>Sets the stub of ILogger.Debug(String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringObjectObject">
            <summary>Sets the stub of ILogger.Debug(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringObjectObjectObject">
            <summary>Sets the stub of ILogger.Debug(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringSByte">
            <summary>Sets the stub of ILogger.Debug(String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringSingle">
            <summary>Sets the stub of ILogger.Debug(String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringString">
            <summary>Sets the stub of ILogger.Debug(String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringUInt32">
            <summary>Sets the stub of ILogger.Debug(String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.DebugStringUInt64">
            <summary>Sets the stub of ILogger.Debug(String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorExceptionIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Error(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorExceptionString">
            <summary>Sets the stub of ILogger.Error(Exception exception, String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorExceptionStringException">
            <summary>Sets the stub of ILogger.ErrorException(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorExceptionStringObjectArray">
            <summary>Sets the stub of ILogger.Error(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderObject">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringBoolean">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringByte">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringChar">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringDecimal">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringDouble">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringInt32">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringInt64">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringObject">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringSByte">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringSingle">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringString">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringUInt32">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorIFormatProviderStringUInt64">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorLogMessageGenerator">
            <summary>Sets the stub of ILogger.Error(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorObject">
            <summary>Sets the stub of ILogger.Error(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.ErrorOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets stubs of Error(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.ErrorOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets stubs of Error(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.ErrorOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of Error(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.ErrorOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets stubs of Error(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.ErrorOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets stubs of Error(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.ErrorOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets stubs of Error(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.ErrorOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets stubs of Error(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.ErrorOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets stubs of Error(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorString">
            <summary>Sets the stub of ILogger.Error(String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringBoolean">
            <summary>Sets the stub of ILogger.Error(String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringByte">
            <summary>Sets the stub of ILogger.Error(String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringChar">
            <summary>Sets the stub of ILogger.Error(String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringDecimal">
            <summary>Sets the stub of ILogger.Error(String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringDouble">
            <summary>Sets the stub of ILogger.Error(String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringException">
            <summary>Sets the stub of ILogger.Error(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringInt32">
            <summary>Sets the stub of ILogger.Error(String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringInt64">
            <summary>Sets the stub of ILogger.Error(String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringObject">
            <summary>Sets the stub of ILogger.Error(String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringObjectArray">
            <summary>Sets the stub of ILogger.Error(String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringObjectObject">
            <summary>Sets the stub of ILogger.Error(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringObjectObjectObject">
            <summary>Sets the stub of ILogger.Error(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringSByte">
            <summary>Sets the stub of ILogger.Error(String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringSingle">
            <summary>Sets the stub of ILogger.Error(String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringString">
            <summary>Sets the stub of ILogger.Error(String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringUInt32">
            <summary>Sets the stub of ILogger.Error(String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.ErrorStringUInt64">
            <summary>Sets the stub of ILogger.Error(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.StubILogger.NLog#ILoggerBase#Factory">
            <summary>Sets the stub of ILoggerBase.get_Factory()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FactoryGet">
            <summary>Sets the stub of ILoggerBase.get_Factory()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalExceptionIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Fatal(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalExceptionString">
            <summary>Sets the stub of ILogger.Fatal(Exception exception, String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalExceptionStringException">
            <summary>Sets the stub of ILogger.FatalException(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalExceptionStringObjectArray">
            <summary>Sets the stub of ILogger.Fatal(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderObject">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringBoolean">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringByte">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringChar">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringDecimal">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringDouble">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringInt32">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringInt64">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringObject">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringSByte">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringSingle">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringString">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringUInt32">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalIFormatProviderStringUInt64">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalLogMessageGenerator">
            <summary>Sets the stub of ILogger.Fatal(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalObject">
            <summary>Sets the stub of ILogger.Fatal(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.FatalOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets stubs of Fatal(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.FatalOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets stubs of Fatal(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.FatalOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of Fatal(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.FatalOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets stubs of Fatal(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.FatalOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets stubs of Fatal(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.FatalOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets stubs of Fatal(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.FatalOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets stubs of Fatal(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.FatalOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets stubs of Fatal(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalString">
            <summary>Sets the stub of ILogger.Fatal(String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringBoolean">
            <summary>Sets the stub of ILogger.Fatal(String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringByte">
            <summary>Sets the stub of ILogger.Fatal(String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringChar">
            <summary>Sets the stub of ILogger.Fatal(String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringDecimal">
            <summary>Sets the stub of ILogger.Fatal(String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringDouble">
            <summary>Sets the stub of ILogger.Fatal(String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringException">
            <summary>Sets the stub of ILogger.Fatal(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringInt32">
            <summary>Sets the stub of ILogger.Fatal(String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringInt64">
            <summary>Sets the stub of ILogger.Fatal(String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringObject">
            <summary>Sets the stub of ILogger.Fatal(String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringObjectArray">
            <summary>Sets the stub of ILogger.Fatal(String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringObjectObject">
            <summary>Sets the stub of ILogger.Fatal(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringObjectObjectObject">
            <summary>Sets the stub of ILogger.Fatal(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringSByte">
            <summary>Sets the stub of ILogger.Fatal(String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringSingle">
            <summary>Sets the stub of ILogger.Fatal(String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringString">
            <summary>Sets the stub of ILogger.Fatal(String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringUInt32">
            <summary>Sets the stub of ILogger.Fatal(String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.FatalStringUInt64">
            <summary>Sets the stub of ILogger.Fatal(String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoExceptionIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Info(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoExceptionString">
            <summary>Sets the stub of ILogger.Info(Exception exception, String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoExceptionStringException">
            <summary>Sets the stub of ILogger.InfoException(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoExceptionStringObjectArray">
            <summary>Sets the stub of ILogger.Info(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderObject">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringBoolean">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringByte">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringChar">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringDecimal">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringDouble">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringInt32">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringInt64">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringObject">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringSByte">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringSingle">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringString">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringUInt32">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoIFormatProviderStringUInt64">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoLogMessageGenerator">
            <summary>Sets the stub of ILogger.Info(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoObject">
            <summary>Sets the stub of ILogger.Info(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.InfoOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets stubs of Info(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.InfoOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets stubs of Info(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.InfoOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of Info(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.InfoOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets stubs of Info(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.InfoOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets stubs of Info(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.InfoOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets stubs of Info(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.InfoOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets stubs of Info(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.InfoOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets stubs of Info(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoString">
            <summary>Sets the stub of ILogger.Info(String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringBoolean">
            <summary>Sets the stub of ILogger.Info(String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringByte">
            <summary>Sets the stub of ILogger.Info(String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringChar">
            <summary>Sets the stub of ILogger.Info(String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringDecimal">
            <summary>Sets the stub of ILogger.Info(String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringDouble">
            <summary>Sets the stub of ILogger.Info(String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringException">
            <summary>Sets the stub of ILogger.Info(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringInt32">
            <summary>Sets the stub of ILogger.Info(String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringInt64">
            <summary>Sets the stub of ILogger.Info(String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringObject">
            <summary>Sets the stub of ILogger.Info(String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringObjectArray">
            <summary>Sets the stub of ILogger.Info(String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringObjectObject">
            <summary>Sets the stub of ILogger.Info(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringObjectObjectObject">
            <summary>Sets the stub of ILogger.Info(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringSByte">
            <summary>Sets the stub of ILogger.Info(String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringSingle">
            <summary>Sets the stub of ILogger.Info(String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringString">
            <summary>Sets the stub of ILogger.Info(String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringUInt32">
            <summary>Sets the stub of ILogger.Info(String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.InfoStringUInt64">
            <summary>Sets the stub of ILogger.Info(String message, UInt64 argument)</summary>
        </member>
        <member name="P:NLog.Fakes.StubILogger.NLog#ILogger#IsDebugEnabled">
            <summary>Sets the stub of ILogger.get_IsDebugEnabled()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.IsDebugEnabledGet">
            <summary>Sets the stub of ILogger.get_IsDebugEnabled()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.IsEnabledLogLevel">
            <summary>Sets the stub of ILoggerBase.IsEnabled(LogLevel level)</summary>
        </member>
        <member name="P:NLog.Fakes.StubILogger.NLog#ILogger#IsErrorEnabled">
            <summary>Sets the stub of ILogger.get_IsErrorEnabled()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.IsErrorEnabledGet">
            <summary>Sets the stub of ILogger.get_IsErrorEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.StubILogger.NLog#ILogger#IsFatalEnabled">
            <summary>Sets the stub of ILogger.get_IsFatalEnabled()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.IsFatalEnabledGet">
            <summary>Sets the stub of ILogger.get_IsFatalEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.StubILogger.NLog#ILogger#IsInfoEnabled">
            <summary>Sets the stub of ILogger.get_IsInfoEnabled()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.IsInfoEnabledGet">
            <summary>Sets the stub of ILogger.get_IsInfoEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.StubILogger.NLog#ILogger#IsTraceEnabled">
            <summary>Sets the stub of ILogger.get_IsTraceEnabled()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.IsTraceEnabledGet">
            <summary>Sets the stub of ILogger.get_IsTraceEnabled()</summary>
        </member>
        <member name="P:NLog.Fakes.StubILogger.NLog#ILogger#IsWarnEnabled">
            <summary>Sets the stub of ILogger.get_IsWarnEnabled()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.IsWarnEnabledGet">
            <summary>Sets the stub of ILogger.get_IsWarnEnabled()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogExceptionLogLevelStringException">
            <summary>Sets the stub of ILoggerBase.LogException(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogEventInfo">
            <summary>Sets the stub of ILoggerBase.Log(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelExceptionIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelExceptionStringObjectArray">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringBoolean">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringByte">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringChar">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringDecimal">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringDouble">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringInt32">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringInt64">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringSByte">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringSingle">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringString">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringUInt32">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelIFormatProviderStringUInt64">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelLogMessageGenerator">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Object value)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelString">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringBoolean">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringByte">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringChar">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringDecimal">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringDouble">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringException">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringInt32">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringInt64">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringObjectArray">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringObjectObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringObjectObjectObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringSByte">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringSingle">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringString">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringUInt32">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogLogLevelStringUInt64">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.LogOf1LogLevelIFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,``0})">
            <summary>Sets stubs of Log(LogLevel level, IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.LogOf1LogLevelIFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,System.String,``0})">
            <summary>Sets stubs of Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.LogOf1LogLevelM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,``0})">
            <summary>Sets stubs of Log(LogLevel level, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.LogOf1LogLevelStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.String,``0})">
            <summary>Sets stubs of Log(LogLevel level, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.LogOf2LogLevelIFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets stubs of Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.LogOf2LogLevelStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.String,``0,``1})">
            <summary>Sets stubs of Log(LogLevel level, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.LogOf3LogLevelIFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets stubs of Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.LogOf3LogLevelStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.String,``0,``1,``2})">
            <summary>Sets stubs of Log(LogLevel level, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.LogTypeLogEventInfo">
            <summary>Sets the stub of ILoggerBase.Log(Type wrapperType, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(NLog.LogMessageGenerator)">
            <summary>Sets the stub of ILogger.Debug(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.Object)">
            <summary>Sets the stub of ILogger.Debug(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String)">
            <summary>Sets the stub of ILogger.Debug(String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug``1(``0)">
            <summary>Sets the stub of ILogger.Debug(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.Exception,System.String)">
            <summary>Sets the stub of ILogger.Debug(Exception exception, String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug``1(System.IFormatProvider,``0)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.Object)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Debug(String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Debug(String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Char)">
            <summary>Sets the stub of ILogger.Debug(String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Debug(String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Double)">
            <summary>Sets the stub of ILogger.Debug(String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Debug(String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Single)">
            <summary>Sets the stub of ILogger.Debug(String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug``1(System.String,``0)">
            <summary>Sets the stub of ILogger.Debug(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Debug(String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Debug(String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Debug(String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Debug(String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Debug(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Object)">
            <summary>Sets the stub of ILogger.Debug(String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.String)">
            <summary>Sets the stub of ILogger.Debug(String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Debug(String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.Exception,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Debug(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug``1(System.IFormatProvider,System.String,``0)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.Char)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.Object)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.Double)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.Single)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.IFormatProvider,System.String,System.String)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug``2(System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Debug(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Debug(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Debug(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug``3(System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Debug(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Debug(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Debug(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#DebugException(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.DebugException(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(NLog.LogMessageGenerator)">
            <summary>Sets the stub of ILogger.Error(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.Object)">
            <summary>Sets the stub of ILogger.Error(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String)">
            <summary>Sets the stub of ILogger.Error(String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error``1(``0)">
            <summary>Sets the stub of ILogger.Error(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.Exception,System.String)">
            <summary>Sets the stub of ILogger.Error(Exception exception, String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.Object)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error``1(System.IFormatProvider,``0)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Error(String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Error(String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Char)">
            <summary>Sets the stub of ILogger.Error(String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Error(String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Error(String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Double)">
            <summary>Sets the stub of ILogger.Error(String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Error(String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Error(String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Error(String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Single)">
            <summary>Sets the stub of ILogger.Error(String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Error(String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Error(String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Error(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Object)">
            <summary>Sets the stub of ILogger.Error(String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.String)">
            <summary>Sets the stub of ILogger.Error(String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error``1(System.String,``0)">
            <summary>Sets the stub of ILogger.Error(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.Exception,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Error(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error``1(System.IFormatProvider,System.String,``0)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.Char)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.Object)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.Double)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.Single)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.String)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.IFormatProvider,System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Error(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error``2(System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Error(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Error(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error``3(System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Error(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error(System.String,System.Object,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Error(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Error(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#ErrorException(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.ErrorException(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal``1(``0)">
            <summary>Sets the stub of ILogger.Fatal(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(NLog.LogMessageGenerator)">
            <summary>Sets the stub of ILogger.Fatal(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.Object)">
            <summary>Sets the stub of ILogger.Fatal(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String)">
            <summary>Sets the stub of ILogger.Fatal(String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.Exception,System.String)">
            <summary>Sets the stub of ILogger.Fatal(Exception exception, String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.Object)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal``1(System.IFormatProvider,``0)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.String)">
            <summary>Sets the stub of ILogger.Fatal(String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Fatal(String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Fatal(String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Char)">
            <summary>Sets the stub of ILogger.Fatal(String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Fatal(String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Double)">
            <summary>Sets the stub of ILogger.Fatal(String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Fatal(String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Fatal(String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Fatal(String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Single)">
            <summary>Sets the stub of ILogger.Fatal(String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Fatal(String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Object)">
            <summary>Sets the stub of ILogger.Fatal(String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Fatal(String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal``1(System.String,``0)">
            <summary>Sets the stub of ILogger.Fatal(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Fatal(String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Fatal(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.Exception,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Fatal(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal``1(System.IFormatProvider,System.String,``0)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.Char)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.String)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.Double)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.Single)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.Object)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal``2(System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Fatal(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Fatal(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Fatal(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Fatal(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal``3(System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Fatal(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Fatal(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#FatalException(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.FatalException(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(NLog.LogMessageGenerator)">
            <summary>Sets the stub of ILogger.Info(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.Object)">
            <summary>Sets the stub of ILogger.Info(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String)">
            <summary>Sets the stub of ILogger.Info(String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info``1(``0)">
            <summary>Sets the stub of ILogger.Info(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.Exception,System.String)">
            <summary>Sets the stub of ILogger.Info(Exception exception, String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info``1(System.IFormatProvider,``0)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.Object)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Info(String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Info(String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Char)">
            <summary>Sets the stub of ILogger.Info(String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Info(String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Double)">
            <summary>Sets the stub of ILogger.Info(String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Info(String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Info(String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Object)">
            <summary>Sets the stub of ILogger.Info(String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Info(String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info``1(System.String,``0)">
            <summary>Sets the stub of ILogger.Info(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Single)">
            <summary>Sets the stub of ILogger.Info(String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Info(String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Info(String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Info(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.String)">
            <summary>Sets the stub of ILogger.Info(String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Info(String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.Exception,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Info(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info``1(System.IFormatProvider,System.String,``0)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.Char)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.Double)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.Object)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.String)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.Single)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info``2(System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Info(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Info(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Info(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info``3(System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Info(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info(System.String,System.Object,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Info(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Info(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#InfoException(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.InfoException(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(NLog.LogMessageGenerator)">
            <summary>Sets the stub of ILogger.Trace(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String)">
            <summary>Sets the stub of ILogger.Trace(String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace``1(``0)">
            <summary>Sets the stub of ILogger.Trace(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.Object)">
            <summary>Sets the stub of ILogger.Trace(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.Exception,System.String)">
            <summary>Sets the stub of ILogger.Trace(Exception exception, String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.Object)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace``1(System.IFormatProvider,``0)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Trace(String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Trace(String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Char)">
            <summary>Sets the stub of ILogger.Trace(String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Trace(String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Double)">
            <summary>Sets the stub of ILogger.Trace(String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace``1(System.String,``0)">
            <summary>Sets the stub of ILogger.Trace(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.String)">
            <summary>Sets the stub of ILogger.Trace(String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Trace(String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Trace(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Trace(String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Trace(String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Trace(String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Trace(String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Object)">
            <summary>Sets the stub of ILogger.Trace(String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Single)">
            <summary>Sets the stub of ILogger.Trace(String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Trace(String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.Exception,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Trace(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.Char)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.Double)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.Object)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.String)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace``1(System.IFormatProvider,System.String,``0)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.Single)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.IFormatProvider,System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Trace(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace``2(System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Trace(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Trace(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace(System.String,System.Object,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Trace(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace``3(System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Trace(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#TraceException(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.TraceException(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(NLog.LogMessageGenerator)">
            <summary>Sets the stub of ILogger.Warn(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.Object)">
            <summary>Sets the stub of ILogger.Warn(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String)">
            <summary>Sets the stub of ILogger.Warn(String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn``1(``0)">
            <summary>Sets the stub of ILogger.Warn(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.Exception,System.String)">
            <summary>Sets the stub of ILogger.Warn(Exception exception, String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn``1(System.IFormatProvider,``0)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.Object)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Warn(String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Warn(String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.String)">
            <summary>Sets the stub of ILogger.Warn(String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Char)">
            <summary>Sets the stub of ILogger.Warn(String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Double)">
            <summary>Sets the stub of ILogger.Warn(String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Warn(String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Warn(String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Warn(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Warn(String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Warn(String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Warn(String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Single)">
            <summary>Sets the stub of ILogger.Warn(String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Object)">
            <summary>Sets the stub of ILogger.Warn(String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Warn(String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Warn(String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn``1(System.String,``0)">
            <summary>Sets the stub of ILogger.Warn(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.Exception,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Warn(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.Object)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.Byte)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.String)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.Boolean)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.Char)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.Double)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn``1(System.IFormatProvider,System.String,``0)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.Decimal)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.Int32)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.Int64)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.SByte)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.Single)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.UInt32)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.IFormatProvider,System.String,System.UInt64)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Warn(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn``2(System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Warn(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Warn(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>Sets the stub of ILogger.Warn(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn``3(System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Warn(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILogger#WarnException(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.WarnException(String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#IsEnabled(NLog.LogLevel)">
            <summary>Sets the stub of ILoggerBase.IsEnabled(LogLevel level)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogEventInfo)">
            <summary>Sets the stub of ILoggerBase.Log(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log``1(NLog.LogLevel,``0)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,NLog.LogMessageGenerator)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(System.Type,NLog.LogEventInfo)">
            <summary>Sets the stub of ILoggerBase.Log(Type wrapperType, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Exception)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Boolean)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Byte)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Char)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Decimal)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Double)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Int32)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Int64)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.SByte)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.UInt64)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log``1(NLog.LogLevel,System.String,``0)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.UInt32)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Single)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.String)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log``2(NLog.LogLevel,System.String,``0,``1)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ILoggerBase#LogException(NLog.LogLevel,System.String,System.Exception)">
            <summary>Sets the stub of ILoggerBase.LogException(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ISuppress#Swallow(System.Action)">
            <summary>Sets the stub of ISuppress.Swallow(Action action)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ISuppress#Swallow``1(System.Func{``0})">
            <summary>Sets the stub of ISuppress.Swallow(Func`1&lt;!!0&gt; func)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ISuppress#Swallow``1(System.Func{``0},``0)">
            <summary>Sets the stub of ISuppress.Swallow(Func`1&lt;!!0&gt; func, !!0 fallback)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ISuppress#Swallow(System.Threading.Tasks.Task)">
            <summary>Sets the stub of ISuppress.Swallow(Task task)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ISuppress#SwallowAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>Sets the stub of ISuppress.SwallowAsync(Func`1&lt;Task&gt; asyncAction)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ISuppress#SwallowAsync(System.Threading.Tasks.Task)">
            <summary>Sets the stub of ISuppress.SwallowAsync(Task task)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ISuppress#SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Sets the stub of ISuppress.SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.NLog#ISuppress#SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>Sets the stub of ISuppress.SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc, !!0 fallback)</summary>
        </member>
        <member name="P:NLog.Fakes.StubILogger.NLog#ILoggerBase#Name">
            <summary>Sets the stub of ILoggerBase.get_Name()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.NameGet">
            <summary>Sets the stub of ILoggerBase.get_Name()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.SwallowAction">
            <summary>Sets the stub of ISuppress.Swallow(Action action)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.SwallowAsyncFuncOfTask">
            <summary>Sets the stub of ISuppress.SwallowAsync(Func`1&lt;Task&gt; asyncAction)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.SwallowAsyncOf1FuncOfTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.SwallowAsyncOf1FuncOfTaskOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.Tasks.Task{``0}},``0,System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc, !!0 fallback)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.SwallowAsyncTask">
            <summary>Sets the stub of ISuppress.SwallowAsync(Task task)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.SwallowOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},``0})">
            <summary>Sets stubs of Swallow(Func`1&lt;!!0&gt; func)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.SwallowOf1FuncOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},``0,``0})">
            <summary>Sets stubs of Swallow(Func`1&lt;!!0&gt; func, !!0 fallback)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.SwallowTask">
            <summary>Sets the stub of ISuppress.Swallow(Task task)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceExceptionIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Trace(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceExceptionString">
            <summary>Sets the stub of ILogger.Trace(Exception exception, String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceExceptionStringException">
            <summary>Sets the stub of ILogger.TraceException(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceExceptionStringObjectArray">
            <summary>Sets the stub of ILogger.Trace(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderObject">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringBoolean">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringByte">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringChar">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringDecimal">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringDouble">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringInt32">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringInt64">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringObject">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringSByte">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringSingle">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringString">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringUInt32">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceIFormatProviderStringUInt64">
            <summary>Sets the stub of ILogger.Trace(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceLogMessageGenerator">
            <summary>Sets the stub of ILogger.Trace(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceObject">
            <summary>Sets the stub of ILogger.Trace(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.TraceOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets stubs of Trace(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.TraceOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets stubs of Trace(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.TraceOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of Trace(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.TraceOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets stubs of Trace(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.TraceOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets stubs of Trace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.TraceOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets stubs of Trace(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.TraceOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets stubs of Trace(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.TraceOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets stubs of Trace(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceString">
            <summary>Sets the stub of ILogger.Trace(String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringBoolean">
            <summary>Sets the stub of ILogger.Trace(String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringByte">
            <summary>Sets the stub of ILogger.Trace(String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringChar">
            <summary>Sets the stub of ILogger.Trace(String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringDecimal">
            <summary>Sets the stub of ILogger.Trace(String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringDouble">
            <summary>Sets the stub of ILogger.Trace(String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringException">
            <summary>Sets the stub of ILogger.Trace(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringInt32">
            <summary>Sets the stub of ILogger.Trace(String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringInt64">
            <summary>Sets the stub of ILogger.Trace(String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringObject">
            <summary>Sets the stub of ILogger.Trace(String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringObjectArray">
            <summary>Sets the stub of ILogger.Trace(String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringObjectObject">
            <summary>Sets the stub of ILogger.Trace(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringObjectObjectObject">
            <summary>Sets the stub of ILogger.Trace(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringSByte">
            <summary>Sets the stub of ILogger.Trace(String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringSingle">
            <summary>Sets the stub of ILogger.Trace(String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringString">
            <summary>Sets the stub of ILogger.Trace(String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringUInt32">
            <summary>Sets the stub of ILogger.Trace(String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.TraceStringUInt64">
            <summary>Sets the stub of ILogger.Trace(String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnExceptionIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Warn(Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnExceptionString">
            <summary>Sets the stub of ILogger.Warn(Exception exception, String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnExceptionStringException">
            <summary>Sets the stub of ILogger.WarnException(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnExceptionStringObjectArray">
            <summary>Sets the stub of ILogger.Warn(Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderObject">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringBoolean">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringByte">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringChar">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringDecimal">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringDouble">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringInt32">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringInt64">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringObject">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringSByte">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringSingle">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringString">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringUInt32">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnIFormatProviderStringUInt64">
            <summary>Sets the stub of ILogger.Warn(IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnLogMessageGenerator">
            <summary>Sets the stub of ILogger.Warn(LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnObject">
            <summary>Sets the stub of ILogger.Warn(Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.WarnOf1IFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,``0})">
            <summary>Sets stubs of Warn(IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.WarnOf1IFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0})">
            <summary>Sets stubs of Warn(IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.WarnOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>Sets stubs of Warn(!!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.WarnOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>Sets stubs of Warn(String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.WarnOf2IFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets stubs of Warn(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.WarnOf2StringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1})">
            <summary>Sets stubs of Warn(String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.WarnOf3IFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets stubs of Warn(IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILogger.WarnOf3StringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,``1,``2})">
            <summary>Sets stubs of Warn(String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnString">
            <summary>Sets the stub of ILogger.Warn(String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringBoolean">
            <summary>Sets the stub of ILogger.Warn(String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringByte">
            <summary>Sets the stub of ILogger.Warn(String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringChar">
            <summary>Sets the stub of ILogger.Warn(String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringDecimal">
            <summary>Sets the stub of ILogger.Warn(String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringDouble">
            <summary>Sets the stub of ILogger.Warn(String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringException">
            <summary>Sets the stub of ILogger.Warn(String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringInt32">
            <summary>Sets the stub of ILogger.Warn(String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringInt64">
            <summary>Sets the stub of ILogger.Warn(String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringObject">
            <summary>Sets the stub of ILogger.Warn(String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringObjectArray">
            <summary>Sets the stub of ILogger.Warn(String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringObjectObject">
            <summary>Sets the stub of ILogger.Warn(String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringObjectObjectObject">
            <summary>Sets the stub of ILogger.Warn(String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringSByte">
            <summary>Sets the stub of ILogger.Warn(String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringSingle">
            <summary>Sets the stub of ILogger.Warn(String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringString">
            <summary>Sets the stub of ILogger.Warn(String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringUInt32">
            <summary>Sets the stub of ILogger.Warn(String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILogger.WarnStringUInt64">
            <summary>Sets the stub of ILogger.Warn(String message, UInt64 argument)</summary>
        </member>
        <member name="T:NLog.Fakes.StubILoggerBase">
            <summary>Stub type of NLog.ILoggerBase</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.#ctor">
            <summary>Initializes a new instance of type StubILoggerBase</summary>
        </member>
        <member name="P:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Factory">
            <summary>Sets the stub of ILoggerBase.get_Factory()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.FactoryGet">
            <summary>Sets the stub of ILoggerBase.get_Factory()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.IsEnabledLogLevel">
            <summary>Sets the stub of ILoggerBase.IsEnabled(LogLevel level)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogExceptionLogLevelStringException">
            <summary>Sets the stub of ILoggerBase.LogException(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogEventInfo">
            <summary>Sets the stub of ILoggerBase.Log(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelExceptionIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelExceptionStringObjectArray">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringBoolean">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringByte">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringChar">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringDecimal">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringDouble">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringInt32">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringInt64">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringObjectArray">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringSByte">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringSingle">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringString">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringUInt32">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelIFormatProviderStringUInt64">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelLogMessageGenerator">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Object value)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelString">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringBoolean">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Boolean argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringByte">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Byte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringChar">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Char argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringDecimal">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Decimal argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringDouble">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Double argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringException">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringInt32">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Int32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringInt64">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Int64 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringObjectArray">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringObjectObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringObjectObjectObject">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringSByte">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, SByte argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringSingle">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Single argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringString">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, String argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringUInt32">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, UInt32 argument)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogLogLevelStringUInt64">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.LogOf1LogLevelIFormatProviderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,``0})">
            <summary>Sets stubs of Log(LogLevel level, IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.LogOf1LogLevelIFormatProviderStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,System.String,``0})">
            <summary>Sets stubs of Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.LogOf1LogLevelM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,``0})">
            <summary>Sets stubs of Log(LogLevel level, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.LogOf1LogLevelStringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.String,``0})">
            <summary>Sets stubs of Log(LogLevel level, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.LogOf2LogLevelIFormatProviderStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,System.String,``0,``1})">
            <summary>Sets stubs of Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.LogOf2LogLevelStringM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.String,``0,``1})">
            <summary>Sets stubs of Log(LogLevel level, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.LogOf3LogLevelIFormatProviderStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2})">
            <summary>Sets stubs of Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.LogOf3LogLevelStringM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{NLog.LogLevel,System.String,``0,``1,``2})">
            <summary>Sets stubs of Log(LogLevel level, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.LogTypeLogEventInfo">
            <summary>Sets the stub of ILoggerBase.Log(Type wrapperType, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#IsEnabled(NLog.LogLevel)">
            <summary>Sets the stub of ILoggerBase.IsEnabled(LogLevel level)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogEventInfo)">
            <summary>Sets the stub of ILoggerBase.Log(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,NLog.LogMessageGenerator)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, LogMessageGenerator messageFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log``1(NLog.LogLevel,``0)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(System.Type,NLog.LogEventInfo)">
            <summary>Sets the stub of ILoggerBase.Log(Type wrapperType, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, Object value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, !!0 value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Exception)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log``1(NLog.LogLevel,System.String,``0)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Boolean)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.SByte)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.String)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Int32)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Byte)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Char)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Decimal)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Double)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Int64)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Single)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.UInt32)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.UInt64)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Exception exception, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, String argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Boolean argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Byte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Char argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Decimal argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Double argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Int32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Int64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, SByte argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Single argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt32 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, Object argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, UInt64 argument)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log``2(NLog.LogLevel,System.String,``0,``1)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object arg1, Object arg2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, Exception exception, IFormatProvider formatProvider, String message, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, String message, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>Sets the stub of ILoggerBase.Log(LogLevel level, IFormatProvider formatProvider, String message, !!0 argument1, !!1 argument2, !!2 argument3)</summary>
        </member>
        <member name="M:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#LogException(NLog.LogLevel,System.String,System.Exception)">
            <summary>Sets the stub of ILoggerBase.LogException(LogLevel level, String message, Exception exception)</summary>
        </member>
        <member name="P:NLog.Fakes.StubILoggerBase.NLog#ILoggerBase#Name">
            <summary>Sets the stub of ILoggerBase.get_Name()</summary>
        </member>
        <member name="F:NLog.Fakes.StubILoggerBase.NameGet">
            <summary>Sets the stub of ILoggerBase.get_Name()</summary>
        </member>
        <member name="T:NLog.Fakes.StubISuppress">
            <summary>Stub type of NLog.ISuppress</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.#ctor">
            <summary>Initializes a new instance of type StubISuppress</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.NLog#ISuppress#Swallow``1(System.Func{``0})">
            <summary>Sets the stub of ISuppress.Swallow(Func`1&lt;!!0&gt; func)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.NLog#ISuppress#Swallow(System.Action)">
            <summary>Sets the stub of ISuppress.Swallow(Action action)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.NLog#ISuppress#Swallow(System.Threading.Tasks.Task)">
            <summary>Sets the stub of ISuppress.Swallow(Task task)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.NLog#ISuppress#Swallow``1(System.Func{``0},``0)">
            <summary>Sets the stub of ISuppress.Swallow(Func`1&lt;!!0&gt; func, !!0 fallback)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.NLog#ISuppress#SwallowAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>Sets the stub of ISuppress.SwallowAsync(Func`1&lt;Task&gt; asyncAction)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.NLog#ISuppress#SwallowAsync(System.Threading.Tasks.Task)">
            <summary>Sets the stub of ISuppress.SwallowAsync(Task task)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.NLog#ISuppress#SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Sets the stub of ISuppress.SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.NLog#ISuppress#SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>Sets the stub of ISuppress.SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc, !!0 fallback)</summary>
        </member>
        <member name="F:NLog.Fakes.StubISuppress.SwallowAction">
            <summary>Sets the stub of ISuppress.Swallow(Action action)</summary>
        </member>
        <member name="F:NLog.Fakes.StubISuppress.SwallowAsyncFuncOfTask">
            <summary>Sets the stub of ISuppress.SwallowAsync(Func`1&lt;Task&gt; asyncAction)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.SwallowAsyncOf1FuncOfTaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.SwallowAsyncOf1FuncOfTaskOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{System.Threading.Tasks.Task{``0}},``0,System.Threading.Tasks.Task{``0}})">
            <summary>Sets stubs of SwallowAsync(Func`1&lt;Task`1&lt;!!0&gt;&gt; asyncFunc, !!0 fallback)</summary>
        </member>
        <member name="F:NLog.Fakes.StubISuppress.SwallowAsyncTask">
            <summary>Sets the stub of ISuppress.SwallowAsync(Task task)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.SwallowOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},``0})">
            <summary>Sets stubs of Swallow(Func`1&lt;!!0&gt; func)</summary>
        </member>
        <member name="M:NLog.Fakes.StubISuppress.SwallowOf1FuncOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},``0,``0})">
            <summary>Sets stubs of Swallow(Func`1&lt;!!0&gt; func, !!0 fallback)</summary>
        </member>
        <member name="F:NLog.Fakes.StubISuppress.SwallowTask">
            <summary>Sets the stub of ISuppress.Swallow(Task task)</summary>
        </member>
        <member name="T:NLog.Fakes.StubLogFactory">
            <summary>Stub type of NLog.LogFactory</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory.#ctor(NLog.Config.LoggingConfiguration)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Fakes.StubLogFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory.Dispose(System.Boolean)">
            <summary>Sets the stub of LogFactory.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Fakes.StubLogFactory.DisposeBoolean">
            <summary>Sets the stub of LogFactory.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory.InitializeStub">
            <summary>Initializes a new instance of type StubLogFactory</summary>
        </member>
        <member name="P:NLog.Fakes.StubLogFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Fakes.StubLogFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory.OnConfigurationChanged(NLog.Config.LoggingConfigurationChangedEventArgs)">
            <summary>Sets the stub of LogFactory.OnConfigurationChanged(LoggingConfigurationChangedEventArgs e)</summary>
        </member>
        <member name="F:NLog.Fakes.StubLogFactory.OnConfigurationChangedLoggingConfigurationChangedEventArgs">
            <summary>Sets the stub of LogFactory.OnConfigurationChanged(LoggingConfigurationChangedEventArgs e)</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory.OnConfigurationReloaded(NLog.Config.LoggingConfigurationReloadedEventArgs)">
            <summary>Sets the stub of LogFactory.OnConfigurationReloaded(LoggingConfigurationReloadedEventArgs e)</summary>
        </member>
        <member name="F:NLog.Fakes.StubLogFactory.OnConfigurationReloadedLoggingConfigurationReloadedEventArgs">
            <summary>Sets the stub of LogFactory.OnConfigurationReloaded(LoggingConfigurationReloadedEventArgs e)</summary>
        </member>
        <member name="T:NLog.Fakes.StubLogFactory`1">
            <summary>Stub type of NLog.LogFactory`1</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Fakes.StubLogFactory`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory`1.Dispose(System.Boolean)">
            <summary>Sets the stub of LogFactory.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Fakes.StubLogFactory`1.DisposeBoolean">
            <summary>Sets the stub of LogFactory.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory`1.InitializeStub">
            <summary>Initializes a new instance of type StubLogFactory</summary>
        </member>
        <member name="P:NLog.Fakes.StubLogFactory`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Fakes.StubLogFactory`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory`1.OnConfigurationChanged(NLog.Config.LoggingConfigurationChangedEventArgs)">
            <summary>Sets the stub of LogFactory.OnConfigurationChanged(LoggingConfigurationChangedEventArgs e)</summary>
        </member>
        <member name="F:NLog.Fakes.StubLogFactory`1.OnConfigurationChangedLoggingConfigurationChangedEventArgs">
            <summary>Sets the stub of LogFactory.OnConfigurationChanged(LoggingConfigurationChangedEventArgs e)</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogFactory`1.OnConfigurationReloaded(NLog.Config.LoggingConfigurationReloadedEventArgs)">
            <summary>Sets the stub of LogFactory.OnConfigurationReloaded(LoggingConfigurationReloadedEventArgs e)</summary>
        </member>
        <member name="F:NLog.Fakes.StubLogFactory`1.OnConfigurationReloadedLoggingConfigurationReloadedEventArgs">
            <summary>Sets the stub of LogFactory.OnConfigurationReloaded(LoggingConfigurationReloadedEventArgs e)</summary>
        </member>
        <member name="T:NLog.Fakes.StubLogger">
            <summary>Stub type of NLog.Logger</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogger.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Fakes.StubLogger.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogger.InitializeStub">
            <summary>Initializes a new instance of type StubLogger</summary>
        </member>
        <member name="P:NLog.Fakes.StubLogger.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Fakes.StubLogger.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Fakes.StubLogger.OnLoggerReconfigured(System.EventArgs)">
            <summary>Sets the stub of Logger.OnLoggerReconfigured(EventArgs e)</summary>
        </member>
        <member name="F:NLog.Fakes.StubLogger.OnLoggerReconfiguredEventArgs">
            <summary>Sets the stub of Logger.OnLoggerReconfigured(EventArgs e)</summary>
        </member>
        <member name="T:NLog.Fakes.StubNLogConfigurationException">
            <summary>Stub type of NLog.NLogConfigurationException</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubNLogConfigurationException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubNLogConfigurationException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogConfigurationException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogConfigurationException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogConfigurationException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogConfigurationException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogConfigurationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogConfigurationException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogConfigurationException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogConfigurationException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.InitializeStub">
            <summary>Initializes a new instance of type StubNLogConfigurationException</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogConfigurationException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogConfigurationException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogConfigurationException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogConfigurationException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogConfigurationException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogConfigurationException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogConfigurationException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogConfigurationException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogConfigurationException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogConfigurationException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogConfigurationException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:NLog.Fakes.StubNLogRuntimeException">
            <summary>Stub type of NLog.NLogRuntimeException</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubNLogRuntimeException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubNLogRuntimeException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogRuntimeException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogRuntimeException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogRuntimeException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogRuntimeException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogRuntimeException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogRuntimeException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogRuntimeException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogRuntimeException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.InitializeStub">
            <summary>Initializes a new instance of type StubNLogRuntimeException</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogRuntimeException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogRuntimeException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogRuntimeException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogRuntimeException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogRuntimeException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogRuntimeException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogRuntimeException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogRuntimeException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogRuntimeException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogRuntimeException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogRuntimeException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:NLog.Fakes.StubNLogTraceListener">
            <summary>Stub type of NLog.NLogTraceListener</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.AttachBackingFieldToName">
            <summary>Attaches delegates to emulate StubNLogTraceListener.Name as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogTraceListener.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.Close">
            <summary>Sets the stub of NLogTraceListener.Close()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.Close01">
            <summary>Sets the stub of NLogTraceListener.Close()</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.Dispose(System.Boolean)">
            <summary>Sets the stub of TraceListener.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.DisposeBoolean">
            <summary>Sets the stub of TraceListener.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.Fail(System.String)">
            <summary>Sets the stub of NLogTraceListener.Fail(String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.Fail(System.String,System.String)">
            <summary>Sets the stub of NLogTraceListener.Fail(String message, String detailMessage)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.FailString">
            <summary>Sets the stub of NLogTraceListener.Fail(String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.FailStringString">
            <summary>Sets the stub of NLogTraceListener.Fail(String message, String detailMessage)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.Flush">
            <summary>Sets the stub of NLogTraceListener.Flush()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.Flush01">
            <summary>Sets the stub of NLogTraceListener.Flush()</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.GetSupportedAttributes">
            <summary>Sets the stub of NLogTraceListener.GetSupportedAttributes()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.GetSupportedAttributes01">
            <summary>Sets the stub of NLogTraceListener.GetSupportedAttributes()</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.InitializeStub">
            <summary>Initializes a new instance of type StubNLogTraceListener</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogTraceListener.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogTraceListener.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogTraceListener.IsThreadSafe">
            <summary>Sets the stub of NLogTraceListener.get_IsThreadSafe()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.IsThreadSafeGet">
            <summary>Sets the stub of NLogTraceListener.get_IsThreadSafe()</summary>
        </member>
        <member name="P:NLog.Fakes.StubNLogTraceListener.Name">
            <summary>Sets the stub of TraceListener.get_Name()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.NameGet">
            <summary>Sets the stub of TraceListener.get_Name()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.NameSetString">
            <summary>Sets the stub of TraceListener.set_Name(String value)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.ProcessLogEventInfo(NLog.LogLevel,System.String,System.String,System.Object[],System.Nullable{System.Int32},System.Nullable{System.Diagnostics.TraceEventType},System.Nullable{System.Guid})">
            <summary>Sets the stub of NLogTraceListener.ProcessLogEventInfo(LogLevel logLevel, String loggerName, String message, Object[] arguments, Nullable`1&lt;Int32&gt; eventId, Nullable`1&lt;TraceEventType&gt; eventType, Nullable`1&lt;Guid&gt; relatedActiviyId)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.ProcessLogEventInfoLogLevelStringStringObjectArrayNullableOfInt32NullableOfTraceEventTypeNullableOfGuid">
            <summary>Sets the stub of NLogTraceListener.ProcessLogEventInfo(LogLevel logLevel, String loggerName, String message, Object[] arguments, Nullable`1&lt;Int32&gt; eventId, Nullable`1&lt;TraceEventType&gt; eventType, Nullable`1&lt;Guid&gt; relatedActiviyId)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>Sets the stub of NLogTraceListener.TraceData(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, Object data)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>Sets the stub of NLogTraceListener.TraceData(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, Object[] data)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.TraceDataTraceEventCacheStringTraceEventTypeInt32Object">
            <summary>Sets the stub of NLogTraceListener.TraceData(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, Object data)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.TraceDataTraceEventCacheStringTraceEventTypeInt32ObjectArray">
            <summary>Sets the stub of NLogTraceListener.TraceData(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, Object[] data)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>Sets the stub of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>Sets the stub of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>Sets the stub of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, String format, Object[] args)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.TraceEventTraceEventCacheStringTraceEventTypeInt32">
            <summary>Sets the stub of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.TraceEventTraceEventCacheStringTraceEventTypeInt32String">
            <summary>Sets the stub of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.TraceEventTraceEventCacheStringTraceEventTypeInt32StringObjectArray">
            <summary>Sets the stub of NLogTraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, String format, Object[] args)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <summary>Sets the stub of NLogTraceListener.TraceTransfer(TraceEventCache eventCache, String source, Int32 id, String message, Guid relatedActivityId)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.TraceTransferTraceEventCacheStringInt32StringGuid">
            <summary>Sets the stub of NLogTraceListener.TraceTransfer(TraceEventCache eventCache, String source, Int32 id, String message, Guid relatedActivityId)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.Write(System.Object)">
            <summary>Sets the stub of TraceListener.Write(Object o)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.Write(System.String)">
            <summary>Sets the stub of NLogTraceListener.Write(String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.Write(System.Object,System.String)">
            <summary>Sets the stub of TraceListener.Write(Object o, String category)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.Write(System.String,System.String)">
            <summary>Sets the stub of TraceListener.Write(String message, String category)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.WriteIndent">
            <summary>Sets the stub of TraceListener.WriteIndent()</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.WriteIndent01">
            <summary>Sets the stub of TraceListener.WriteIndent()</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.WriteLine(System.Object)">
            <summary>Sets the stub of TraceListener.WriteLine(Object o)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.WriteLine(System.String)">
            <summary>Sets the stub of NLogTraceListener.WriteLine(String message)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.WriteLine(System.Object,System.String)">
            <summary>Sets the stub of TraceListener.WriteLine(Object o, String category)</summary>
        </member>
        <member name="M:NLog.Fakes.StubNLogTraceListener.WriteLine(System.String,System.String)">
            <summary>Sets the stub of TraceListener.WriteLine(String message, String category)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.WriteLineObject">
            <summary>Sets the stub of TraceListener.WriteLine(Object o)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.WriteLineObjectString">
            <summary>Sets the stub of TraceListener.WriteLine(Object o, String category)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.WriteLineString">
            <summary>Sets the stub of NLogTraceListener.WriteLine(String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.WriteLineStringString">
            <summary>Sets the stub of TraceListener.WriteLine(String message, String category)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.WriteObject">
            <summary>Sets the stub of TraceListener.Write(Object o)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.WriteObjectString">
            <summary>Sets the stub of TraceListener.Write(Object o, String category)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.WriteString">
            <summary>Sets the stub of NLogTraceListener.Write(String message)</summary>
        </member>
        <member name="F:NLog.Fakes.StubNLogTraceListener.WriteStringString">
            <summary>Sets the stub of TraceListener.Write(String message, String category)</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimConditionBasedFilter">
            <summary>Shim type of NLog.Filters.ConditionBasedFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimConditionBasedFilter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimConditionBasedFilter.#ctor(NLog.Filters.ConditionBasedFilter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimConditionBasedFilter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimConditionBasedFilter.AllInstances.CheckLogEventInfo">
            <summary>Sets the shim of ConditionBasedFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimConditionBasedFilter.AllInstances.ConditionGet">
            <summary>Sets the shim of ConditionBasedFilter.get_Condition()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimConditionBasedFilter.AllInstances.ConditionSetConditionExpression">
            <summary>Sets the shim of ConditionBasedFilter.set_Condition(ConditionExpression value)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimConditionBasedFilter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimConditionBasedFilter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimConditionBasedFilter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimConditionBasedFilter.CheckLogEventInfo">
            <summary>Sets the shim of ConditionBasedFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimConditionBasedFilter.ConditionGet">
            <summary>Sets the shim of ConditionBasedFilter.get_Condition()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimConditionBasedFilter.ConditionSetConditionExpression">
            <summary>Sets the shim of ConditionBasedFilter.set_Condition(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimConditionBasedFilter.Constructor">
            <summary>Sets the shim of ConditionBasedFilter.ConditionBasedFilter()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimConditionBasedFilter.StaticConstructor">
            <summary>Sets the shim of ConditionBasedFilter.ConditionBasedFilter()</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimFilter">
            <summary>Shim type of NLog.Filters.Filter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimFilter.#ctor(NLog.Filters.Filter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimFilter.ActionGet">
            <summary>Sets the shim of Filter.get_Action()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimFilter.ActionSetFilterResult">
            <summary>Sets the shim of Filter.set_Action(FilterResult value)</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimFilter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimFilter.AllInstances.ActionGet">
            <summary>Sets the shim of Filter.get_Action()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimFilter.AllInstances.ActionSetFilterResult">
            <summary>Sets the shim of Filter.set_Action(FilterResult value)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimFilter.AllInstances.GetFilterResultLogEventInfo">
            <summary>Sets the shim of Filter.GetFilterResult(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimFilter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimFilter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimFilter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimFilter.Constructor">
            <summary>Sets the shim of Filter.Filter()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimFilter.GetFilterResultLogEventInfo">
            <summary>Sets the shim of Filter.GetFilterResult(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimFilterAttribute">
            <summary>Shim type of NLog.Filters.FilterAttribute</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimFilterAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimFilterAttribute.#ctor(NLog.Filters.FilterAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimFilterAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimFilterAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimFilterAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimFilterAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimFilterAttribute.ConstructorString">
            <summary>Sets the shim of FilterAttribute.FilterAttribute(String name)</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimLayoutBasedFilter">
            <summary>Shim type of NLog.Filters.LayoutBasedFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimLayoutBasedFilter.#ctor(NLog.Filters.LayoutBasedFilter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimLayoutBasedFilter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimLayoutBasedFilter.AllInstances.LayoutGet">
            <summary>Sets the shim of LayoutBasedFilter.get_Layout()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimLayoutBasedFilter.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of LayoutBasedFilter.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimLayoutBasedFilter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimLayoutBasedFilter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimLayoutBasedFilter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimLayoutBasedFilter.Constructor">
            <summary>Sets the shim of LayoutBasedFilter.LayoutBasedFilter()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimLayoutBasedFilter.LayoutGet">
            <summary>Sets the shim of LayoutBasedFilter.get_Layout()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimLayoutBasedFilter.LayoutSetLayout">
            <summary>Sets the shim of LayoutBasedFilter.set_Layout(Layout value)</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimWhenContainsFilter">
            <summary>Shim type of NLog.Filters.WhenContainsFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenContainsFilter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenContainsFilter.#ctor(NLog.Filters.WhenContainsFilter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimWhenContainsFilter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.AllInstances.CheckLogEventInfo">
            <summary>Sets the shim of WhenContainsFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.AllInstances.IgnoreCaseGet">
            <summary>Sets the shim of WhenContainsFilter.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.AllInstances.IgnoreCaseSetBoolean">
            <summary>Sets the shim of WhenContainsFilter.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.AllInstances.SubstringGet">
            <summary>Sets the shim of WhenContainsFilter.get_Substring()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.AllInstances.SubstringSetString">
            <summary>Sets the shim of WhenContainsFilter.set_Substring(String value)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenContainsFilter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenContainsFilter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.CheckLogEventInfo">
            <summary>Sets the shim of WhenContainsFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.Constructor">
            <summary>Sets the shim of WhenContainsFilter.WhenContainsFilter()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.IgnoreCaseGet">
            <summary>Sets the shim of WhenContainsFilter.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.IgnoreCaseSetBoolean">
            <summary>Sets the shim of WhenContainsFilter.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.SubstringGet">
            <summary>Sets the shim of WhenContainsFilter.get_Substring()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenContainsFilter.SubstringSetString">
            <summary>Sets the shim of WhenContainsFilter.set_Substring(String value)</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimWhenEqualFilter">
            <summary>Shim type of NLog.Filters.WhenEqualFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenEqualFilter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenEqualFilter.#ctor(NLog.Filters.WhenEqualFilter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimWhenEqualFilter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.AllInstances.CheckLogEventInfo">
            <summary>Sets the shim of WhenEqualFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.AllInstances.CompareToGet">
            <summary>Sets the shim of WhenEqualFilter.get_CompareTo()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.AllInstances.CompareToSetString">
            <summary>Sets the shim of WhenEqualFilter.set_CompareTo(String value)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.AllInstances.IgnoreCaseGet">
            <summary>Sets the shim of WhenEqualFilter.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.AllInstances.IgnoreCaseSetBoolean">
            <summary>Sets the shim of WhenEqualFilter.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenEqualFilter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenEqualFilter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.CheckLogEventInfo">
            <summary>Sets the shim of WhenEqualFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.CompareToGet">
            <summary>Sets the shim of WhenEqualFilter.get_CompareTo()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.CompareToSetString">
            <summary>Sets the shim of WhenEqualFilter.set_CompareTo(String value)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.Constructor">
            <summary>Sets the shim of WhenEqualFilter.WhenEqualFilter()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.IgnoreCaseGet">
            <summary>Sets the shim of WhenEqualFilter.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenEqualFilter.IgnoreCaseSetBoolean">
            <summary>Sets the shim of WhenEqualFilter.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimWhenNotContainsFilter">
            <summary>Shim type of NLog.Filters.WhenNotContainsFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenNotContainsFilter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenNotContainsFilter.#ctor(NLog.Filters.WhenNotContainsFilter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimWhenNotContainsFilter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.AllInstances.CheckLogEventInfo">
            <summary>Sets the shim of WhenNotContainsFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.AllInstances.IgnoreCaseGet">
            <summary>Sets the shim of WhenNotContainsFilter.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.AllInstances.IgnoreCaseSetBoolean">
            <summary>Sets the shim of WhenNotContainsFilter.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.AllInstances.SubstringGet">
            <summary>Sets the shim of WhenNotContainsFilter.get_Substring()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.AllInstances.SubstringSetString">
            <summary>Sets the shim of WhenNotContainsFilter.set_Substring(String value)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenNotContainsFilter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenNotContainsFilter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.CheckLogEventInfo">
            <summary>Sets the shim of WhenNotContainsFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.Constructor">
            <summary>Sets the shim of WhenNotContainsFilter.WhenNotContainsFilter()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.IgnoreCaseGet">
            <summary>Sets the shim of WhenNotContainsFilter.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.IgnoreCaseSetBoolean">
            <summary>Sets the shim of WhenNotContainsFilter.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.SubstringGet">
            <summary>Sets the shim of WhenNotContainsFilter.get_Substring()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotContainsFilter.SubstringSetString">
            <summary>Sets the shim of WhenNotContainsFilter.set_Substring(String value)</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimWhenNotEqualFilter">
            <summary>Shim type of NLog.Filters.WhenNotEqualFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenNotEqualFilter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenNotEqualFilter.#ctor(NLog.Filters.WhenNotEqualFilter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.ShimWhenNotEqualFilter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.AllInstances.CheckLogEventInfo">
            <summary>Sets the shim of WhenNotEqualFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.AllInstances.CompareToGet">
            <summary>Sets the shim of WhenNotEqualFilter.get_CompareTo()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.AllInstances.CompareToSetString">
            <summary>Sets the shim of WhenNotEqualFilter.set_CompareTo(String value)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.AllInstances.IgnoreCaseGet">
            <summary>Sets the shim of WhenNotEqualFilter.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.AllInstances.IgnoreCaseSetBoolean">
            <summary>Sets the shim of WhenNotEqualFilter.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenNotEqualFilter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.ShimWhenNotEqualFilter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.CheckLogEventInfo">
            <summary>Sets the shim of WhenNotEqualFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.CompareToGet">
            <summary>Sets the shim of WhenNotEqualFilter.get_CompareTo()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.CompareToSetString">
            <summary>Sets the shim of WhenNotEqualFilter.set_CompareTo(String value)</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.Constructor">
            <summary>Sets the shim of WhenNotEqualFilter.WhenNotEqualFilter()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.IgnoreCaseGet">
            <summary>Sets the shim of WhenNotEqualFilter.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.ShimWhenNotEqualFilter.IgnoreCaseSetBoolean">
            <summary>Sets the shim of WhenNotEqualFilter.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.StubConditionBasedFilter">
            <summary>Stub type of NLog.Filters.ConditionBasedFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubConditionBasedFilter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubConditionBasedFilter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubConditionBasedFilter.Check(NLog.LogEventInfo)">
            <summary>Sets the stub of ConditionBasedFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Filters.Fakes.StubConditionBasedFilter.CheckLogEventInfo">
            <summary>Sets the stub of ConditionBasedFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubConditionBasedFilter.InitializeStub">
            <summary>Initializes a new instance of type StubConditionBasedFilter</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubConditionBasedFilter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubConditionBasedFilter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.StubFilter">
            <summary>Stub type of NLog.Filters.Filter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubFilter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubFilter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubFilter.Check(NLog.LogEventInfo)">
            <summary>Sets the stub of Filter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Filters.Fakes.StubFilter.CheckLogEventInfo">
            <summary>Sets the stub of Filter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubFilter.InitializeStub">
            <summary>Initializes a new instance of type StubFilter</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubFilter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubFilter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.StubLayoutBasedFilter">
            <summary>Stub type of NLog.Filters.LayoutBasedFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubLayoutBasedFilter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubLayoutBasedFilter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubLayoutBasedFilter.Check(NLog.LogEventInfo)">
            <summary>Sets the stub of Filter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Filters.Fakes.StubLayoutBasedFilter.CheckLogEventInfo">
            <summary>Sets the stub of Filter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubLayoutBasedFilter.InitializeStub">
            <summary>Initializes a new instance of type StubLayoutBasedFilter</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubLayoutBasedFilter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubLayoutBasedFilter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.StubWhenContainsFilter">
            <summary>Stub type of NLog.Filters.WhenContainsFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenContainsFilter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenContainsFilter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenContainsFilter.Check(NLog.LogEventInfo)">
            <summary>Sets the stub of WhenContainsFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Filters.Fakes.StubWhenContainsFilter.CheckLogEventInfo">
            <summary>Sets the stub of WhenContainsFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenContainsFilter.InitializeStub">
            <summary>Initializes a new instance of type StubWhenContainsFilter</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenContainsFilter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenContainsFilter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.StubWhenEqualFilter">
            <summary>Stub type of NLog.Filters.WhenEqualFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenEqualFilter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenEqualFilter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenEqualFilter.Check(NLog.LogEventInfo)">
            <summary>Sets the stub of WhenEqualFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Filters.Fakes.StubWhenEqualFilter.CheckLogEventInfo">
            <summary>Sets the stub of WhenEqualFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenEqualFilter.InitializeStub">
            <summary>Initializes a new instance of type StubWhenEqualFilter</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenEqualFilter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenEqualFilter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.StubWhenNotContainsFilter">
            <summary>Stub type of NLog.Filters.WhenNotContainsFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenNotContainsFilter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenNotContainsFilter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenNotContainsFilter.Check(NLog.LogEventInfo)">
            <summary>Sets the stub of WhenNotContainsFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Filters.Fakes.StubWhenNotContainsFilter.CheckLogEventInfo">
            <summary>Sets the stub of WhenNotContainsFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenNotContainsFilter.InitializeStub">
            <summary>Initializes a new instance of type StubWhenNotContainsFilter</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenNotContainsFilter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenNotContainsFilter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Filters.Fakes.StubWhenNotEqualFilter">
            <summary>Stub type of NLog.Filters.WhenNotEqualFilter</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenNotEqualFilter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenNotEqualFilter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenNotEqualFilter.Check(NLog.LogEventInfo)">
            <summary>Sets the stub of WhenNotEqualFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Filters.Fakes.StubWhenNotEqualFilter.CheckLogEventInfo">
            <summary>Sets the stub of WhenNotEqualFilter.Check(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Filters.Fakes.StubWhenNotEqualFilter.InitializeStub">
            <summary>Initializes a new instance of type StubWhenNotEqualFilter</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenNotEqualFilter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Filters.Fakes.StubWhenNotEqualFilter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Fluent.Fakes.ShimLog">
            <summary>Shim type of NLog.Fluent.Log</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.ShimLog.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.ShimLog.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.ShimLog.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLog.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLog.CreateLogLevelString">
            <summary>Sets the shim of Log.Create(LogLevel logLevel, String callerFilePath)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLog.DebugString">
            <summary>Sets the shim of Log.Debug(String callerFilePath)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLog.ErrorString">
            <summary>Sets the shim of Log.Error(String callerFilePath)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLog.FatalString">
            <summary>Sets the shim of Log.Fatal(String callerFilePath)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLog.InfoString">
            <summary>Sets the shim of Log.Info(String callerFilePath)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLog.LevelLogLevelString">
            <summary>Sets the shim of Log.Level(LogLevel logLevel, String callerFilePath)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLog.StaticConstructor">
            <summary>Sets the shim of Log.Log()</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLog.TraceString">
            <summary>Sets the shim of Log.Trace(String callerFilePath)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLog.WarnString">
            <summary>Sets the shim of Log.Warn(String callerFilePath)</summary>
        </member>
        <member name="T:NLog.Fluent.Fakes.ShimLogBuilder">
            <summary>Shim type of NLog.Fluent.LogBuilder</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.ShimLogBuilder.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.ShimLogBuilder.#ctor(NLog.Fluent.LogBuilder)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.ExceptionException">
            <summary>Sets the shim of LogBuilder.Exception(Exception exception)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.LevelLogLevel">
            <summary>Sets the shim of LogBuilder.Level(LogLevel logLevel)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.LogEventInfoGet">
            <summary>Sets the shim of LogBuilder.get_LogEventInfo()</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.LoggerNameString">
            <summary>Sets the shim of LogBuilder.LoggerName(String loggerName)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.MessageIFormatProviderStringObjectArray">
            <summary>Sets the shim of LogBuilder.Message(IFormatProvider provider, String format, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.MessageString">
            <summary>Sets the shim of LogBuilder.Message(String message)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.MessageStringObject">
            <summary>Sets the shim of LogBuilder.Message(String format, Object arg0)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.MessageStringObjectArray">
            <summary>Sets the shim of LogBuilder.Message(String format, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.MessageStringObjectObject">
            <summary>Sets the shim of LogBuilder.Message(String format, Object arg0, Object arg1)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.MessageStringObjectObjectObject">
            <summary>Sets the shim of LogBuilder.Message(String format, Object arg0, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.MessageStringObjectObjectObjectObject">
            <summary>Sets the shim of LogBuilder.Message(String format, Object arg0, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.PropertiesIDictionary">
            <summary>Sets the shim of LogBuilder.Properties(IDictionary properties)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.PropertyObjectObject">
            <summary>Sets the shim of LogBuilder.Property(Object name, Object value)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.StackTraceStackTraceInt32">
            <summary>Sets the shim of LogBuilder.StackTrace(StackTrace stackTrace, Int32 userStackFrame)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.TimeStampDateTime">
            <summary>Sets the shim of LogBuilder.TimeStamp(DateTime timeStamp)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.WriteIfBooleanStringStringInt32">
            <summary>Sets the shim of LogBuilder.WriteIf(Boolean condition, String callerMemberName, String callerFilePath, Int32 callerLineNumber)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.WriteIfFuncOfBooleanStringStringInt32">
            <summary>Sets the shim of LogBuilder.WriteIf(Func`1&lt;Boolean&gt; condition, String callerMemberName, String callerFilePath, Int32 callerLineNumber)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.AllInstances.WriteStringStringInt32">
            <summary>Sets the shim of LogBuilder.Write(String callerMemberName, String callerFilePath, Int32 callerLineNumber)</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.ShimLogBuilder.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.ShimLogBuilder.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.ConstructorILogger">
            <summary>Sets the shim of LogBuilder.LogBuilder(ILogger logger)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.ConstructorILoggerLogLevel">
            <summary>Sets the shim of LogBuilder.LogBuilder(ILogger logger, LogLevel logLevel)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.ExceptionException">
            <summary>Sets the shim of LogBuilder.Exception(Exception exception)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.LevelLogLevel">
            <summary>Sets the shim of LogBuilder.Level(LogLevel logLevel)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.LogEventInfoGet">
            <summary>Sets the shim of LogBuilder.get_LogEventInfo()</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.LoggerNameString">
            <summary>Sets the shim of LogBuilder.LoggerName(String loggerName)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.MessageIFormatProviderStringObjectArray">
            <summary>Sets the shim of LogBuilder.Message(IFormatProvider provider, String format, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.MessageString">
            <summary>Sets the shim of LogBuilder.Message(String message)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.MessageStringObject">
            <summary>Sets the shim of LogBuilder.Message(String format, Object arg0)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.MessageStringObjectArray">
            <summary>Sets the shim of LogBuilder.Message(String format, Object[] args)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.MessageStringObjectObject">
            <summary>Sets the shim of LogBuilder.Message(String format, Object arg0, Object arg1)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.MessageStringObjectObjectObject">
            <summary>Sets the shim of LogBuilder.Message(String format, Object arg0, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.MessageStringObjectObjectObjectObject">
            <summary>Sets the shim of LogBuilder.Message(String format, Object arg0, Object arg1, Object arg2, Object arg3)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.PropertiesIDictionary">
            <summary>Sets the shim of LogBuilder.Properties(IDictionary properties)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.PropertyObjectObject">
            <summary>Sets the shim of LogBuilder.Property(Object name, Object value)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.StackTraceStackTraceInt32">
            <summary>Sets the shim of LogBuilder.StackTrace(StackTrace stackTrace, Int32 userStackFrame)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.TimeStampDateTime">
            <summary>Sets the shim of LogBuilder.TimeStamp(DateTime timeStamp)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.WriteIfBooleanStringStringInt32">
            <summary>Sets the shim of LogBuilder.WriteIf(Boolean condition, String callerMemberName, String callerFilePath, Int32 callerLineNumber)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.WriteIfFuncOfBooleanStringStringInt32">
            <summary>Sets the shim of LogBuilder.WriteIf(Func`1&lt;Boolean&gt; condition, String callerMemberName, String callerFilePath, Int32 callerLineNumber)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLogBuilder.WriteStringStringInt32">
            <summary>Sets the shim of LogBuilder.Write(String callerMemberName, String callerFilePath, Int32 callerLineNumber)</summary>
        </member>
        <member name="T:NLog.Fluent.Fakes.ShimLoggerExtensions">
            <summary>Shim type of NLog.Fluent.LoggerExtensions</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.ShimLoggerExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.ShimLoggerExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.ShimLoggerExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLoggerExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLoggerExtensions.DebugILogger">
            <summary>Sets the shim of LoggerExtensions.Debug(ILogger logger)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLoggerExtensions.ErrorILogger">
            <summary>Sets the shim of LoggerExtensions.Error(ILogger logger)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLoggerExtensions.FatalILogger">
            <summary>Sets the shim of LoggerExtensions.Fatal(ILogger logger)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLoggerExtensions.InfoILogger">
            <summary>Sets the shim of LoggerExtensions.Info(ILogger logger)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLoggerExtensions.LogILoggerLogLevel">
            <summary>Sets the shim of LoggerExtensions.Log(ILogger logger, LogLevel logLevel)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLoggerExtensions.TraceILogger">
            <summary>Sets the shim of LoggerExtensions.Trace(ILogger logger)</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.ShimLoggerExtensions.WarnILogger">
            <summary>Sets the shim of LoggerExtensions.Warn(ILogger logger)</summary>
        </member>
        <member name="T:NLog.Fluent.Fakes.StubLogBuilder">
            <summary>Stub type of NLog.Fluent.LogBuilder</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.StubLogBuilder.#ctor(NLog.ILogger)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.StubLogBuilder.#ctor(NLog.ILogger,NLog.LogLevel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.StubLogBuilder.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Fluent.Fakes.StubLogBuilder.InitializeStub">
            <summary>Initializes a new instance of type StubLogBuilder</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.StubLogBuilder.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Fluent.Fakes.StubLogBuilder.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper">
            <summary>Shim type of NLog.Internal.Fakeables.AppDomainWrapper</summary>
        </member>
        <member name="M:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.#ctor(NLog.Internal.Fakeables.AppDomainWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.BaseDirectoryGet">
            <summary>Sets the shim of AppDomainWrapper.get_BaseDirectory()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.BaseDirectorySetString">
            <summary>Sets the shim of AppDomainWrapper.set_BaseDirectory(String value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.ConfigurationFileGet">
            <summary>Sets the shim of AppDomainWrapper.get_ConfigurationFile()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.ConfigurationFileSetString">
            <summary>Sets the shim of AppDomainWrapper.set_ConfigurationFile(String value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.DomainUnloadAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.add_DomainUnload(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.DomainUnloadRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.remove_DomainUnload(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.FriendlyNameGet">
            <summary>Sets the shim of AppDomainWrapper.get_FriendlyName()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.FriendlyNameSetString">
            <summary>Sets the shim of AppDomainWrapper.set_FriendlyName(String value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.IdGet">
            <summary>Sets the shim of AppDomainWrapper.get_Id()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.IdSetInt32">
            <summary>Sets the shim of AppDomainWrapper.set_Id(Int32 value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.OnDomainUnloadObjectEventArgs">
            <summary>Sets the shim of AppDomainWrapper.OnDomainUnload(Object sender, EventArgs e)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.OnProcessExitObjectEventArgs">
            <summary>Sets the shim of AppDomainWrapper.OnProcessExit(Object sender, EventArgs eventArgs)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.PrivateBinPathGet">
            <summary>Sets the shim of AppDomainWrapper.get_PrivateBinPath()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.PrivateBinPathSetIEnumerableOfString">
            <summary>Sets the shim of AppDomainWrapper.set_PrivateBinPath(IEnumerable`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.ProcessExitAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.add_ProcessExit(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.ProcessExitRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.remove_ProcessExit(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.domainUnloadEventAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.add_domainUnloadEvent(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.domainUnloadEventRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.remove_domainUnloadEvent(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.processExitEventAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.add_processExitEvent(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.AllInstances.processExitEventRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.remove_processExitEvent(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.BaseDirectoryGet">
            <summary>Sets the shim of AppDomainWrapper.get_BaseDirectory()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.BaseDirectorySetString">
            <summary>Sets the shim of AppDomainWrapper.set_BaseDirectory(String value)</summary>
        </member>
        <member name="M:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.Bind(NLog.Internal.Fakeables.IAppDomain)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.ConfigurationFileGet">
            <summary>Sets the shim of AppDomainWrapper.get_ConfigurationFile()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.ConfigurationFileSetString">
            <summary>Sets the shim of AppDomainWrapper.set_ConfigurationFile(String value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.ConstructorAppDomain">
            <summary>Sets the shim of AppDomainWrapper.AppDomainWrapper(AppDomain appDomain)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.CurrentDomainGet">
            <summary>Sets the shim of AppDomainWrapper.get_CurrentDomain()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.DomainUnloadAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.add_DomainUnload(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.DomainUnloadRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.remove_DomainUnload(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.FriendlyNameGet">
            <summary>Sets the shim of AppDomainWrapper.get_FriendlyName()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.FriendlyNameSetString">
            <summary>Sets the shim of AppDomainWrapper.set_FriendlyName(String value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.IdGet">
            <summary>Sets the shim of AppDomainWrapper.get_Id()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.IdSetInt32">
            <summary>Sets the shim of AppDomainWrapper.set_Id(Int32 value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.OnDomainUnloadObjectEventArgs">
            <summary>Sets the shim of AppDomainWrapper.OnDomainUnload(Object sender, EventArgs e)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.OnProcessExitObjectEventArgs">
            <summary>Sets the shim of AppDomainWrapper.OnProcessExit(Object sender, EventArgs eventArgs)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.PrivateBinPathGet">
            <summary>Sets the shim of AppDomainWrapper.get_PrivateBinPath()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.PrivateBinPathSetIEnumerableOfString">
            <summary>Sets the shim of AppDomainWrapper.set_PrivateBinPath(IEnumerable`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.ProcessExitAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.add_ProcessExit(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.ProcessExitRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.remove_ProcessExit(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.domainUnloadEventAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.add_domainUnloadEvent(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.domainUnloadEventRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.remove_domainUnloadEvent(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.processExitEventAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.add_processExitEvent(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.ShimAppDomainWrapper.processExitEventRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AppDomainWrapper.remove_processExitEvent(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="T:NLog.Internal.Fakeables.Fakes.StubAppDomainWrapper">
            <summary>Stub type of NLog.Internal.Fakeables.AppDomainWrapper</summary>
        </member>
        <member name="M:NLog.Internal.Fakeables.Fakes.StubAppDomainWrapper.#ctor(System.AppDomain)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.StubAppDomainWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Internal.Fakeables.Fakes.StubAppDomainWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubAppDomainWrapper</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.StubAppDomainWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.StubAppDomainWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Internal.Fakeables.Fakes.StubIAppDomain">
            <summary>Stub type of NLog.Internal.Fakeables.IAppDomain</summary>
        </member>
        <member name="M:NLog.Internal.Fakeables.Fakes.StubIAppDomain.#ctor">
            <summary>Initializes a new instance of type StubIAppDomain</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.StubIAppDomain.NLog#Internal#Fakeables#IAppDomain#BaseDirectory">
            <summary>Sets the stub of IAppDomain.get_BaseDirectory()</summary>
        </member>
        <member name="F:NLog.Internal.Fakeables.Fakes.StubIAppDomain.BaseDirectoryGet">
            <summary>Sets the stub of IAppDomain.get_BaseDirectory()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.StubIAppDomain.NLog#Internal#Fakeables#IAppDomain#ConfigurationFile">
            <summary>Sets the stub of IAppDomain.get_ConfigurationFile()</summary>
        </member>
        <member name="F:NLog.Internal.Fakeables.Fakes.StubIAppDomain.ConfigurationFileGet">
            <summary>Sets the stub of IAppDomain.get_ConfigurationFile()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.StubIAppDomain.NLog#Internal#Fakeables#IAppDomain#FriendlyName">
            <summary>Sets the stub of IAppDomain.get_FriendlyName()</summary>
        </member>
        <member name="F:NLog.Internal.Fakeables.Fakes.StubIAppDomain.FriendlyNameGet">
            <summary>Sets the stub of IAppDomain.get_FriendlyName()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.StubIAppDomain.NLog#Internal#Fakeables#IAppDomain#Id">
            <summary>Sets the stub of IAppDomain.get_Id()</summary>
        </member>
        <member name="F:NLog.Internal.Fakeables.Fakes.StubIAppDomain.IdGet">
            <summary>Sets the stub of IAppDomain.get_Id()</summary>
        </member>
        <member name="P:NLog.Internal.Fakeables.Fakes.StubIAppDomain.NLog#Internal#Fakeables#IAppDomain#PrivateBinPath">
            <summary>Sets the stub of IAppDomain.get_PrivateBinPath()</summary>
        </member>
        <member name="F:NLog.Internal.Fakeables.Fakes.StubIAppDomain.PrivateBinPathGet">
            <summary>Sets the stub of IAppDomain.get_PrivateBinPath()</summary>
        </member>
        <member name="T:NLog.Internal.Fakes.ShimConfigurationManager">
            <summary>Shim type of NLog.Internal.ConfigurationManager</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimConfigurationManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimConfigurationManager.#ctor(NLog.Internal.ConfigurationManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Internal.Fakes.ShimConfigurationManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimConfigurationManager.AllInstances.AppSettingsGet">
            <summary>Sets the shim of ConfigurationManager.get_AppSettings()</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimConfigurationManager.AppSettingsGet">
            <summary>Sets the shim of ConfigurationManager.get_AppSettings()</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimConfigurationManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimConfigurationManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimConfigurationManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimConfigurationManager.Bind(NLog.Internal.IConfigurationManager)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimConfigurationManager.Constructor">
            <summary>Sets the shim of ConfigurationManager.ConfigurationManager()</summary>
        </member>
        <member name="T:NLog.Internal.Fakes.ShimStreamHelpers">
            <summary>Shim type of NLog.Internal.StreamHelpers</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimStreamHelpers.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimStreamHelpers.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimStreamHelpers.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimStreamHelpers.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimStreamHelpers.CopyStreamStream">
            <summary>Sets the shim of StreamHelpers.Copy(Stream input, Stream output)</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimStreamHelpers.CopyWithOffsetStreamStreamInt32">
            <summary>Sets the shim of StreamHelpers.CopyWithOffset(Stream input, Stream output, Int32 offset)</summary>
        </member>
        <member name="T:NLog.Internal.Fakes.ShimStringHelpers">
            <summary>Shim type of NLog.Internal.StringHelpers</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimStringHelpers.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimStringHelpers.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimStringHelpers.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimStringHelpers.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimStringHelpers.IsNullOrWhiteSpaceString">
            <summary>Sets the shim of StringHelpers.IsNullOrWhiteSpace(String value)</summary>
        </member>
        <member name="T:NLog.Internal.Fakes.ShimXmlHelper">
            <summary>Shim type of NLog.Internal.XmlHelper</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimXmlHelper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimXmlHelper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.ShimXmlHelper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.CreateValidXmlStringString">
            <summary>Sets the shim of XmlHelper.CreateValidXmlString(String text)</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.RemoveInvalidXmlCharsString">
            <summary>Sets the shim of XmlHelper.RemoveInvalidXmlChars(String text)</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.StaticConstructor">
            <summary>Sets the shim of XmlHelper.XmlHelper()</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.WriteAttributeSafeStringXmlWriterStringString">
            <summary>Sets the shim of XmlHelper.WriteAttributeSafeString(XmlWriter writer, String thread, String localName)</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.WriteAttributeSafeStringXmlWriterStringStringStringString">
            <summary>Sets the shim of XmlHelper.WriteAttributeSafeString(XmlWriter writer, String prefix, String localName, String ns, String value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.WriteElementSafeStringXmlWriterStringStringStringString">
            <summary>Sets the shim of XmlHelper.WriteElementSafeString(XmlWriter writer, String prefix, String localName, String ns, String value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.WriteSafeCDataXmlWriterString">
            <summary>Sets the shim of XmlHelper.WriteSafeCData(XmlWriter writer, String text)</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.XmlConvertToStringObject">
            <summary>Sets the shim of XmlHelper.XmlConvertToString(Object value)</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.XmlConvertToStringObjectTypeCode">
            <summary>Sets the shim of XmlHelper.XmlConvertToString(Object value, TypeCode objTypeCode)</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.ShimXmlHelper.XmlConvertToStringSafeObject">
            <summary>Sets the shim of XmlHelper.XmlConvertToStringSafe(Object value)</summary>
        </member>
        <member name="T:NLog.Internal.Fakes.StubConfigurationManager">
            <summary>Stub type of NLog.Internal.ConfigurationManager</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.StubConfigurationManager.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.StubConfigurationManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.StubConfigurationManager.InitializeStub">
            <summary>Initializes a new instance of type StubConfigurationManager</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.StubConfigurationManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.StubConfigurationManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Internal.Fakes.StubIConfigurationManager">
            <summary>Stub type of NLog.Internal.IConfigurationManager</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.StubIConfigurationManager.#ctor">
            <summary>Initializes a new instance of type StubIConfigurationManager</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.StubIConfigurationManager.NLog#Internal#IConfigurationManager#AppSettings">
            <summary>Sets the stub of IConfigurationManager.get_AppSettings()</summary>
        </member>
        <member name="F:NLog.Internal.Fakes.StubIConfigurationManager.AppSettingsGet">
            <summary>Sets the stub of IConfigurationManager.get_AppSettings()</summary>
        </member>
        <member name="T:NLog.Internal.Fakes.StubIUsesStackTrace">
            <summary>Stub type of NLog.Internal.IUsesStackTrace</summary>
        </member>
        <member name="M:NLog.Internal.Fakes.StubIUsesStackTrace.#ctor">
            <summary>Initializes a new instance of type StubIUsesStackTrace</summary>
        </member>
        <member name="P:NLog.Internal.Fakes.StubIUsesStackTrace.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>Sets the stub of IUsesStackTrace.get_StackTraceUsage()</summary>
        </member>
        <member name="F:NLog.Internal.Fakes.StubIUsesStackTrace.StackTraceUsageGet">
            <summary>Sets the stub of IUsesStackTrace.get_StackTraceUsage()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.#ctor(NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.AllInstances.FormatGet">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.AllInstances.FormatSetString">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.AllInstances.GetPropertiesLogEventInfo">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.GetProperties(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.AllInstances.IncludeCallerInformationGet">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.get_IncludeCallerInformation()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.AllInstances.IncludeCallerInformationSetBoolean">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.set_IncludeCallerInformation(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.AllInstances.SeparatorGet">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.AllInstances.SeparatorSetString">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.Constructor">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.AllEventPropertiesLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.FormatGet">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.FormatSetString">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.GetPropertiesLogEventInfo">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.GetProperties(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.IncludeCallerInformationGet">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.get_IncludeCallerInformation()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.IncludeCallerInformationSetBoolean">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.set_IncludeCallerInformation(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.SeparatorGet">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.SeparatorSetString">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer.StaticConstructor">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.AllEventPropertiesLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer._GetPropertiesb__3KeyValuePairOfObjectObject">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.&lt;GetProperties&gt;b__3(KeyValuePair`2&lt;Object,Object&gt; p)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer._GetPropertiesb__4KeyValuePairOfObjectObject">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.&lt;GetProperties&gt;b__4(KeyValuePair`2&lt;Object,Object&gt; p)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAllEventPropertiesLayoutRenderer._GetPropertiesb__5KeyValuePairOfObjectObject">
            <summary>Sets the shim of AllEventPropertiesLayoutRenderer.&lt;GetProperties&gt;b__5(KeyValuePair`2&lt;Object,Object&gt; p)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimAmbientPropertyAttribute">
            <summary>Shim type of NLog.LayoutRenderers.AmbientPropertyAttribute</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAmbientPropertyAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAmbientPropertyAttribute.#ctor(NLog.LayoutRenderers.AmbientPropertyAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimAmbientPropertyAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAmbientPropertyAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAmbientPropertyAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAmbientPropertyAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAmbientPropertyAttribute.ConstructorString">
            <summary>Sets the shim of AmbientPropertyAttribute.AmbientPropertyAttribute(String name)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.AppDomainLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.#ctor(NLog.LayoutRenderers.AppDomainLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of AppDomainLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.AllInstances.FormatGet">
            <summary>Sets the shim of AppDomainLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.AllInstances.FormatSetString">
            <summary>Sets the shim of AppDomainLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of AppDomainLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.Constructor">
            <summary>Sets the shim of AppDomainLayoutRenderer.AppDomainLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.ConstructorIAppDomain">
            <summary>Sets the shim of AppDomainLayoutRenderer.AppDomainLayoutRenderer(IAppDomain currentDomain)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.FormatGet">
            <summary>Sets the shim of AppDomainLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.FormatSetString">
            <summary>Sets the shim of AppDomainLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAppDomainLayoutRenderer.GetFormattingStringString">
            <summary>Sets the shim of AppDomainLayoutRenderer.GetFormattingString(String format)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.AssemblyVersionLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.#ctor(NLog.LayoutRenderers.AssemblyVersionLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of AssemblyVersionLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.AllInstances.NameGet">
            <summary>Sets the shim of AssemblyVersionLayoutRenderer.get_Name()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.AllInstances.NameSetString">
            <summary>Sets the shim of AssemblyVersionLayoutRenderer.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of AssemblyVersionLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.Constructor">
            <summary>Sets the shim of AssemblyVersionLayoutRenderer.AssemblyVersionLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.NameGet">
            <summary>Sets the shim of AssemblyVersionLayoutRenderer.get_Name()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimAssemblyVersionLayoutRenderer.NameSetString">
            <summary>Sets the shim of AssemblyVersionLayoutRenderer.set_Name(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.BaseDirLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.#ctor(NLog.LayoutRenderers.BaseDirLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of BaseDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.AllInstances.DirGet">
            <summary>Sets the shim of BaseDirLayoutRenderer.get_Dir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.AllInstances.DirSetString">
            <summary>Sets the shim of BaseDirLayoutRenderer.set_Dir(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.AllInstances.FileGet">
            <summary>Sets the shim of BaseDirLayoutRenderer.get_File()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.AllInstances.FileSetString">
            <summary>Sets the shim of BaseDirLayoutRenderer.set_File(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.AllInstances.ProcessDirGet">
            <summary>Sets the shim of BaseDirLayoutRenderer.get_ProcessDir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.AllInstances.ProcessDirSetBoolean">
            <summary>Sets the shim of BaseDirLayoutRenderer.set_ProcessDir(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of BaseDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.Constructor">
            <summary>Sets the shim of BaseDirLayoutRenderer.BaseDirLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.ConstructorIAppDomain">
            <summary>Sets the shim of BaseDirLayoutRenderer.BaseDirLayoutRenderer(IAppDomain appDomain)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.DirGet">
            <summary>Sets the shim of BaseDirLayoutRenderer.get_Dir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.DirSetString">
            <summary>Sets the shim of BaseDirLayoutRenderer.set_Dir(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.FileGet">
            <summary>Sets the shim of BaseDirLayoutRenderer.get_File()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.FileSetString">
            <summary>Sets the shim of BaseDirLayoutRenderer.set_File(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.ProcessDirGet">
            <summary>Sets the shim of BaseDirLayoutRenderer.get_ProcessDir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimBaseDirLayoutRenderer.ProcessDirSetBoolean">
            <summary>Sets the shim of BaseDirLayoutRenderer.set_ProcessDir(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.CallSiteLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.#ctor(NLog.LayoutRenderers.CallSiteLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of CallSiteLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.ClassNameGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_ClassName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.ClassNameSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_ClassName(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.CleanNamesOfAnonymousDelegatesGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_CleanNamesOfAnonymousDelegates()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.CleanNamesOfAnonymousDelegatesSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_CleanNamesOfAnonymousDelegates(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.FileNameGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_FileName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.FileNameSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_FileName(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.IncludeNamespaceGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_IncludeNamespace()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.IncludeNamespaceSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_IncludeNamespace(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.IncludeSourcePathGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_IncludeSourcePath()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.IncludeSourcePathSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_IncludeSourcePath(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.MethodNameGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_MethodName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.MethodNameSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_MethodName(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.SkipFramesGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_SkipFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.SkipFramesSetInt32">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_SkipFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AllInstances.StackTraceUsageNLogInternalIUsesStackTraceget">
            <summary>Sets the shim of CallSiteLayoutRenderer.NLog.Internal.IUsesStackTrace.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of CallSiteLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.Bind(NLog.Internal.IUsesStackTrace)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.ClassNameGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_ClassName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.ClassNameSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_ClassName(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.CleanNamesOfAnonymousDelegatesGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_CleanNamesOfAnonymousDelegates()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.CleanNamesOfAnonymousDelegatesSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_CleanNamesOfAnonymousDelegates(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.Constructor">
            <summary>Sets the shim of CallSiteLayoutRenderer.CallSiteLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.FileNameGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_FileName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.FileNameSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_FileName(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.IncludeNamespaceGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_IncludeNamespace()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.IncludeNamespaceSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_IncludeNamespace(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.IncludeSourcePathGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_IncludeSourcePath()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.IncludeSourcePathSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_IncludeSourcePath(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.MethodNameGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_MethodName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.MethodNameSetBoolean">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_MethodName(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.SkipFramesGet">
            <summary>Sets the shim of CallSiteLayoutRenderer.get_SkipFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.SkipFramesSetInt32">
            <summary>Sets the shim of CallSiteLayoutRenderer.set_SkipFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLayoutRenderer.StackTraceUsageNLogInternalIUsesStackTraceget">
            <summary>Sets the shim of CallSiteLayoutRenderer.NLog.Internal.IUsesStackTrace.get_StackTraceUsage()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.#ctor(NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of CallSiteLineNumberLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.AllInstances.SkipFramesGet">
            <summary>Sets the shim of CallSiteLineNumberLayoutRenderer.get_SkipFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.AllInstances.SkipFramesSetInt32">
            <summary>Sets the shim of CallSiteLineNumberLayoutRenderer.set_SkipFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.AllInstances.StackTraceUsageNLogInternalIUsesStackTraceget">
            <summary>Sets the shim of CallSiteLineNumberLayoutRenderer.NLog.Internal.IUsesStackTrace.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of CallSiteLineNumberLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.Bind(NLog.Internal.IUsesStackTrace)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.Constructor">
            <summary>Sets the shim of CallSiteLineNumberLayoutRenderer.CallSiteLineNumberLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.SkipFramesGet">
            <summary>Sets the shim of CallSiteLineNumberLayoutRenderer.get_SkipFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.SkipFramesSetInt32">
            <summary>Sets the shim of CallSiteLineNumberLayoutRenderer.set_SkipFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCallSiteLineNumberLayoutRenderer.StackTraceUsageNLogInternalIUsesStackTraceget">
            <summary>Sets the shim of CallSiteLineNumberLayoutRenderer.NLog.Internal.IUsesStackTrace.get_StackTraceUsage()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.CounterLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.#ctor(NLog.LayoutRenderers.CounterLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of CounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.AllInstances.IncrementGet">
            <summary>Sets the shim of CounterLayoutRenderer.get_Increment()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.AllInstances.IncrementSetInt32">
            <summary>Sets the shim of CounterLayoutRenderer.set_Increment(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.AllInstances.SequenceGet">
            <summary>Sets the shim of CounterLayoutRenderer.get_Sequence()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.AllInstances.SequenceSetLayout">
            <summary>Sets the shim of CounterLayoutRenderer.set_Sequence(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.AllInstances.ValueGet">
            <summary>Sets the shim of CounterLayoutRenderer.get_Value()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.AllInstances.ValueSetInt32">
            <summary>Sets the shim of CounterLayoutRenderer.set_Value(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of CounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.Constructor">
            <summary>Sets the shim of CounterLayoutRenderer.CounterLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.GetNextSequenceValueStringInt32Int32">
            <summary>Sets the shim of CounterLayoutRenderer.GetNextSequenceValue(String sequenceName, Int32 defaultValue, Int32 increment)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.IncrementGet">
            <summary>Sets the shim of CounterLayoutRenderer.get_Increment()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.IncrementSetInt32">
            <summary>Sets the shim of CounterLayoutRenderer.set_Increment(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.SequenceGet">
            <summary>Sets the shim of CounterLayoutRenderer.get_Sequence()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.SequenceSetLayout">
            <summary>Sets the shim of CounterLayoutRenderer.set_Sequence(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.StaticConstructor">
            <summary>Sets the shim of CounterLayoutRenderer.CounterLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.ValueGet">
            <summary>Sets the shim of CounterLayoutRenderer.get_Value()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimCounterLayoutRenderer.ValueSetInt32">
            <summary>Sets the shim of CounterLayoutRenderer.set_Value(Int32 value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.DateLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.#ctor(NLog.LayoutRenderers.DateLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AllInstances.AppendDateLayoutStringBuilderIFormatProviderDateTimeKeyValuePairOfDateTimeStringRef">
            <summary>Sets the shim of DateLayoutRenderer.AppendDateLayout(StringBuilder builder, IFormatProvider formatProvider, DateTime timestamp, KeyValuePair`2&lt;DateTime,String&gt;&amp; cachedTime)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of DateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AllInstances.CultureGet">
            <summary>Sets the shim of DateLayoutRenderer.get_Culture()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AllInstances.CultureSetCultureInfo">
            <summary>Sets the shim of DateLayoutRenderer.set_Culture(CultureInfo value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AllInstances.FormatGet">
            <summary>Sets the shim of DateLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AllInstances.FormatSetString">
            <summary>Sets the shim of DateLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AllInstances.UniversalTimeGet">
            <summary>Sets the shim of DateLayoutRenderer.get_UniversalTime()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AllInstances.UniversalTimeSetBoolean">
            <summary>Sets the shim of DateLayoutRenderer.set_UniversalTime(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AppendDateLayoutStringBuilderIFormatProviderDateTimeKeyValuePairOfDateTimeStringRef">
            <summary>Sets the shim of DateLayoutRenderer.AppendDateLayout(StringBuilder builder, IFormatProvider formatProvider, DateTime timestamp, KeyValuePair`2&lt;DateTime,String&gt;&amp; cachedTime)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of DateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.Constructor">
            <summary>Sets the shim of DateLayoutRenderer.DateLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.CultureGet">
            <summary>Sets the shim of DateLayoutRenderer.get_Culture()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.CultureSetCultureInfo">
            <summary>Sets the shim of DateLayoutRenderer.set_Culture(CultureInfo value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.FormatGet">
            <summary>Sets the shim of DateLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.FormatSetString">
            <summary>Sets the shim of DateLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.IsLowTimeResolutionLayoutString">
            <summary>Sets the shim of DateLayoutRenderer.IsLowTimeResolutionLayout(String dateTimeFormat)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.UniversalTimeGet">
            <summary>Sets the shim of DateLayoutRenderer.get_UniversalTime()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimDateLayoutRenderer.UniversalTimeSetBoolean">
            <summary>Sets the shim of DateLayoutRenderer.set_UniversalTime(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.EnvironmentLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.#ctor(NLog.LayoutRenderers.EnvironmentLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of EnvironmentLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.AllInstances.DefaultGet">
            <summary>Sets the shim of EnvironmentLayoutRenderer.get_Default()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.AllInstances.DefaultSetString">
            <summary>Sets the shim of EnvironmentLayoutRenderer.set_Default(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.AllInstances.VariableGet">
            <summary>Sets the shim of EnvironmentLayoutRenderer.get_Variable()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.AllInstances.VariableSetString">
            <summary>Sets the shim of EnvironmentLayoutRenderer.set_Variable(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of EnvironmentLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.Constructor">
            <summary>Sets the shim of EnvironmentLayoutRenderer.EnvironmentLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.DefaultGet">
            <summary>Sets the shim of EnvironmentLayoutRenderer.get_Default()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.DefaultSetString">
            <summary>Sets the shim of EnvironmentLayoutRenderer.set_Default(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.VariableGet">
            <summary>Sets the shim of EnvironmentLayoutRenderer.get_Variable()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEnvironmentLayoutRenderer.VariableSetString">
            <summary>Sets the shim of EnvironmentLayoutRenderer.set_Variable(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.EventPropertiesLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.#ctor(NLog.LayoutRenderers.EventPropertiesLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.AllInstances.CultureGet">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.get_Culture()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.AllInstances.CultureSetCultureInfo">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.set_Culture(CultureInfo value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.AllInstances.FormatGet">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.AllInstances.FormatSetString">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.AllInstances.ItemGet">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.get_Item()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.AllInstances.ItemSetString">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.set_Item(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.Constructor">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.EventPropertiesLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.CultureGet">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.get_Culture()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.CultureSetCultureInfo">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.set_Culture(CultureInfo value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.FormatGet">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.FormatSetString">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.ItemGet">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.get_Item()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimEventPropertiesLayoutRenderer.ItemSetString">
            <summary>Sets the shim of EventPropertiesLayoutRenderer.set_Item(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.ExceptionLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.#ctor(NLog.LayoutRenderers.ExceptionLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.AppendDataStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendData(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.AppendInnerExceptionStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendInnerException(StringBuilder sb2, Exception currentException)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.AppendMessageStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendMessage(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.AppendMethodStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendMethod(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.AppendShortTypeStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendShortType(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.AppendStackTraceStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendStackTrace(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ExceptionLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.AppendToStringStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendToString(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.AppendTypeStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendType(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.ExceptionDataSeparatorGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_ExceptionDataSeparator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.ExceptionDataSeparatorSetString">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_ExceptionDataSeparator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.FormatGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.FormatSetString">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.FormatsGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_Formats()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.FormatsSetListOfExceptionRenderingFormat">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_Formats(List`1&lt;ExceptionRenderingFormat&gt; value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.InnerExceptionSeparatorGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_InnerExceptionSeparator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.InnerExceptionSeparatorSetString">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_InnerExceptionSeparator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.InnerFormatGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_InnerFormat()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.InnerFormatSetString">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_InnerFormat(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.InnerFormatsGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_InnerFormats()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.InnerFormatsSetListOfExceptionRenderingFormat">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_InnerFormats(List`1&lt;ExceptionRenderingFormat&gt; value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.MaxInnerExceptionLevelGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_MaxInnerExceptionLevel()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.MaxInnerExceptionLevelSetInt32">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_MaxInnerExceptionLevel(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.SeparatorGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AllInstances.SeparatorSetString">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AppendDataStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendData(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AppendInnerExceptionStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendInnerException(StringBuilder sb2, Exception currentException)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AppendMessageStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendMessage(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AppendMethodStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendMethod(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AppendShortTypeStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendShortType(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AppendStackTraceStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendStackTrace(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ExceptionLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AppendToStringStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendToString(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.AppendTypeStringBuilderException">
            <summary>Sets the shim of ExceptionLayoutRenderer.AppendType(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.CompileFormatString">
            <summary>Sets the shim of ExceptionLayoutRenderer.CompileFormat(String formatSpecifier)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.Constructor">
            <summary>Sets the shim of ExceptionLayoutRenderer.ExceptionLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.ExceptionDataSeparatorGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_ExceptionDataSeparator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.ExceptionDataSeparatorSetString">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_ExceptionDataSeparator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.FormatGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.FormatSetString">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.FormatsGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_Formats()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.FormatsSetListOfExceptionRenderingFormat">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_Formats(List`1&lt;ExceptionRenderingFormat&gt; value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.InnerExceptionSeparatorGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_InnerExceptionSeparator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.InnerExceptionSeparatorSetString">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_InnerExceptionSeparator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.InnerFormatGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_InnerFormat()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.InnerFormatSetString">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_InnerFormat(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.InnerFormatsGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_InnerFormats()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.InnerFormatsSetListOfExceptionRenderingFormat">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_InnerFormats(List`1&lt;ExceptionRenderingFormat&gt; value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.MaxInnerExceptionLevelGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_MaxInnerExceptionLevel()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.MaxInnerExceptionLevelSetInt32">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_MaxInnerExceptionLevel(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.SeparatorGet">
            <summary>Sets the shim of ExceptionLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.SeparatorSetString">
            <summary>Sets the shim of ExceptionLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimExceptionLayoutRenderer.StaticConstructor">
            <summary>Sets the shim of ExceptionLayoutRenderer.ExceptionLayoutRenderer()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.FileContentsLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.#ctor(NLog.LayoutRenderers.FileContentsLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of FileContentsLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.AllInstances.FileNameGet">
            <summary>Sets the shim of FileContentsLayoutRenderer.get_FileName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.AllInstances.FileNameSetLayout">
            <summary>Sets the shim of FileContentsLayoutRenderer.set_FileName(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.AllInstances.ReadFileContentsString">
            <summary>Sets the shim of FileContentsLayoutRenderer.ReadFileContents(String fileName)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of FileContentsLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.Constructor">
            <summary>Sets the shim of FileContentsLayoutRenderer.FileContentsLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.FileNameGet">
            <summary>Sets the shim of FileContentsLayoutRenderer.get_FileName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.FileNameSetLayout">
            <summary>Sets the shim of FileContentsLayoutRenderer.set_FileName(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFileContentsLayoutRenderer.ReadFileContentsString">
            <summary>Sets the shim of FileContentsLayoutRenderer.ReadFileContents(String fileName)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.FuncLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.#ctor(NLog.LayoutRenderers.FuncLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of FuncLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.AllInstances.LayoutRendererNameGet">
            <summary>Sets the shim of FuncLayoutRenderer.get_LayoutRendererName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.AllInstances.LayoutRendererNameSetString">
            <summary>Sets the shim of FuncLayoutRenderer.set_LayoutRendererName(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.AllInstances.RenderMethodGet">
            <summary>Sets the shim of FuncLayoutRenderer.get_RenderMethod()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.AllInstances.RenderMethodSetFuncOfLogEventInfoLoggingConfigurationObject">
            <summary>Sets the shim of FuncLayoutRenderer.set_RenderMethod(Func`3&lt;LogEventInfo,LoggingConfiguration,Object&gt; value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of FuncLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.ConstructorStringFuncOfLogEventInfoLoggingConfigurationObject">
            <summary>Sets the shim of FuncLayoutRenderer.FuncLayoutRenderer(String layoutRendererName, Func`3&lt;LogEventInfo,LoggingConfiguration,Object&gt; renderMethod)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.LayoutRendererNameGet">
            <summary>Sets the shim of FuncLayoutRenderer.get_LayoutRendererName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.LayoutRendererNameSetString">
            <summary>Sets the shim of FuncLayoutRenderer.set_LayoutRendererName(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.RenderMethodGet">
            <summary>Sets the shim of FuncLayoutRenderer.get_RenderMethod()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimFuncLayoutRenderer.RenderMethodSetFuncOfLogEventInfoLoggingConfigurationObject">
            <summary>Sets the shim of FuncLayoutRenderer.set_RenderMethod(Func`3&lt;LogEventInfo,LoggingConfiguration,Object&gt; value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.#ctor(NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of GarbageCollectorInfoLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.AllInstances.PropertyGet">
            <summary>Sets the shim of GarbageCollectorInfoLayoutRenderer.get_Property()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.AllInstances.PropertySetGarbageCollectorProperty">
            <summary>Sets the shim of GarbageCollectorInfoLayoutRenderer.set_Property(GarbageCollectorProperty value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of GarbageCollectorInfoLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.Constructor">
            <summary>Sets the shim of GarbageCollectorInfoLayoutRenderer.GarbageCollectorInfoLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.PropertyGet">
            <summary>Sets the shim of GarbageCollectorInfoLayoutRenderer.get_Property()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGarbageCollectorInfoLayoutRenderer.PropertySetGarbageCollectorProperty">
            <summary>Sets the shim of GarbageCollectorInfoLayoutRenderer.set_Property(GarbageCollectorProperty value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.GdcLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.#ctor(NLog.LayoutRenderers.GdcLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of GdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.AllInstances.ItemGet">
            <summary>Sets the shim of GdcLayoutRenderer.get_Item()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.AllInstances.ItemSetString">
            <summary>Sets the shim of GdcLayoutRenderer.set_Item(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of GdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.Constructor">
            <summary>Sets the shim of GdcLayoutRenderer.GdcLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.ItemGet">
            <summary>Sets the shim of GdcLayoutRenderer.get_Item()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGdcLayoutRenderer.ItemSetString">
            <summary>Sets the shim of GdcLayoutRenderer.set_Item(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.GuidLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.#ctor(NLog.LayoutRenderers.GuidLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of GuidLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.AllInstances.FormatGet">
            <summary>Sets the shim of GuidLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.AllInstances.FormatSetString">
            <summary>Sets the shim of GuidLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of GuidLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.Constructor">
            <summary>Sets the shim of GuidLayoutRenderer.GuidLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.FormatGet">
            <summary>Sets the shim of GuidLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimGuidLayoutRenderer.FormatSetString">
            <summary>Sets the shim of GuidLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.IdentityLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.#ctor(NLog.LayoutRenderers.IdentityLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of IdentityLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AllInstances.AuthTypeGet">
            <summary>Sets the shim of IdentityLayoutRenderer.get_AuthType()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AllInstances.AuthTypeSetBoolean">
            <summary>Sets the shim of IdentityLayoutRenderer.set_AuthType(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AllInstances.IsAuthenticatedGet">
            <summary>Sets the shim of IdentityLayoutRenderer.get_IsAuthenticated()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AllInstances.IsAuthenticatedSetBoolean">
            <summary>Sets the shim of IdentityLayoutRenderer.set_IsAuthenticated(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AllInstances.NameGet">
            <summary>Sets the shim of IdentityLayoutRenderer.get_Name()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AllInstances.NameSetBoolean">
            <summary>Sets the shim of IdentityLayoutRenderer.set_Name(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AllInstances.SeparatorGet">
            <summary>Sets the shim of IdentityLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AllInstances.SeparatorSetString">
            <summary>Sets the shim of IdentityLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of IdentityLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AuthTypeGet">
            <summary>Sets the shim of IdentityLayoutRenderer.get_AuthType()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.AuthTypeSetBoolean">
            <summary>Sets the shim of IdentityLayoutRenderer.set_AuthType(Boolean value)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.Constructor">
            <summary>Sets the shim of IdentityLayoutRenderer.IdentityLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.IsAuthenticatedGet">
            <summary>Sets the shim of IdentityLayoutRenderer.get_IsAuthenticated()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.IsAuthenticatedSetBoolean">
            <summary>Sets the shim of IdentityLayoutRenderer.set_IsAuthenticated(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.NameGet">
            <summary>Sets the shim of IdentityLayoutRenderer.get_Name()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.NameSetBoolean">
            <summary>Sets the shim of IdentityLayoutRenderer.set_Name(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.SeparatorGet">
            <summary>Sets the shim of IdentityLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimIdentityLayoutRenderer.SeparatorSetString">
            <summary>Sets the shim of IdentityLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.InstallContextLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.#ctor(NLog.LayoutRenderers.InstallContextLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of InstallContextLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.AllInstances.ParameterGet">
            <summary>Sets the shim of InstallContextLayoutRenderer.get_Parameter()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.AllInstances.ParameterSetString">
            <summary>Sets the shim of InstallContextLayoutRenderer.set_Parameter(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of InstallContextLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.Constructor">
            <summary>Sets the shim of InstallContextLayoutRenderer.InstallContextLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.ParameterGet">
            <summary>Sets the shim of InstallContextLayoutRenderer.get_Parameter()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimInstallContextLayoutRenderer.ParameterSetString">
            <summary>Sets the shim of InstallContextLayoutRenderer.set_Parameter(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.LayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.#ctor(NLog.LayoutRenderers.LayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.Close">
            <summary>Sets the shim of LayoutRenderer.Close()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.CloseLayoutRenderer">
            <summary>Sets the shim of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.Dispose">
            <summary>Sets the shim of LayoutRenderer.Dispose()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.DisposeBoolean">
            <summary>Sets the shim of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.GetCultureLogEventInfoCultureInfo">
            <summary>Sets the shim of LayoutRenderer.GetCulture(LogEventInfo logEvent, CultureInfo layoutCulture)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.GetFormatProviderLogEventInfoIFormatProvider">
            <summary>Sets the shim of LayoutRenderer.GetFormatProvider(LogEventInfo logEvent, IFormatProvider layoutCulture)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.InitializeLayoutRenderer">
            <summary>Sets the shim of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.InitializeLoggingConfiguration">
            <summary>Sets the shim of LayoutRenderer.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.LoggingConfigurationGet">
            <summary>Sets the shim of LayoutRenderer.get_LoggingConfiguration()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.LoggingConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of LayoutRenderer.set_LoggingConfiguration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.NLogInternalISupportsInitializeClose">
            <summary>Sets the shim of LayoutRenderer.NLog.Internal.ISupportsInitialize.Close()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.NLogInternalISupportsInitializeInitializeLoggingConfiguration">
            <summary>Sets the shim of LayoutRenderer.NLog.Internal.ISupportsInitialize.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.RenderAppendBuilderLogEventInfoStringBuilder">
            <summary>Sets the shim of LayoutRenderer.RenderAppendBuilder(LogEventInfo logEvent, StringBuilder builder)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.RenderLogEventInfo">
            <summary>Sets the shim of LayoutRenderer.Render(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.AllInstances.ToString01">
            <summary>Sets the shim of LayoutRenderer.ToString()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.Close">
            <summary>Sets the shim of LayoutRenderer.Close()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the shim of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.Constructor">
            <summary>Sets the shim of LayoutRenderer.LayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.Dispose">
            <summary>Sets the shim of LayoutRenderer.Dispose()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.DisposeBoolean">
            <summary>Sets the shim of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.GetCultureLogEventInfoCultureInfo">
            <summary>Sets the shim of LayoutRenderer.GetCulture(LogEventInfo logEvent, CultureInfo layoutCulture)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.GetFormatProviderLogEventInfoIFormatProvider">
            <summary>Sets the shim of LayoutRenderer.GetFormatProvider(LogEventInfo logEvent, IFormatProvider layoutCulture)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the shim of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.InitializeLoggingConfiguration">
            <summary>Sets the shim of LayoutRenderer.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.LoggingConfigurationGet">
            <summary>Sets the shim of LayoutRenderer.get_LoggingConfiguration()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.LoggingConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of LayoutRenderer.set_LoggingConfiguration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.NLogInternalISupportsInitializeClose">
            <summary>Sets the shim of LayoutRenderer.NLog.Internal.ISupportsInitialize.Close()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.NLogInternalISupportsInitializeInitializeLoggingConfiguration">
            <summary>Sets the shim of LayoutRenderer.NLog.Internal.ISupportsInitialize.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.RegisterOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String})">
            <summary>Sets the shim of LayoutRenderer.Register(String name)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.RegisterStringFuncOfLogEventInfoLoggingConfigurationObject">
            <summary>Sets the shim of LayoutRenderer.Register(String name, Func`3&lt;LogEventInfo,LoggingConfiguration,Object&gt; func)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.RegisterStringFuncOfLogEventInfoObject">
            <summary>Sets the shim of LayoutRenderer.Register(String name, Func`2&lt;LogEventInfo,Object&gt; func)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.RegisterStringType">
            <summary>Sets the shim of LayoutRenderer.Register(String name, Type layoutRendererType)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.RenderAppendBuilderLogEventInfoStringBuilder">
            <summary>Sets the shim of LayoutRenderer.RenderAppendBuilder(LogEventInfo logEvent, StringBuilder builder)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.RenderLogEventInfo">
            <summary>Sets the shim of LayoutRenderer.Render(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRenderer.ToString">
            <summary>Sets the shim of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLayoutRendererAttribute">
            <summary>Shim type of NLog.LayoutRenderers.LayoutRendererAttribute</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLayoutRendererAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLayoutRendererAttribute.#ctor(NLog.LayoutRenderers.LayoutRendererAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLayoutRendererAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLayoutRendererAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLayoutRendererAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRendererAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLayoutRendererAttribute.ConstructorString">
            <summary>Sets the shim of LayoutRendererAttribute.LayoutRendererAttribute(String name)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.LevelLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.#ctor(NLog.LayoutRenderers.LevelLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of LevelLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.AllInstances.FormatGet">
            <summary>Sets the shim of LevelLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.AllInstances.FormatSetLevelFormat">
            <summary>Sets the shim of LevelLayoutRenderer.set_Format(LevelFormat value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of LevelLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.Constructor">
            <summary>Sets the shim of LevelLayoutRenderer.LevelLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.FormatGet">
            <summary>Sets the shim of LevelLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLevelLayoutRenderer.FormatSetLevelFormat">
            <summary>Sets the shim of LevelLayoutRenderer.set_Format(LevelFormat value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.LiteralLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.#ctor(NLog.LayoutRenderers.LiteralLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of LiteralLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.AllInstances.TextGet">
            <summary>Sets the shim of LiteralLayoutRenderer.get_Text()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.AllInstances.TextSetString">
            <summary>Sets the shim of LiteralLayoutRenderer.set_Text(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of LiteralLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.Constructor">
            <summary>Sets the shim of LiteralLayoutRenderer.LiteralLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.ConstructorString">
            <summary>Sets the shim of LiteralLayoutRenderer.LiteralLayoutRenderer(String text)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.TextGet">
            <summary>Sets the shim of LiteralLayoutRenderer.get_Text()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLiteralLayoutRenderer.TextSetString">
            <summary>Sets the shim of LiteralLayoutRenderer.set_Text(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.#ctor(NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.AppInfoGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_AppInfo()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.AppInfoSetString">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_AppInfo(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.AppendPropertiesStringXmlWriterLogEventInfo">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.AppendProperties(String prefix, XmlWriter xtw, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.AppendToStringBuilderStringBuilderLogEventInfo">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.AppendToStringBuilder(StringBuilder sb, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeAllPropertiesGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeAllProperties()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeAllPropertiesSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeAllProperties(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeCallSiteGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeCallSite()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeCallSiteSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeCallSite(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeMdcGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeMdc()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeMdcSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeMdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeMdlcGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeMdlc()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeMdlcSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeMdlc(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeNLogDataGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeNLogData()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeNLogDataSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeNLogData(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeNdcGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeNdc()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeNdcSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeNdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeSourceInfoGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeSourceInfo()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IncludeSourceInfoSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeSourceInfo(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IndentXmlGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IndentXml()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.IndentXmlSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IndentXml(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.NdcItemSeparatorGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_NdcItemSeparator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.NdcItemSeparatorSetString">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_NdcItemSeparator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.ParametersGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_Parameters()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.ParametersSetIListOfNLogViewerParameterInfo">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_Parameters(IList`1&lt;NLogViewerParameterInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AllInstances.StackTraceUsageNLogInternalIUsesStackTraceget">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.NLog.Internal.IUsesStackTrace.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AppInfoGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_AppInfo()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AppInfoSetString">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_AppInfo(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AppendPropertiesStringXmlWriterLogEventInfo">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.AppendProperties(String prefix, XmlWriter xtw, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.AppendToStringBuilderStringBuilderLogEventInfo">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.AppendToStringBuilder(StringBuilder sb, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.Bind(NLog.Internal.IUsesStackTrace)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.Constructor">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.Log4JXmlEventLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.ConstructorIAppDomain">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.Log4JXmlEventLayoutRenderer(IAppDomain appDomain)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeAllPropertiesGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeAllProperties()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeAllPropertiesSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeAllProperties(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeCallSiteGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeCallSite()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeCallSiteSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeCallSite(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeMdcGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeMdc()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeMdcSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeMdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeMdlcGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeMdlc()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeMdlcSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeMdlc(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeNLogDataGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeNLogData()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeNLogDataSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeNLogData(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeNdcGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeNdc()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeNdcSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeNdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeSourceInfoGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IncludeSourceInfo()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IncludeSourceInfoSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IncludeSourceInfo(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IndentXmlGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_IndentXml()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.IndentXmlSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_IndentXml(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.NdcItemSeparatorGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_NdcItemSeparator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.NdcItemSeparatorSetString">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_NdcItemSeparator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.ParametersGet">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.get_Parameters()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.ParametersSetIListOfNLogViewerParameterInfo">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.set_Parameters(IList`1&lt;NLogViewerParameterInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.StackTraceUsageNLogInternalIUsesStackTraceget">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.NLog.Internal.IUsesStackTrace.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLog4JXmlEventLayoutRenderer.StaticConstructor">
            <summary>Sets the shim of Log4JXmlEventLayoutRenderer.Log4JXmlEventLayoutRenderer()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.LoggerNameLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.#ctor(NLog.LayoutRenderers.LoggerNameLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of LoggerNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.AllInstances.ShortNameGet">
            <summary>Sets the shim of LoggerNameLayoutRenderer.get_ShortName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.AllInstances.ShortNameSetBoolean">
            <summary>Sets the shim of LoggerNameLayoutRenderer.set_ShortName(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of LoggerNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.Constructor">
            <summary>Sets the shim of LoggerNameLayoutRenderer.LoggerNameLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.ShortNameGet">
            <summary>Sets the shim of LoggerNameLayoutRenderer.get_ShortName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLoggerNameLayoutRenderer.ShortNameSetBoolean">
            <summary>Sets the shim of LoggerNameLayoutRenderer.set_ShortName(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.LongDateLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.#ctor(NLog.LayoutRenderers.LongDateLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of LongDateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.AllInstances.UniversalTimeGet">
            <summary>Sets the shim of LongDateLayoutRenderer.get_UniversalTime()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.AllInstances.UniversalTimeSetBoolean">
            <summary>Sets the shim of LongDateLayoutRenderer.set_UniversalTime(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.Append2DigitsZeroPaddedStringBuilderInt32">
            <summary>Sets the shim of LongDateLayoutRenderer.Append2DigitsZeroPadded(StringBuilder builder, Int32 number)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.Append4DigitsZeroPaddedStringBuilderInt32">
            <summary>Sets the shim of LongDateLayoutRenderer.Append4DigitsZeroPadded(StringBuilder builder, Int32 number)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of LongDateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.Constructor">
            <summary>Sets the shim of LongDateLayoutRenderer.LongDateLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.UniversalTimeGet">
            <summary>Sets the shim of LongDateLayoutRenderer.get_UniversalTime()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimLongDateLayoutRenderer.UniversalTimeSetBoolean">
            <summary>Sets the shim of LongDateLayoutRenderer.set_UniversalTime(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.MachineNameLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.#ctor(NLog.LayoutRenderers.MachineNameLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of MachineNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.AllInstances.InitializeLayoutRenderer">
            <summary>Sets the shim of MachineNameLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.AllInstances.MachineNameGet">
            <summary>Sets the shim of MachineNameLayoutRenderer.get_MachineName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.AllInstances.MachineNameSetString">
            <summary>Sets the shim of MachineNameLayoutRenderer.set_MachineName(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of MachineNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.Constructor">
            <summary>Sets the shim of MachineNameLayoutRenderer.MachineNameLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the shim of MachineNameLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.MachineNameGet">
            <summary>Sets the shim of MachineNameLayoutRenderer.get_MachineName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMachineNameLayoutRenderer.MachineNameSetString">
            <summary>Sets the shim of MachineNameLayoutRenderer.set_MachineName(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.MdcLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.#ctor(NLog.LayoutRenderers.MdcLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of MdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.AllInstances.ItemGet">
            <summary>Sets the shim of MdcLayoutRenderer.get_Item()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.AllInstances.ItemSetString">
            <summary>Sets the shim of MdcLayoutRenderer.set_Item(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of MdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.Constructor">
            <summary>Sets the shim of MdcLayoutRenderer.MdcLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.ItemGet">
            <summary>Sets the shim of MdcLayoutRenderer.get_Item()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdcLayoutRenderer.ItemSetString">
            <summary>Sets the shim of MdcLayoutRenderer.set_Item(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.MdlcLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.#ctor(NLog.LayoutRenderers.MdlcLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of MdlcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.AllInstances.ItemGet">
            <summary>Sets the shim of MdlcLayoutRenderer.get_Item()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.AllInstances.ItemSetString">
            <summary>Sets the shim of MdlcLayoutRenderer.set_Item(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of MdlcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.Constructor">
            <summary>Sets the shim of MdlcLayoutRenderer.MdlcLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.ItemGet">
            <summary>Sets the shim of MdlcLayoutRenderer.get_Item()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMdlcLayoutRenderer.ItemSetString">
            <summary>Sets the shim of MdlcLayoutRenderer.set_Item(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.MessageLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.#ctor(NLog.LayoutRenderers.MessageLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of MessageLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.AllInstances.ExceptionSeparatorGet">
            <summary>Sets the shim of MessageLayoutRenderer.get_ExceptionSeparator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.AllInstances.ExceptionSeparatorSetString">
            <summary>Sets the shim of MessageLayoutRenderer.set_ExceptionSeparator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.AllInstances.WithExceptionGet">
            <summary>Sets the shim of MessageLayoutRenderer.get_WithException()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.AllInstances.WithExceptionSetBoolean">
            <summary>Sets the shim of MessageLayoutRenderer.set_WithException(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of MessageLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.Constructor">
            <summary>Sets the shim of MessageLayoutRenderer.MessageLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.ExceptionSeparatorGet">
            <summary>Sets the shim of MessageLayoutRenderer.get_ExceptionSeparator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.ExceptionSeparatorSetString">
            <summary>Sets the shim of MessageLayoutRenderer.set_ExceptionSeparator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.WithExceptionGet">
            <summary>Sets the shim of MessageLayoutRenderer.get_WithException()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimMessageLayoutRenderer.WithExceptionSetBoolean">
            <summary>Sets the shim of MessageLayoutRenderer.set_WithException(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.NLogDirLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.#ctor(NLog.LayoutRenderers.NLogDirLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of NLogDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.AllInstances.DirGet">
            <summary>Sets the shim of NLogDirLayoutRenderer.get_Dir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.AllInstances.DirSetString">
            <summary>Sets the shim of NLogDirLayoutRenderer.set_Dir(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.AllInstances.FileGet">
            <summary>Sets the shim of NLogDirLayoutRenderer.get_File()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.AllInstances.FileSetString">
            <summary>Sets the shim of NLogDirLayoutRenderer.set_File(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of NLogDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.Constructor">
            <summary>Sets the shim of NLogDirLayoutRenderer.NLogDirLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.DirGet">
            <summary>Sets the shim of NLogDirLayoutRenderer.get_Dir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.DirSetString">
            <summary>Sets the shim of NLogDirLayoutRenderer.set_Dir(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.FileGet">
            <summary>Sets the shim of NLogDirLayoutRenderer.get_File()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.FileSetString">
            <summary>Sets the shim of NLogDirLayoutRenderer.set_File(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.NLogDirGet">
            <summary>Sets the shim of NLogDirLayoutRenderer.get_NLogDir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.NLogDirSetString">
            <summary>Sets the shim of NLogDirLayoutRenderer.set_NLogDir(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNLogDirLayoutRenderer.StaticConstructor">
            <summary>Sets the shim of NLogDirLayoutRenderer.NLogDirLayoutRenderer()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.NdcLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.#ctor(NLog.LayoutRenderers.NdcLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of NdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.AllInstances.BottomFramesGet">
            <summary>Sets the shim of NdcLayoutRenderer.get_BottomFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.AllInstances.BottomFramesSetInt32">
            <summary>Sets the shim of NdcLayoutRenderer.set_BottomFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.AllInstances.SeparatorGet">
            <summary>Sets the shim of NdcLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.AllInstances.SeparatorSetString">
            <summary>Sets the shim of NdcLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.AllInstances.TopFramesGet">
            <summary>Sets the shim of NdcLayoutRenderer.get_TopFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.AllInstances.TopFramesSetInt32">
            <summary>Sets the shim of NdcLayoutRenderer.set_TopFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of NdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.BottomFramesGet">
            <summary>Sets the shim of NdcLayoutRenderer.get_BottomFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.BottomFramesSetInt32">
            <summary>Sets the shim of NdcLayoutRenderer.set_BottomFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.Constructor">
            <summary>Sets the shim of NdcLayoutRenderer.NdcLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.SeparatorGet">
            <summary>Sets the shim of NdcLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.SeparatorSetString">
            <summary>Sets the shim of NdcLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.TopFramesGet">
            <summary>Sets the shim of NdcLayoutRenderer.get_TopFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdcLayoutRenderer.TopFramesSetInt32">
            <summary>Sets the shim of NdcLayoutRenderer.set_TopFrames(Int32 value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.NdlcLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.#ctor(NLog.LayoutRenderers.NdlcLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of NdlcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.AllInstances.BottomFramesGet">
            <summary>Sets the shim of NdlcLayoutRenderer.get_BottomFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.AllInstances.BottomFramesSetInt32">
            <summary>Sets the shim of NdlcLayoutRenderer.set_BottomFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.AllInstances.SeparatorGet">
            <summary>Sets the shim of NdlcLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.AllInstances.SeparatorSetString">
            <summary>Sets the shim of NdlcLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.AllInstances.TopFramesGet">
            <summary>Sets the shim of NdlcLayoutRenderer.get_TopFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.AllInstances.TopFramesSetInt32">
            <summary>Sets the shim of NdlcLayoutRenderer.set_TopFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of NdlcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.BottomFramesGet">
            <summary>Sets the shim of NdlcLayoutRenderer.get_BottomFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.BottomFramesSetInt32">
            <summary>Sets the shim of NdlcLayoutRenderer.set_BottomFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.Constructor">
            <summary>Sets the shim of NdlcLayoutRenderer.NdlcLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.SeparatorGet">
            <summary>Sets the shim of NdlcLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.SeparatorSetString">
            <summary>Sets the shim of NdlcLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.TopFramesGet">
            <summary>Sets the shim of NdlcLayoutRenderer.get_TopFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNdlcLayoutRenderer.TopFramesSetInt32">
            <summary>Sets the shim of NdlcLayoutRenderer.set_TopFrames(Int32 value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.NewLineLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer.#ctor(NLog.LayoutRenderers.NewLineLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of NewLineLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of NewLineLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimNewLineLayoutRenderer.Constructor">
            <summary>Sets the shim of NewLineLayoutRenderer.NewLineLayoutRenderer()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.PerformanceCounterLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.#ctor(NLog.LayoutRenderers.PerformanceCounterLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.CategoryGet">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.get_Category()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.CategorySetString">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.set_Category(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.CloseLayoutRenderer">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.CounterGet">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.get_Counter()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.CounterSetString">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.set_Counter(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.InitializeLayoutRenderer">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.InstanceGet">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.get_Instance()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.InstanceSetString">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.set_Instance(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.MachineNameGet">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.get_MachineName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AllInstances.MachineNameSetString">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.set_MachineName(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.CategoryGet">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.get_Category()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.CategorySetString">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.set_Category(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.Constructor">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.PerformanceCounterLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.CounterGet">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.get_Counter()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.CounterSetString">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.set_Counter(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.InstanceGet">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.get_Instance()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.InstanceSetString">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.set_Instance(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.MachineNameGet">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.get_MachineName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimPerformanceCounterLayoutRenderer.MachineNameSetString">
            <summary>Sets the shim of PerformanceCounterLayoutRenderer.set_MachineName(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.ProcessIdLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer.#ctor(NLog.LayoutRenderers.ProcessIdLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ProcessIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ProcessIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessIdLayoutRenderer.Constructor">
            <summary>Sets the shim of ProcessIdLayoutRenderer.ProcessIdLayoutRenderer()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.ProcessInfoLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.#ctor(NLog.LayoutRenderers.ProcessInfoLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.AllInstances.CloseLayoutRenderer">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.AllInstances.FormatGet">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.AllInstances.FormatSetString">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.AllInstances.InitializeLayoutRenderer">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.AllInstances.PropertyGet">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.get_Property()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.AllInstances.PropertySetProcessInfoProperty">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.set_Property(ProcessInfoProperty value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.Constructor">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.ProcessInfoLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.FormatGet">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.FormatSetString">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.set_Format(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.PropertyGet">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.get_Property()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessInfoLayoutRenderer.PropertySetProcessInfoProperty">
            <summary>Sets the shim of ProcessInfoLayoutRenderer.set_Property(ProcessInfoProperty value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.ProcessNameLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.#ctor(NLog.LayoutRenderers.ProcessNameLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ProcessNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.AllInstances.FullNameGet">
            <summary>Sets the shim of ProcessNameLayoutRenderer.get_FullName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.AllInstances.FullNameSetBoolean">
            <summary>Sets the shim of ProcessNameLayoutRenderer.set_FullName(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ProcessNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.Constructor">
            <summary>Sets the shim of ProcessNameLayoutRenderer.ProcessNameLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.FullNameGet">
            <summary>Sets the shim of ProcessNameLayoutRenderer.get_FullName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessNameLayoutRenderer.FullNameSetBoolean">
            <summary>Sets the shim of ProcessNameLayoutRenderer.set_FullName(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.ProcessTimeLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.#ctor(NLog.LayoutRenderers.ProcessTimeLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ProcessTimeLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ProcessTimeLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.Constructor">
            <summary>Sets the shim of ProcessTimeLayoutRenderer.ProcessTimeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimProcessTimeLayoutRenderer.WritetTimestampStringBuilderTimeSpanCultureInfo">
            <summary>Sets the shim of ProcessTimeLayoutRenderer.WritetTimestamp(StringBuilder builder, TimeSpan ts, CultureInfo culture)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.#ctor(NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AlignDecimalPointGet">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.get_AlignDecimalPoint()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AlignDecimalPointSetBoolean">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.set_AlignDecimalPoint(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.AlignDecimalPointGet">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.get_AlignDecimalPoint()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.AlignDecimalPointSetBoolean">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.set_AlignDecimalPoint(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.DifferenceGet">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.get_Difference()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.DifferenceSetBoolean">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.set_Difference(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.InitializeLayoutRenderer">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.NormalizeGet">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.get_Normalize()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.NormalizeSetBoolean">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.set_Normalize(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.PrecisionGet">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.get_Precision()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.PrecisionSetInt32">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.set_Precision(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.SecondsGet">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.get_Seconds()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AllInstances.SecondsSetBoolean">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.set_Seconds(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.Constructor">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.QueryPerformanceCounterLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.DifferenceGet">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.get_Difference()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.DifferenceSetBoolean">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.set_Difference(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.NormalizeGet">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.get_Normalize()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.NormalizeSetBoolean">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.set_Normalize(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.PrecisionGet">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.get_Precision()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.PrecisionSetInt32">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.set_Precision(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.SecondsGet">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.get_Seconds()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimQueryPerformanceCounterLayoutRenderer.SecondsSetBoolean">
            <summary>Sets the shim of QueryPerformanceCounterLayoutRenderer.set_Seconds(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.RegistryLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.#ctor(NLog.LayoutRenderers.RegistryLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of RegistryLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.DefaultValueGet">
            <summary>Sets the shim of RegistryLayoutRenderer.get_DefaultValue()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.DefaultValueSetLayout">
            <summary>Sets the shim of RegistryLayoutRenderer.set_DefaultValue(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.KeyGet">
            <summary>Sets the shim of RegistryLayoutRenderer.get_Key()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.KeySetLayout">
            <summary>Sets the shim of RegistryLayoutRenderer.set_Key(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.RequireEscapingSlashesInDefaultValueGet">
            <summary>Sets the shim of RegistryLayoutRenderer.get_RequireEscapingSlashesInDefaultValue()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.RequireEscapingSlashesInDefaultValueSetBoolean">
            <summary>Sets the shim of RegistryLayoutRenderer.set_RequireEscapingSlashesInDefaultValue(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.ValueGet">
            <summary>Sets the shim of RegistryLayoutRenderer.get_Value()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.ValueSetLayout">
            <summary>Sets the shim of RegistryLayoutRenderer.set_Value(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.ViewGet">
            <summary>Sets the shim of RegistryLayoutRenderer.get_View()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AllInstances.ViewSetRegistryView">
            <summary>Sets the shim of RegistryLayoutRenderer.set_View(RegistryView value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of RegistryLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.Constructor">
            <summary>Sets the shim of RegistryLayoutRenderer.RegistryLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.DefaultValueGet">
            <summary>Sets the shim of RegistryLayoutRenderer.get_DefaultValue()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.DefaultValueSetLayout">
            <summary>Sets the shim of RegistryLayoutRenderer.set_DefaultValue(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.KeyGet">
            <summary>Sets the shim of RegistryLayoutRenderer.get_Key()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.KeySetLayout">
            <summary>Sets the shim of RegistryLayoutRenderer.set_Key(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.ParseHiveNameString">
            <summary>Sets the shim of RegistryLayoutRenderer.ParseHiveName(String hiveName)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.RequireEscapingSlashesInDefaultValueGet">
            <summary>Sets the shim of RegistryLayoutRenderer.get_RequireEscapingSlashesInDefaultValue()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.RequireEscapingSlashesInDefaultValueSetBoolean">
            <summary>Sets the shim of RegistryLayoutRenderer.set_RequireEscapingSlashesInDefaultValue(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.StaticConstructor">
            <summary>Sets the shim of RegistryLayoutRenderer.RegistryLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.ValueGet">
            <summary>Sets the shim of RegistryLayoutRenderer.get_Value()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.ValueSetLayout">
            <summary>Sets the shim of RegistryLayoutRenderer.set_Value(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.ViewGet">
            <summary>Sets the shim of RegistryLayoutRenderer.get_View()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimRegistryLayoutRenderer.ViewSetRegistryView">
            <summary>Sets the shim of RegistryLayoutRenderer.set_View(RegistryView value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.ShortDateLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.#ctor(NLog.LayoutRenderers.ShortDateLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ShortDateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.AllInstances.UniversalTimeGet">
            <summary>Sets the shim of ShortDateLayoutRenderer.get_UniversalTime()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.AllInstances.UniversalTimeSetBoolean">
            <summary>Sets the shim of ShortDateLayoutRenderer.set_UniversalTime(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ShortDateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.Constructor">
            <summary>Sets the shim of ShortDateLayoutRenderer.ShortDateLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.StaticConstructor">
            <summary>Sets the shim of ShortDateLayoutRenderer.ShortDateLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.UniversalTimeGet">
            <summary>Sets the shim of ShortDateLayoutRenderer.get_UniversalTime()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimShortDateLayoutRenderer.UniversalTimeSetBoolean">
            <summary>Sets the shim of ShortDateLayoutRenderer.set_UniversalTime(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.SpecialFolderLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.#ctor(NLog.LayoutRenderers.SpecialFolderLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.AllInstances.DirGet">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.get_Dir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.AllInstances.DirSetString">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.set_Dir(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.AllInstances.FileGet">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.get_File()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.AllInstances.FileSetString">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.set_File(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.AllInstances.FolderGet">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.get_Folder()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.AllInstances.FolderSetEnvironmentSpecialFolder">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.set_Folder(SpecialFolder value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.Constructor">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.SpecialFolderLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.DirGet">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.get_Dir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.DirSetString">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.set_Dir(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.FileGet">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.get_File()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.FileSetString">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.set_File(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.FolderGet">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.get_Folder()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimSpecialFolderLayoutRenderer.FolderSetEnvironmentSpecialFolder">
            <summary>Sets the shim of SpecialFolderLayoutRenderer.set_Folder(SpecialFolder value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.StackTraceLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.#ctor(NLog.LayoutRenderers.StackTraceLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of StackTraceLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances.FormatGet">
            <summary>Sets the shim of StackTraceLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances.FormatSetStackTraceFormat">
            <summary>Sets the shim of StackTraceLayoutRenderer.set_Format(StackTraceFormat value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances.SeparatorGet">
            <summary>Sets the shim of StackTraceLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances.SeparatorSetString">
            <summary>Sets the shim of StackTraceLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances.SkipFramesGet">
            <summary>Sets the shim of StackTraceLayoutRenderer.get_SkipFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances.SkipFramesSetInt32">
            <summary>Sets the shim of StackTraceLayoutRenderer.set_SkipFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances.StackTraceUsageNLogInternalIUsesStackTraceget">
            <summary>Sets the shim of StackTraceLayoutRenderer.NLog.Internal.IUsesStackTrace.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances.TopFramesGet">
            <summary>Sets the shim of StackTraceLayoutRenderer.get_TopFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AllInstances.TopFramesSetInt32">
            <summary>Sets the shim of StackTraceLayoutRenderer.set_TopFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of StackTraceLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.Bind(NLog.Internal.IUsesStackTrace)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.Constructor">
            <summary>Sets the shim of StackTraceLayoutRenderer.StackTraceLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.FormatGet">
            <summary>Sets the shim of StackTraceLayoutRenderer.get_Format()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.FormatSetStackTraceFormat">
            <summary>Sets the shim of StackTraceLayoutRenderer.set_Format(StackTraceFormat value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.SeparatorGet">
            <summary>Sets the shim of StackTraceLayoutRenderer.get_Separator()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.SeparatorSetString">
            <summary>Sets the shim of StackTraceLayoutRenderer.set_Separator(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.SkipFramesGet">
            <summary>Sets the shim of StackTraceLayoutRenderer.get_SkipFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.SkipFramesSetInt32">
            <summary>Sets the shim of StackTraceLayoutRenderer.set_SkipFrames(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.StackTraceUsageNLogInternalIUsesStackTraceget">
            <summary>Sets the shim of StackTraceLayoutRenderer.NLog.Internal.IUsesStackTrace.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.TopFramesGet">
            <summary>Sets the shim of StackTraceLayoutRenderer.get_TopFrames()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimStackTraceLayoutRenderer.TopFramesSetInt32">
            <summary>Sets the shim of StackTraceLayoutRenderer.set_TopFrames(Int32 value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.TempDirLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.#ctor(NLog.LayoutRenderers.TempDirLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of TempDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.AllInstances.DirGet">
            <summary>Sets the shim of TempDirLayoutRenderer.get_Dir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.AllInstances.DirSetString">
            <summary>Sets the shim of TempDirLayoutRenderer.set_Dir(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.AllInstances.FileGet">
            <summary>Sets the shim of TempDirLayoutRenderer.get_File()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.AllInstances.FileSetString">
            <summary>Sets the shim of TempDirLayoutRenderer.set_File(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of TempDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.Constructor">
            <summary>Sets the shim of TempDirLayoutRenderer.TempDirLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.DirGet">
            <summary>Sets the shim of TempDirLayoutRenderer.get_Dir()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.DirSetString">
            <summary>Sets the shim of TempDirLayoutRenderer.set_Dir(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.FileGet">
            <summary>Sets the shim of TempDirLayoutRenderer.get_File()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.FileSetString">
            <summary>Sets the shim of TempDirLayoutRenderer.set_File(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTempDirLayoutRenderer.StaticConstructor">
            <summary>Sets the shim of TempDirLayoutRenderer.TempDirLayoutRenderer()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.ThreadIdLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer.#ctor(NLog.LayoutRenderers.ThreadIdLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ThreadIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ThreadIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimThreadIdLayoutRenderer.Constructor">
            <summary>Sets the shim of ThreadIdLayoutRenderer.ThreadIdLayoutRenderer()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.ThreadNameLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer.#ctor(NLog.LayoutRenderers.ThreadNameLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ThreadNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of ThreadNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimThreadNameLayoutRenderer.Constructor">
            <summary>Sets the shim of ThreadNameLayoutRenderer.ThreadNameLayoutRenderer()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.TicksLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer.#ctor(NLog.LayoutRenderers.TicksLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of TicksLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of TicksLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTicksLayoutRenderer.Constructor">
            <summary>Sets the shim of TicksLayoutRenderer.TicksLayoutRenderer()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.TimeLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.#ctor(NLog.LayoutRenderers.TimeLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of TimeLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.AllInstances.UniversalTimeGet">
            <summary>Sets the shim of TimeLayoutRenderer.get_UniversalTime()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.AllInstances.UniversalTimeSetBoolean">
            <summary>Sets the shim of TimeLayoutRenderer.set_UniversalTime(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.Append2DigitsZeroPaddedStringBuilderInt32">
            <summary>Sets the shim of TimeLayoutRenderer.Append2DigitsZeroPadded(StringBuilder builder, Int32 number)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.Append4DigitsZeroPaddedStringBuilderInt32">
            <summary>Sets the shim of TimeLayoutRenderer.Append4DigitsZeroPadded(StringBuilder builder, Int32 number)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of TimeLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.Constructor">
            <summary>Sets the shim of TimeLayoutRenderer.TimeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.UniversalTimeGet">
            <summary>Sets the shim of TimeLayoutRenderer.get_UniversalTime()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTimeLayoutRenderer.UniversalTimeSetBoolean">
            <summary>Sets the shim of TimeLayoutRenderer.set_UniversalTime(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.TraceActivityIdLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer.#ctor(NLog.LayoutRenderers.TraceActivityIdLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of TraceActivityIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of TraceActivityIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimTraceActivityIdLayoutRenderer.Constructor">
            <summary>Sets the shim of TraceActivityIdLayoutRenderer.TraceActivityIdLayoutRenderer()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.VariableLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.#ctor(NLog.LayoutRenderers.VariableLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of VariableLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.AllInstances.DefaultGet">
            <summary>Sets the shim of VariableLayoutRenderer.get_Default()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.AllInstances.DefaultSetString">
            <summary>Sets the shim of VariableLayoutRenderer.set_Default(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.AllInstances.InitializeLayoutRenderer">
            <summary>Sets the shim of VariableLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.AllInstances.NameGet">
            <summary>Sets the shim of VariableLayoutRenderer.get_Name()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.AllInstances.NameSetString">
            <summary>Sets the shim of VariableLayoutRenderer.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.AllInstances.TryGetLayoutSimpleLayoutOut">
            <summary>Sets the shim of VariableLayoutRenderer.TryGetLayout(SimpleLayout&amp; layout)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of VariableLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.Constructor">
            <summary>Sets the shim of VariableLayoutRenderer.VariableLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.DefaultGet">
            <summary>Sets the shim of VariableLayoutRenderer.get_Default()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.DefaultSetString">
            <summary>Sets the shim of VariableLayoutRenderer.set_Default(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the shim of VariableLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.NameGet">
            <summary>Sets the shim of VariableLayoutRenderer.get_Name()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.NameSetString">
            <summary>Sets the shim of VariableLayoutRenderer.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimVariableLayoutRenderer.TryGetLayoutSimpleLayoutOut">
            <summary>Sets the shim of VariableLayoutRenderer.TryGetLayout(SimpleLayout&amp; layout)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer">
            <summary>Shim type of NLog.LayoutRenderers.WindowsIdentityLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.#ctor(NLog.LayoutRenderers.WindowsIdentityLayoutRenderer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.AllInstances.DomainGet">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.get_Domain()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.AllInstances.DomainSetBoolean">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.set_Domain(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.AllInstances.UserNameGet">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.get_UserName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.AllInstances.UserNameSetBoolean">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.set_UserName(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.Constructor">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.WindowsIdentityLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.DomainGet">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.get_Domain()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.DomainSetBoolean">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.set_Domain(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.UserNameGet">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.get_UserName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.ShimWindowsIdentityLayoutRenderer.UserNameSetBoolean">
            <summary>Sets the shim of WindowsIdentityLayoutRenderer.set_UserName(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.AllEventPropertiesLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of AllEventPropertiesLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of AllEventPropertiesLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubAllEventPropertiesLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAllEventPropertiesLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.AppDomainLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of AppDomainLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of AppDomainLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubAppDomainLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAppDomainLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.AssemblyVersionLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of AssemblyVersionLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of AssemblyVersionLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubAssemblyVersionLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubAssemblyVersionLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.BaseDirLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of BaseDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of BaseDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubBaseDirLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubBaseDirLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.CallSiteLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of CallSiteLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of CallSiteLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubCallSiteLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCallSiteLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.CallSiteLineNumberLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of CallSiteLineNumberLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of CallSiteLineNumberLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubCallSiteLineNumberLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCallSiteLineNumberLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.CounterLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of CounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of CounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubCounterLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubCounterLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.DateLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of DateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of DateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubDateLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubDateLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.EnvironmentLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of EnvironmentLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of EnvironmentLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubEnvironmentLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubEnvironmentLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.EventPropertiesLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of EventPropertiesLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of EventPropertiesLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubEventPropertiesLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubEventPropertiesLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.ExceptionLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of ExceptionLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendData(System.Text.StringBuilder,System.Exception)">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendData(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendDataStringBuilderException">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendData(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendMessage(System.Text.StringBuilder,System.Exception)">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendMessage(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendMessageStringBuilderException">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendMessage(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendMethod(System.Text.StringBuilder,System.Exception)">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendMethod(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendMethodStringBuilderException">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendMethod(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendShortType(System.Text.StringBuilder,System.Exception)">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendShortType(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendShortTypeStringBuilderException">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendShortType(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendStackTrace(System.Text.StringBuilder,System.Exception)">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendStackTrace(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendStackTraceStringBuilderException">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendStackTrace(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of ExceptionLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendToString(System.Text.StringBuilder,System.Exception)">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendToString(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendToStringStringBuilderException">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendToString(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendType(System.Text.StringBuilder,System.Exception)">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendType(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.AppendTypeStringBuilderException">
            <summary>Sets the stub of ExceptionLayoutRenderer.AppendType(StringBuilder sb, Exception ex)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubExceptionLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubExceptionLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.FileContentsLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of FileContentsLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of FileContentsLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubFileContentsLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubFileContentsLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.FuncLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.#ctor(System.String,System.Func{NLog.LogEventInfo,NLog.Config.LoggingConfiguration,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of FuncLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of FuncLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubFuncLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubFuncLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of GarbageCollectorInfoLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of GarbageCollectorInfoLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubGarbageCollectorInfoLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGarbageCollectorInfoLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.GdcLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of GdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of GdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubGdcLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGdcLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.GuidLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of GuidLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of GuidLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubGuidLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubGuidLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.IdentityLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of IdentityLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of IdentityLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubIdentityLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubIdentityLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.InstallContextLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of InstallContextLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of InstallContextLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubInstallContextLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubInstallContextLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.LayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of LayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of LayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.LevelLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of LevelLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of LevelLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubLevelLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLevelLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.LiteralLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of LiteralLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of LiteralLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubLiteralLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLiteralLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of Log4JXmlEventLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of Log4JXmlEventLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubLog4JXmlEventLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLog4JXmlEventLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.LoggerNameLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of LoggerNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of LoggerNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubLoggerNameLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLoggerNameLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.LongDateLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of LongDateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of LongDateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubLongDateLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubLongDateLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.MachineNameLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of MachineNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of MachineNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of MachineNameLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of MachineNameLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubMachineNameLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMachineNameLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.MdcLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of MdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of MdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubMdcLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMdcLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.MdlcLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of MdlcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of MdlcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubMdlcLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMdlcLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.MessageLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of MessageLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of MessageLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubMessageLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubMessageLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.NLogDirLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of NLogDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of NLogDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubNLogDirLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNLogDirLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.NdcLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of NdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of NdcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubNdcLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNdcLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.NdlcLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of NdlcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of NdlcLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubNdlcLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNdlcLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.NewLineLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of NewLineLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of NewLineLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubNewLineLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubNewLineLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.PerformanceCounterLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of PerformanceCounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of PerformanceCounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of PerformanceCounterLayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of PerformanceCounterLayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of PerformanceCounterLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of PerformanceCounterLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubPerformanceCounterLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubPerformanceCounterLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.ProcessIdLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of ProcessIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of ProcessIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubProcessIdLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessIdLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.ProcessInfoLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of ProcessInfoLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of ProcessInfoLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of ProcessInfoLayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of ProcessInfoLayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of ProcessInfoLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of ProcessInfoLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubProcessInfoLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessInfoLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.ProcessNameLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of ProcessNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of ProcessNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubProcessNameLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessNameLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.ProcessTimeLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of ProcessTimeLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of ProcessTimeLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubProcessTimeLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubProcessTimeLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of QueryPerformanceCounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of QueryPerformanceCounterLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of QueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of QueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubQueryPerformanceCounterLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubQueryPerformanceCounterLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.RegistryLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of RegistryLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of RegistryLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubRegistryLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubRegistryLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.ShortDateLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of ShortDateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of ShortDateLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubShortDateLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubShortDateLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.SpecialFolderLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of SpecialFolderLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of SpecialFolderLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubSpecialFolderLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubSpecialFolderLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.StackTraceLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of StackTraceLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of StackTraceLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubStackTraceLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubStackTraceLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.TempDirLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of TempDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of TempDirLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubTempDirLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTempDirLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.ThreadIdLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of ThreadIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of ThreadIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubThreadIdLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubThreadIdLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.ThreadNameLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of ThreadNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of ThreadNameLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubThreadNameLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubThreadNameLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.TicksLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of TicksLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of TicksLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubTicksLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTicksLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.TimeLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of TimeLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of TimeLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubTimeLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTimeLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.TraceActivityIdLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of TraceActivityIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of TraceActivityIdLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubTraceActivityIdLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubTraceActivityIdLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.VariableLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of VariableLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of VariableLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of VariableLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of VariableLayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubVariableLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubVariableLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer">
            <summary>Stub type of NLog.LayoutRenderers.WindowsIdentityLayoutRenderer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of WindowsIdentityLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of WindowsIdentityLayoutRenderer.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.InitializeStub">
            <summary>Initializes a new instance of type StubWindowsIdentityLayoutRenderer</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Fakes.StubWindowsIdentityLayoutRenderer.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances.CacheKeyGet">
            <summary>Sets the shim of CachedLayoutRendererWrapper.get_CacheKey()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances.CacheKeySetLayout">
            <summary>Sets the shim of CachedLayoutRendererWrapper.set_CacheKey(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances.CachedGet">
            <summary>Sets the shim of CachedLayoutRendererWrapper.get_Cached()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances.CachedSetBoolean">
            <summary>Sets the shim of CachedLayoutRendererWrapper.set_Cached(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances.ClearCacheGet">
            <summary>Sets the shim of CachedLayoutRendererWrapper.get_ClearCache()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances.ClearCacheSetCachedLayoutRendererWrapperClearCacheOption">
            <summary>Sets the shim of CachedLayoutRendererWrapper.set_ClearCache(ClearCacheOption value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances.CloseLayoutRenderer">
            <summary>Sets the shim of CachedLayoutRendererWrapper.CloseLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances.InitializeLayoutRenderer">
            <summary>Sets the shim of CachedLayoutRendererWrapper.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances.RenderInnerLogEventInfo">
            <summary>Sets the shim of CachedLayoutRendererWrapper.RenderInner(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.AllInstances.TransformString">
            <summary>Sets the shim of CachedLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.CacheKeyGet">
            <summary>Sets the shim of CachedLayoutRendererWrapper.get_CacheKey()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.CacheKeySetLayout">
            <summary>Sets the shim of CachedLayoutRendererWrapper.set_CacheKey(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.CachedGet">
            <summary>Sets the shim of CachedLayoutRendererWrapper.get_Cached()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.CachedSetBoolean">
            <summary>Sets the shim of CachedLayoutRendererWrapper.set_Cached(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.ClearCacheGet">
            <summary>Sets the shim of CachedLayoutRendererWrapper.get_ClearCache()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.ClearCacheSetCachedLayoutRendererWrapperClearCacheOption">
            <summary>Sets the shim of CachedLayoutRendererWrapper.set_ClearCache(ClearCacheOption value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.CloseLayoutRenderer">
            <summary>Sets the shim of CachedLayoutRendererWrapper.CloseLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of CachedLayoutRendererWrapper.CachedLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.InitializeLayoutRenderer">
            <summary>Sets the shim of CachedLayoutRendererWrapper.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.RenderInnerLogEventInfo">
            <summary>Sets the shim of CachedLayoutRendererWrapper.RenderInner(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimCachedLayoutRendererWrapper.TransformString">
            <summary>Sets the shim of CachedLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.AllInstances.FSNormalizeGet">
            <summary>Sets the shim of FileSystemNormalizeLayoutRendererWrapper.get_FSNormalize()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.AllInstances.FSNormalizeSetBoolean">
            <summary>Sets the shim of FileSystemNormalizeLayoutRendererWrapper.set_FSNormalize(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.AllInstances.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of FileSystemNormalizeLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder builder)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of FileSystemNormalizeLayoutRendererWrapper.FileSystemNormalizeLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.FSNormalizeGet">
            <summary>Sets the shim of FileSystemNormalizeLayoutRendererWrapper.get_FSNormalize()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.FSNormalizeSetBoolean">
            <summary>Sets the shim of FileSystemNormalizeLayoutRendererWrapper.set_FSNormalize(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.IsSafeCharacterChar">
            <summary>Sets the shim of FileSystemNormalizeLayoutRendererWrapper.IsSafeCharacter(Char c)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimFileSystemNormalizeLayoutRendererWrapper.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of FileSystemNormalizeLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder builder)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.AllInstances.EscapeUnicodeGet">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.get_EscapeUnicode()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.AllInstances.EscapeUnicodeSetBoolean">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.set_EscapeUnicode(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.AllInstances.JsonEncodeGet">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.get_JsonEncode()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.AllInstances.JsonEncodeSetBoolean">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.set_JsonEncode(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.AllInstances.TransformString">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.JsonEncodeLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.EscapeUnicodeGet">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.get_EscapeUnicode()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.EscapeUnicodeSetBoolean">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.set_EscapeUnicode(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.JsonEncodeGet">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.get_JsonEncode()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.JsonEncodeSetBoolean">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.set_JsonEncode(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimJsonEncodeLayoutRendererWrapper.TransformString">
            <summary>Sets the shim of JsonEncodeLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.AllInstances.CultureGet">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.get_Culture()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.AllInstances.CultureSetCultureInfo">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.set_Culture(CultureInfo value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.AllInstances.LowercaseGet">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.get_Lowercase()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.AllInstances.LowercaseSetBoolean">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.set_Lowercase(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.AllInstances.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.LowercaseLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.CultureGet">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.get_Culture()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.CultureSetCultureInfo">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.set_Culture(CultureInfo value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.LowercaseGet">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.get_Lowercase()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.LowercaseSetBoolean">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.set_Lowercase(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimLowercaseLayoutRendererWrapper.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of LowercaseLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.AllInstances.RenderInnerLogEventInfo">
            <summary>Sets the shim of OnExceptionLayoutRendererWrapper.RenderInner(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.AllInstances.TransformString">
            <summary>Sets the shim of OnExceptionLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of OnExceptionLayoutRendererWrapper.OnExceptionLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.RenderInnerLogEventInfo">
            <summary>Sets the shim of OnExceptionLayoutRendererWrapper.RenderInner(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimOnExceptionLayoutRendererWrapper.TransformString">
            <summary>Sets the shim of OnExceptionLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AlignmentOnTruncationGet">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.get_AlignmentOnTruncation()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AlignmentOnTruncationSetPaddingHorizontalAlignment">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.set_AlignmentOnTruncation(PaddingHorizontalAlignment value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AllInstances.AlignmentOnTruncationGet">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.get_AlignmentOnTruncation()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AllInstances.AlignmentOnTruncationSetPaddingHorizontalAlignment">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.set_AlignmentOnTruncation(PaddingHorizontalAlignment value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AllInstances.FixedLengthGet">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.get_FixedLength()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AllInstances.FixedLengthSetBoolean">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.set_FixedLength(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AllInstances.PadCharacterGet">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.get_PadCharacter()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AllInstances.PadCharacterSetChar">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.set_PadCharacter(Char value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AllInstances.PaddingGet">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.get_Padding()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AllInstances.PaddingSetInt32">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.set_Padding(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.AllInstances.TransformString">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.PaddingLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.FixedLengthGet">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.get_FixedLength()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.FixedLengthSetBoolean">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.set_FixedLength(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.PadCharacterGet">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.get_PadCharacter()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.PadCharacterSetChar">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.set_PadCharacter(Char value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.PaddingGet">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.get_Padding()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.PaddingSetInt32">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.set_Padding(Int32 value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimPaddingLayoutRendererWrapper.TransformString">
            <summary>Sets the shim of PaddingLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.IgnoreCaseGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.IgnoreCaseSetBoolean">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.InitializeLayoutRenderer">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.RegexGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_Regex()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.RegexSetBoolean">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_Regex(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.ReplaceGroupNameGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_ReplaceGroupName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.ReplaceGroupNameSetString">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_ReplaceGroupName(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.ReplaceWithGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_ReplaceWith()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.ReplaceWithSetString">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_ReplaceWith(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.SearchForGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_SearchFor()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.SearchForSetString">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_SearchFor(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.TransformString">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.WholeWordsGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_WholeWords()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.AllInstances.WholeWordsSetBoolean">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_WholeWords(Boolean value)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.ReplaceLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.IgnoreCaseGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.IgnoreCaseSetBoolean">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.InitializeLayoutRenderer">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.InitializeLayoutRenderer()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.RegexGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_Regex()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.RegexSetBoolean">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_Regex(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ReplaceGroupNameGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_ReplaceGroupName()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ReplaceGroupNameSetString">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_ReplaceGroupName(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ReplaceNamedGroupStringStringStringMatch">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.ReplaceNamedGroup(String input, String groupName, String replacement, Match match)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ReplaceWithGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_ReplaceWith()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ReplaceWithSetString">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_ReplaceWith(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.SearchForGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_SearchFor()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.SearchForSetString">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_SearchFor(String value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ShimReplacer">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper+Replacer</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ShimReplacer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ShimReplacer.#ctor(NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Replacer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ShimReplacer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ShimReplacer.AllInstances.EvaluateMatchMatch">
            <summary>Sets the shim of Replacer.EvaluateMatch(Match match)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ShimReplacer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ShimReplacer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ShimReplacer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ShimReplacer.ConstructorStringStringString">
            <summary>Sets the shim of Replacer.Replacer(String text, String replaceGroupName, String replaceWith)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.ShimReplacer.EvaluateMatchMatch">
            <summary>Sets the shim of Replacer.EvaluateMatch(Match match)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.TransformString">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.WholeWordsGet">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.get_WholeWords()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper.WholeWordsSetBoolean">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.set_WholeWords(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceLayoutRendererWrapper._ReplaceNamedGroupb__0Capture">
            <summary>Sets the shim of ReplaceLayoutRendererWrapper.&lt;ReplaceNamedGroup&gt;b__0(Capture c)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.ReplaceNewLinesLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.AllInstances.ReplacementGet">
            <summary>Sets the shim of ReplaceNewLinesLayoutRendererWrapper.get_Replacement()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.AllInstances.ReplacementSetString">
            <summary>Sets the shim of ReplaceNewLinesLayoutRendererWrapper.set_Replacement(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.AllInstances.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of ReplaceNewLinesLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of ReplaceNewLinesLayoutRendererWrapper.ReplaceNewLinesLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.ReplacementGet">
            <summary>Sets the shim of ReplaceNewLinesLayoutRendererWrapper.get_Replacement()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.ReplacementSetString">
            <summary>Sets the shim of ReplaceNewLinesLayoutRendererWrapper.set_Replacement(String value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimReplaceNewLinesLayoutRendererWrapper.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of ReplaceNewLinesLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.AllInstances.TextGet">
            <summary>Sets the shim of Rot13LayoutRendererWrapper.get_Text()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.AllInstances.TextSetLayout">
            <summary>Sets the shim of Rot13LayoutRendererWrapper.set_Text(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.AllInstances.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of Rot13LayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.Constructor">
            <summary>Sets the shim of Rot13LayoutRendererWrapper.Rot13LayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.DecodeRot13CharChar">
            <summary>Sets the shim of Rot13LayoutRendererWrapper.DecodeRot13Char(Char c)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.DecodeRot13String">
            <summary>Sets the shim of Rot13LayoutRendererWrapper.DecodeRot13(String encodedValue)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.DecodeRot13StringBuilder">
            <summary>Sets the shim of Rot13LayoutRendererWrapper.DecodeRot13(StringBuilder encodedValue)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.TextGet">
            <summary>Sets the shim of Rot13LayoutRendererWrapper.get_Text()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.TextSetLayout">
            <summary>Sets the shim of Rot13LayoutRendererWrapper.set_Text(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimRot13LayoutRendererWrapper.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of Rot13LayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.AllInstances.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.AllInstances.TrimLeftStringBuilder">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.TrimLeft(StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.AllInstances.TrimRightStringBuilder">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.TrimRight(StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.AllInstances.TrimWhiteSpaceGet">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.get_TrimWhiteSpace()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.AllInstances.TrimWhiteSpaceSetBoolean">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.set_TrimWhiteSpace(Boolean value)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.TrimWhiteSpaceLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.TrimLeftStringBuilder">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.TrimLeft(StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.TrimRightStringBuilder">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.TrimRight(StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.TrimWhiteSpaceGet">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.get_TrimWhiteSpace()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimTrimWhiteSpaceLayoutRendererWrapper.TrimWhiteSpaceSetBoolean">
            <summary>Sets the shim of TrimWhiteSpaceLayoutRendererWrapper.set_TrimWhiteSpace(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.AllInstances.CultureGet">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.get_Culture()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.AllInstances.CultureSetCultureInfo">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.set_Culture(CultureInfo value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.AllInstances.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.AllInstances.UppercaseGet">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.get_Uppercase()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.AllInstances.UppercaseSetBoolean">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.set_Uppercase(Boolean value)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.UppercaseLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.CultureGet">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.get_Culture()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.CultureSetCultureInfo">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.set_Culture(CultureInfo value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.UppercaseGet">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.get_Uppercase()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUppercaseLayoutRendererWrapper.UppercaseSetBoolean">
            <summary>Sets the shim of UppercaseLayoutRendererWrapper.set_Uppercase(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.AllInstances.EscapeDataNLogLegacyGet">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.get_EscapeDataNLogLegacy()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.AllInstances.EscapeDataNLogLegacySetBoolean">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.set_EscapeDataNLogLegacy(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.AllInstances.EscapeDataRfc3986Get">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.get_EscapeDataRfc3986()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.AllInstances.EscapeDataRfc3986SetBoolean">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.set_EscapeDataRfc3986(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.AllInstances.SpaceAsPlusGet">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.get_SpaceAsPlus()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.AllInstances.SpaceAsPlusSetBoolean">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.set_SpaceAsPlus(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.AllInstances.TransformString">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.UrlEncodeLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.EscapeDataNLogLegacyGet">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.get_EscapeDataNLogLegacy()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.EscapeDataNLogLegacySetBoolean">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.set_EscapeDataNLogLegacy(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.EscapeDataRfc3986Get">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.get_EscapeDataRfc3986()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.EscapeDataRfc3986SetBoolean">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.set_EscapeDataRfc3986(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.SpaceAsPlusGet">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.get_SpaceAsPlus()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.SpaceAsPlusSetBoolean">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.set_SpaceAsPlus(Boolean value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimUrlEncodeLayoutRendererWrapper.TransformString">
            <summary>Sets the shim of UrlEncodeLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of WhenEmptyLayoutRendererWrapper.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.AllInstances.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of WhenEmptyLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.AllInstances.WhenEmptyGet">
            <summary>Sets the shim of WhenEmptyLayoutRendererWrapper.get_WhenEmpty()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.AllInstances.WhenEmptySetLayout">
            <summary>Sets the shim of WhenEmptyLayoutRendererWrapper.set_WhenEmpty(Layout value)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of WhenEmptyLayoutRendererWrapper.WhenEmptyLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of WhenEmptyLayoutRendererWrapper.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of WhenEmptyLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.WhenEmptyGet">
            <summary>Sets the shim of WhenEmptyLayoutRendererWrapper.get_WhenEmpty()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenEmptyLayoutRendererWrapper.WhenEmptySetLayout">
            <summary>Sets the shim of WhenEmptyLayoutRendererWrapper.set_WhenEmpty(Layout value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.AllInstances.ElseGet">
            <summary>Sets the shim of WhenLayoutRendererWrapper.get_Else()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.AllInstances.ElseSetLayout">
            <summary>Sets the shim of WhenLayoutRendererWrapper.set_Else(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of WhenLayoutRendererWrapper.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.AllInstances.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of WhenLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.AllInstances.WhenGet">
            <summary>Sets the shim of WhenLayoutRendererWrapper.get_When()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.AllInstances.WhenSetConditionExpression">
            <summary>Sets the shim of WhenLayoutRendererWrapper.set_When(ConditionExpression value)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of WhenLayoutRendererWrapper.WhenLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.ElseGet">
            <summary>Sets the shim of WhenLayoutRendererWrapper.get_Else()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.ElseSetLayout">
            <summary>Sets the shim of WhenLayoutRendererWrapper.set_Else(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of WhenLayoutRendererWrapper.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.TransformFormattedMesssageStringBuilder">
            <summary>Sets the shim of WhenLayoutRendererWrapper.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.WhenGet">
            <summary>Sets the shim of WhenLayoutRendererWrapper.get_When()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWhenLayoutRendererWrapper.WhenSetConditionExpression">
            <summary>Sets the shim of WhenLayoutRendererWrapper.set_When(ConditionExpression value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.WrapLineLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.AllInstances.TransformString">
            <summary>Sets the shim of WrapLineLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.AllInstances.WrapLineGet">
            <summary>Sets the shim of WrapLineLayoutRendererWrapper.get_WrapLine()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.AllInstances.WrapLineSetInt32">
            <summary>Sets the shim of WrapLineLayoutRendererWrapper.set_WrapLine(Int32 value)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of WrapLineLayoutRendererWrapper.WrapLineLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.TransformString">
            <summary>Sets the shim of WrapLineLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.WrapLineGet">
            <summary>Sets the shim of WrapLineLayoutRendererWrapper.get_WrapLine()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapLineLayoutRendererWrapper.WrapLineSetInt32">
            <summary>Sets the shim of WrapLineLayoutRendererWrapper.set_WrapLine(Int32 value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.#ctor(NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of WrapperLayoutRendererBase.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.AllInstances.InnerGet">
            <summary>Sets the shim of WrapperLayoutRendererBase.get_Inner()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.AllInstances.InnerSetLayout">
            <summary>Sets the shim of WrapperLayoutRendererBase.set_Inner(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.AllInstances.RenderInnerLogEventInfo">
            <summary>Sets the shim of WrapperLayoutRendererBase.RenderInner(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of WrapperLayoutRendererBase.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.Constructor">
            <summary>Sets the shim of WrapperLayoutRendererBase.WrapperLayoutRendererBase()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.InnerGet">
            <summary>Sets the shim of WrapperLayoutRendererBase.get_Inner()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.InnerSetLayout">
            <summary>Sets the shim of WrapperLayoutRendererBase.set_Inner(Layout value)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBase.RenderInnerLogEventInfo">
            <summary>Sets the shim of WrapperLayoutRendererBase.RenderInner(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBuilderBase</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.#ctor(NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBuilderBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.AllInstances.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of WrapperLayoutRendererBuilderBase.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of WrapperLayoutRendererBuilderBase.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.AllInstances.RenderInnerLogEventInfo">
            <summary>Sets the shim of WrapperLayoutRendererBuilderBase.RenderInner(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.AllInstances.TransformString">
            <summary>Sets the shim of WrapperLayoutRendererBuilderBase.Transform(String text)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.AppendStringBuilderLogEventInfo">
            <summary>Sets the shim of WrapperLayoutRendererBuilderBase.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.Constructor">
            <summary>Sets the shim of WrapperLayoutRendererBuilderBase.WrapperLayoutRendererBuilderBase()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of WrapperLayoutRendererBuilderBase.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.RenderInnerLogEventInfo">
            <summary>Sets the shim of WrapperLayoutRendererBuilderBase.RenderInner(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimWrapperLayoutRendererBuilderBase.TransformString">
            <summary>Sets the shim of WrapperLayoutRendererBuilderBase.Transform(String text)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper">
            <summary>Shim type of NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.#ctor(NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.AllInstances.TransformString">
            <summary>Sets the shim of XmlEncodeLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.AllInstances.XmlEncodeGet">
            <summary>Sets the shim of XmlEncodeLayoutRendererWrapper.get_XmlEncode()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.AllInstances.XmlEncodeSetBoolean">
            <summary>Sets the shim of XmlEncodeLayoutRendererWrapper.set_XmlEncode(Boolean value)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.Constructor">
            <summary>Sets the shim of XmlEncodeLayoutRendererWrapper.XmlEncodeLayoutRendererWrapper()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.DoXmlEscapeString">
            <summary>Sets the shim of XmlEncodeLayoutRendererWrapper.DoXmlEscape(String text)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.TransformString">
            <summary>Sets the shim of XmlEncodeLayoutRendererWrapper.Transform(String text)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.XmlEncodeGet">
            <summary>Sets the shim of XmlEncodeLayoutRendererWrapper.get_XmlEncode()</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.ShimXmlEncodeLayoutRendererWrapper.XmlEncodeSetBoolean">
            <summary>Sets the shim of XmlEncodeLayoutRendererWrapper.set_XmlEncode(Boolean value)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase">
            <summary>Stub type of NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of WrapperLayoutRendererBase.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of WrapperLayoutRendererBase.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.InitializeStub">
            <summary>Initializes a new instance of type StubWrapperLayoutRendererBase</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.RenderInner(NLog.LogEventInfo)">
            <summary>Sets the stub of WrapperLayoutRendererBase.RenderInner(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.RenderInnerLogEventInfo">
            <summary>Sets the stub of WrapperLayoutRendererBase.RenderInner(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.Transform(System.String)">
            <summary>Sets the stub of WrapperLayoutRendererBase.Transform(String text)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBase.TransformString">
            <summary>Sets the stub of WrapperLayoutRendererBase.Transform(String text)</summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase">
            <summary>Stub type of NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBuilderBase</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>Sets the stub of WrapperLayoutRendererBuilderBase.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.AppendStringBuilderLogEventInfo">
            <summary>Sets the stub of WrapperLayoutRendererBuilderBase.Append(StringBuilder builder, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.CloseLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.CloseLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.CloseLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.Dispose(System.Boolean)">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.DisposeBoolean">
            <summary>Sets the stub of LayoutRenderer.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.InitializeLayoutRenderer">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.InitializeLayoutRenderer01">
            <summary>Sets the stub of LayoutRenderer.InitializeLayoutRenderer()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.InitializeStub">
            <summary>Initializes a new instance of type StubWrapperLayoutRendererBuilderBase</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <summary>Sets the stub of WrapperLayoutRendererBuilderBase.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the stub of WrapperLayoutRendererBuilderBase.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.ToString">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.ToString01">
            <summary>Sets the stub of LayoutRenderer.ToString()</summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.TransformFormattedMesssage(System.Text.StringBuilder)">
            <summary>Sets the stub of WrapperLayoutRendererBuilderBase.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="F:NLog.LayoutRenderers.Wrappers.Fakes.StubWrapperLayoutRendererBuilderBase.TransformFormattedMesssageStringBuilder">
            <summary>Sets the stub of WrapperLayoutRendererBuilderBase.TransformFormattedMesssage(StringBuilder target)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimCompoundLayout">
            <summary>Shim type of NLog.Layouts.CompoundLayout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCompoundLayout.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCompoundLayout.#ctor(NLog.Layouts.CompoundLayout)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimCompoundLayout.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.AllInstances.CloseLayout">
            <summary>Sets the shim of CompoundLayout.CloseLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.AllInstances.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of CompoundLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.AllInstances.InitializeLayout">
            <summary>Sets the shim of CompoundLayout.InitializeLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.AllInstances.LayoutsGet">
            <summary>Sets the shim of CompoundLayout.get_Layouts()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.AllInstances.LayoutsSetIListOfLayout">
            <summary>Sets the shim of CompoundLayout.set_Layouts(IList`1&lt;Layout&gt; value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of CompoundLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCompoundLayout.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCompoundLayout.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.CloseLayout">
            <summary>Sets the shim of CompoundLayout.CloseLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.Constructor">
            <summary>Sets the shim of CompoundLayout.CompoundLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of CompoundLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.InitializeLayout">
            <summary>Sets the shim of CompoundLayout.InitializeLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.LayoutsGet">
            <summary>Sets the shim of CompoundLayout.get_Layouts()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.LayoutsSetIListOfLayout">
            <summary>Sets the shim of CompoundLayout.set_Layouts(IList`1&lt;Layout&gt; value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCompoundLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of CompoundLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimCsvColumn">
            <summary>Shim type of NLog.Layouts.CsvColumn</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCsvColumn.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCsvColumn.#ctor(NLog.Layouts.CsvColumn)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimCsvColumn.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.AllInstances.LayoutGet">
            <summary>Sets the shim of CsvColumn.get_Layout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of CsvColumn.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.AllInstances.NameGet">
            <summary>Sets the shim of CsvColumn.get_Name()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.AllInstances.NameSetString">
            <summary>Sets the shim of CsvColumn.set_Name(String value)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCsvColumn.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCsvColumn.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.Constructor">
            <summary>Sets the shim of CsvColumn.CsvColumn()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.ConstructorStringLayout">
            <summary>Sets the shim of CsvColumn.CsvColumn(String name, Layout layout)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.LayoutGet">
            <summary>Sets the shim of CsvColumn.get_Layout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.LayoutSetLayout">
            <summary>Sets the shim of CsvColumn.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.NameGet">
            <summary>Sets the shim of CsvColumn.get_Name()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvColumn.NameSetString">
            <summary>Sets the shim of CsvColumn.set_Name(String value)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimCsvLayout">
            <summary>Shim type of NLog.Layouts.CsvLayout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCsvLayout.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCsvLayout.#ctor(NLog.Layouts.CsvLayout)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.ColumnsGet">
            <summary>Sets the shim of CsvLayout.get_Columns()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.ColumnsSetIListOfCsvColumn">
            <summary>Sets the shim of CsvLayout.set_Columns(IList`1&lt;CsvColumn&gt; value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.CustomColumnDelimiterGet">
            <summary>Sets the shim of CsvLayout.get_CustomColumnDelimiter()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.CustomColumnDelimiterSetString">
            <summary>Sets the shim of CsvLayout.set_CustomColumnDelimiter(String value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.DelimiterGet">
            <summary>Sets the shim of CsvLayout.get_Delimiter()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.DelimiterSetCsvColumnDelimiterMode">
            <summary>Sets the shim of CsvLayout.set_Delimiter(CsvColumnDelimiterMode value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of CsvLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.InitializeLayout">
            <summary>Sets the shim of CsvLayout.InitializeLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.QuoteCharGet">
            <summary>Sets the shim of CsvLayout.get_QuoteChar()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.QuoteCharSetString">
            <summary>Sets the shim of CsvLayout.set_QuoteChar(String value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.QuotingGet">
            <summary>Sets the shim of CsvLayout.get_Quoting()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.QuotingSetCsvQuotingMode">
            <summary>Sets the shim of CsvLayout.set_Quoting(CsvQuotingMode value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.RenderAllColumnsLogEventInfoStringBuilder">
            <summary>Sets the shim of CsvLayout.RenderAllColumns(LogEventInfo logEvent, StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of CsvLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.RenderHeaderStringBuilder">
            <summary>Sets the shim of CsvLayout.RenderHeader(StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.WithHeaderGet">
            <summary>Sets the shim of CsvLayout.get_WithHeader()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.AllInstances.WithHeaderSetBoolean">
            <summary>Sets the shim of CsvLayout.set_WithHeader(Boolean value)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCsvLayout.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimCsvLayout.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.ColumnsGet">
            <summary>Sets the shim of CsvLayout.get_Columns()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.ColumnsSetIListOfCsvColumn">
            <summary>Sets the shim of CsvLayout.set_Columns(IList`1&lt;CsvColumn&gt; value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.Constructor">
            <summary>Sets the shim of CsvLayout.CsvLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.CustomColumnDelimiterGet">
            <summary>Sets the shim of CsvLayout.get_CustomColumnDelimiter()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.CustomColumnDelimiterSetString">
            <summary>Sets the shim of CsvLayout.set_CustomColumnDelimiter(String value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.DelimiterGet">
            <summary>Sets the shim of CsvLayout.get_Delimiter()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.DelimiterSetCsvColumnDelimiterMode">
            <summary>Sets the shim of CsvLayout.set_Delimiter(CsvColumnDelimiterMode value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of CsvLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.InitializeLayout">
            <summary>Sets the shim of CsvLayout.InitializeLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.QuoteCharGet">
            <summary>Sets the shim of CsvLayout.get_QuoteChar()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.QuoteCharSetString">
            <summary>Sets the shim of CsvLayout.set_QuoteChar(String value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.QuotingGet">
            <summary>Sets the shim of CsvLayout.get_Quoting()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.QuotingSetCsvQuotingMode">
            <summary>Sets the shim of CsvLayout.set_Quoting(CsvQuotingMode value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.RenderAllColumnsLogEventInfoStringBuilder">
            <summary>Sets the shim of CsvLayout.RenderAllColumns(LogEventInfo logEvent, StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of CsvLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.RenderHeaderStringBuilder">
            <summary>Sets the shim of CsvLayout.RenderHeader(StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.WithHeaderGet">
            <summary>Sets the shim of CsvLayout.get_WithHeader()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimCsvLayout.WithHeaderSetBoolean">
            <summary>Sets the shim of CsvLayout.set_WithHeader(Boolean value)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimJsonAttribute">
            <summary>Shim type of NLog.Layouts.JsonAttribute</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimJsonAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimJsonAttribute.#ctor(NLog.Layouts.JsonAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimJsonAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.AllInstances.EncodeGet">
            <summary>Sets the shim of JsonAttribute.get_Encode()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.AllInstances.EncodeSetBoolean">
            <summary>Sets the shim of JsonAttribute.set_Encode(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.AllInstances.EscapeUnicodeGet">
            <summary>Sets the shim of JsonAttribute.get_EscapeUnicode()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.AllInstances.EscapeUnicodeSetBoolean">
            <summary>Sets the shim of JsonAttribute.set_EscapeUnicode(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.AllInstances.LayoutGet">
            <summary>Sets the shim of JsonAttribute.get_Layout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of JsonAttribute.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.AllInstances.NameGet">
            <summary>Sets the shim of JsonAttribute.get_Name()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.AllInstances.NameSetString">
            <summary>Sets the shim of JsonAttribute.set_Name(String value)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimJsonAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimJsonAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.Constructor">
            <summary>Sets the shim of JsonAttribute.JsonAttribute()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.ConstructorStringLayout">
            <summary>Sets the shim of JsonAttribute.JsonAttribute(String name, Layout layout)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.ConstructorStringLayoutBoolean">
            <summary>Sets the shim of JsonAttribute.JsonAttribute(String name, Layout layout, Boolean encode)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.EncodeGet">
            <summary>Sets the shim of JsonAttribute.get_Encode()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.EncodeSetBoolean">
            <summary>Sets the shim of JsonAttribute.set_Encode(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.EscapeUnicodeGet">
            <summary>Sets the shim of JsonAttribute.get_EscapeUnicode()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.EscapeUnicodeSetBoolean">
            <summary>Sets the shim of JsonAttribute.set_EscapeUnicode(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.LayoutGet">
            <summary>Sets the shim of JsonAttribute.get_Layout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.LayoutSetLayout">
            <summary>Sets the shim of JsonAttribute.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.NameGet">
            <summary>Sets the shim of JsonAttribute.get_Name()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonAttribute.NameSetString">
            <summary>Sets the shim of JsonAttribute.set_Name(String value)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimJsonLayout">
            <summary>Shim type of NLog.Layouts.JsonLayout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimJsonLayout.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimJsonLayout.#ctor(NLog.Layouts.JsonLayout)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.AppendJsonAttributeValueStringBooleanStringStringBuilder">
            <summary>Sets the shim of JsonLayout.AppendJsonAttributeValue(String attributeName, Boolean attributeEncode, String text, StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.AppendJsonPropertyValueStringObjectStringBuilder">
            <summary>Sets the shim of JsonLayout.AppendJsonPropertyValue(String propName, Object propertyValue, StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.AttributesGet">
            <summary>Sets the shim of JsonLayout.get_Attributes()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.AttributesSetIListOfJsonAttribute">
            <summary>Sets the shim of JsonLayout.set_Attributes(IList`1&lt;JsonAttribute&gt; value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.CompleteJsonMessageStringBuilder">
            <summary>Sets the shim of JsonLayout.CompleteJsonMessage(StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.ExcludePropertiesGet">
            <summary>Sets the shim of JsonLayout.get_ExcludeProperties()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.ExcludePropertiesSetISetOfString">
            <summary>Sets the shim of JsonLayout.set_ExcludeProperties(ISet`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of JsonLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.IncludeAllPropertiesGet">
            <summary>Sets the shim of JsonLayout.get_IncludeAllProperties()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.IncludeAllPropertiesSetBoolean">
            <summary>Sets the shim of JsonLayout.set_IncludeAllProperties(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.IncludeMdcGet">
            <summary>Sets the shim of JsonLayout.get_IncludeMdc()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.IncludeMdcSetBoolean">
            <summary>Sets the shim of JsonLayout.set_IncludeMdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.IncludeMdlcGet">
            <summary>Sets the shim of JsonLayout.get_IncludeMdlc()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.IncludeMdlcSetBoolean">
            <summary>Sets the shim of JsonLayout.set_IncludeMdlc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.InitializeLayout">
            <summary>Sets the shim of JsonLayout.InitializeLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.RenderEmptyObjectGet">
            <summary>Sets the shim of JsonLayout.get_RenderEmptyObject()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.RenderEmptyObjectSetBoolean">
            <summary>Sets the shim of JsonLayout.set_RenderEmptyObject(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of JsonLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.RenderJsonFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of JsonLayout.RenderJsonFormattedMessage(LogEventInfo logEvent, StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.SuppressSpacesGet">
            <summary>Sets the shim of JsonLayout.get_SuppressSpaces()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AllInstances.SuppressSpacesSetBoolean">
            <summary>Sets the shim of JsonLayout.set_SuppressSpaces(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AppendJsonAttributeValueStringBooleanStringStringBuilder">
            <summary>Sets the shim of JsonLayout.AppendJsonAttributeValue(String attributeName, Boolean attributeEncode, String text, StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AppendJsonPropertyValueStringObjectStringBuilder">
            <summary>Sets the shim of JsonLayout.AppendJsonPropertyValue(String propName, Object propertyValue, StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AttributesGet">
            <summary>Sets the shim of JsonLayout.get_Attributes()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.AttributesSetIListOfJsonAttribute">
            <summary>Sets the shim of JsonLayout.set_Attributes(IList`1&lt;JsonAttribute&gt; value)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimJsonLayout.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimJsonLayout.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.CompleteJsonMessageStringBuilder">
            <summary>Sets the shim of JsonLayout.CompleteJsonMessage(StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.Constructor">
            <summary>Sets the shim of JsonLayout.JsonLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.ExcludePropertiesGet">
            <summary>Sets the shim of JsonLayout.get_ExcludeProperties()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.ExcludePropertiesSetISetOfString">
            <summary>Sets the shim of JsonLayout.set_ExcludeProperties(ISet`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of JsonLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.IncludeAllPropertiesGet">
            <summary>Sets the shim of JsonLayout.get_IncludeAllProperties()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.IncludeAllPropertiesSetBoolean">
            <summary>Sets the shim of JsonLayout.set_IncludeAllProperties(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.IncludeMdcGet">
            <summary>Sets the shim of JsonLayout.get_IncludeMdc()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.IncludeMdcSetBoolean">
            <summary>Sets the shim of JsonLayout.set_IncludeMdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.IncludeMdlcGet">
            <summary>Sets the shim of JsonLayout.get_IncludeMdlc()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.IncludeMdlcSetBoolean">
            <summary>Sets the shim of JsonLayout.set_IncludeMdlc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.InitializeLayout">
            <summary>Sets the shim of JsonLayout.InitializeLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.RenderEmptyObjectGet">
            <summary>Sets the shim of JsonLayout.get_RenderEmptyObject()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.RenderEmptyObjectSetBoolean">
            <summary>Sets the shim of JsonLayout.set_RenderEmptyObject(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of JsonLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.RenderJsonFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of JsonLayout.RenderJsonFormattedMessage(LogEventInfo logEvent, StringBuilder sb)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.SuppressSpacesGet">
            <summary>Sets the shim of JsonLayout.get_SuppressSpaces()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimJsonLayout.SuppressSpacesSetBoolean">
            <summary>Sets the shim of JsonLayout.set_SuppressSpaces(Boolean value)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimLayout">
            <summary>Shim type of NLog.Layouts.Layout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayout.#ctor(NLog.Layouts.Layout)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimLayout.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.Close">
            <summary>Sets the shim of Layout.Close()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.CloseLayout">
            <summary>Sets the shim of Layout.CloseLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.InitializeLayout">
            <summary>Sets the shim of Layout.InitializeLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.InitializeLoggingConfiguration">
            <summary>Sets the shim of Layout.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.LoggingConfigurationGet">
            <summary>Sets the shim of Layout.get_LoggingConfiguration()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.LoggingConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of Layout.set_LoggingConfiguration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.NLogInternalISupportsInitializeClose">
            <summary>Sets the shim of Layout.NLog.Internal.ISupportsInitialize.Close()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.NLogInternalISupportsInitializeInitializeLoggingConfiguration">
            <summary>Sets the shim of Layout.NLog.Internal.ISupportsInitialize.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.PerformObjectScanning">
            <summary>Sets the shim of Layout.PerformObjectScanning()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.PrecalculateBuilderLogEventInfoStringBuilder">
            <summary>Sets the shim of Layout.PrecalculateBuilder(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.PrecalculateLogEventInfo">
            <summary>Sets the shim of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.RenderAllocateBuilderLogEventInfoStringBuilderBoolean">
            <summary>Sets the shim of Layout.RenderAllocateBuilder(LogEventInfo logEvent, StringBuilder reusableBuilder, Boolean cacheLayoutResult)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.RenderAppendBuilderLogEventInfoStringBuilderBoolean">
            <summary>Sets the shim of Layout.RenderAppendBuilder(LogEventInfo logEvent, StringBuilder target, Boolean cacheLayoutResult)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of Layout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.RenderLogEventInfo">
            <summary>Sets the shim of Layout.Render(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.StackTraceUsageGet">
            <summary>Sets the shim of Layout.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.StackTraceUsageSetStackTraceUsage">
            <summary>Sets the shim of Layout.set_StackTraceUsage(StackTraceUsage value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.ThreadAgnosticGet">
            <summary>Sets the shim of Layout.get_ThreadAgnostic()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.AllInstances.ThreadAgnosticSetBoolean">
            <summary>Sets the shim of Layout.set_ThreadAgnostic(Boolean value)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayout.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayout.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.Close">
            <summary>Sets the shim of Layout.Close()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.CloseLayout">
            <summary>Sets the shim of Layout.CloseLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.Constructor">
            <summary>Sets the shim of Layout.Layout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.FromStringString">
            <summary>Sets the shim of Layout.FromString(String layoutText)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.FromStringStringConfigurationItemFactory">
            <summary>Sets the shim of Layout.FromString(String layoutText, ConfigurationItemFactory configurationItemFactory)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.ImplicitOpStringLayout">
            <summary>Sets the shim of Layout.op_Implicit(String text)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.InitializeLayout">
            <summary>Sets the shim of Layout.InitializeLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.InitializeLoggingConfiguration">
            <summary>Sets the shim of Layout.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.LoggingConfigurationGet">
            <summary>Sets the shim of Layout.get_LoggingConfiguration()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.LoggingConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of Layout.set_LoggingConfiguration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.NLogInternalISupportsInitializeClose">
            <summary>Sets the shim of Layout.NLog.Internal.ISupportsInitialize.Close()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.NLogInternalISupportsInitializeInitializeLoggingConfiguration">
            <summary>Sets the shim of Layout.NLog.Internal.ISupportsInitialize.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.PerformObjectScanning">
            <summary>Sets the shim of Layout.PerformObjectScanning()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.PrecalculateBuilderLogEventInfoStringBuilder">
            <summary>Sets the shim of Layout.PrecalculateBuilder(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.PrecalculateLogEventInfo">
            <summary>Sets the shim of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayout.RegisterOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String})">
            <summary>Sets the shim of Layout.Register(String name)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.RegisterStringType">
            <summary>Sets the shim of Layout.Register(String name, Type layoutType)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.RenderAllocateBuilderLogEventInfoStringBuilderBoolean">
            <summary>Sets the shim of Layout.RenderAllocateBuilder(LogEventInfo logEvent, StringBuilder reusableBuilder, Boolean cacheLayoutResult)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.RenderAppendBuilderLogEventInfoStringBuilderBoolean">
            <summary>Sets the shim of Layout.RenderAppendBuilder(LogEventInfo logEvent, StringBuilder target, Boolean cacheLayoutResult)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of Layout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.RenderLogEventInfo">
            <summary>Sets the shim of Layout.Render(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.StackTraceUsageGet">
            <summary>Sets the shim of Layout.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.StackTraceUsageSetStackTraceUsage">
            <summary>Sets the shim of Layout.set_StackTraceUsage(StackTraceUsage value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.ThreadAgnosticGet">
            <summary>Sets the shim of Layout.get_ThreadAgnostic()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout.ThreadAgnosticSetBoolean">
            <summary>Sets the shim of Layout.set_ThreadAgnostic(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout._PerformObjectScanningb__0Object">
            <summary>Sets the shim of Layout.&lt;PerformObjectScanning&gt;b__0(Object item)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayout._PerformObjectScanningb__1IUsesStackTrace">
            <summary>Sets the shim of Layout.&lt;PerformObjectScanning&gt;b__1(IUsesStackTrace item)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimLayoutAttribute">
            <summary>Shim type of NLog.Layouts.LayoutAttribute</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayoutAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayoutAttribute.#ctor(NLog.Layouts.LayoutAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimLayoutAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayoutAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayoutAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutAttribute.ConstructorString">
            <summary>Sets the shim of LayoutAttribute.LayoutAttribute(String name)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter">
            <summary>Shim type of NLog.Layouts.LayoutWithHeaderAndFooter</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.#ctor(NLog.Layouts.LayoutWithHeaderAndFooter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.AllInstances.FooterGet">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.get_Footer()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.AllInstances.FooterSetLayout">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.set_Footer(Layout value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.AllInstances.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.AllInstances.HeaderGet">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.get_Header()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.AllInstances.HeaderSetLayout">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.set_Header(Layout value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.AllInstances.LayoutGet">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.get_Layout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.Constructor">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.LayoutWithHeaderAndFooter()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.FooterGet">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.get_Footer()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.FooterSetLayout">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.set_Footer(Layout value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.HeaderGet">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.get_Header()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.HeaderSetLayout">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.set_Header(Layout value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.LayoutGet">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.get_Layout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.LayoutSetLayout">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLayoutWithHeaderAndFooter.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of LayoutWithHeaderAndFooter.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout">
            <summary>Shim type of NLog.Layouts.Log4JXmlEventLayout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.#ctor(NLog.Layouts.Log4JXmlEventLayout)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of Log4JXmlEventLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances.IncludeAllPropertiesGet">
            <summary>Sets the shim of Log4JXmlEventLayout.get_IncludeAllProperties()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances.IncludeAllPropertiesSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayout.set_IncludeAllProperties(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances.IncludeMdcGet">
            <summary>Sets the shim of Log4JXmlEventLayout.get_IncludeMdc()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances.IncludeMdcSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayout.set_IncludeMdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances.IncludeMdlcGet">
            <summary>Sets the shim of Log4JXmlEventLayout.get_IncludeMdlc()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances.IncludeMdlcSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayout.set_IncludeMdlc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of Log4JXmlEventLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances.RendererGet">
            <summary>Sets the shim of Log4JXmlEventLayout.get_Renderer()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.AllInstances.RendererSetLog4JXmlEventLayoutRenderer">
            <summary>Sets the shim of Log4JXmlEventLayout.set_Renderer(Log4JXmlEventLayoutRenderer value)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.Constructor">
            <summary>Sets the shim of Log4JXmlEventLayout.Log4JXmlEventLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of Log4JXmlEventLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.IncludeAllPropertiesGet">
            <summary>Sets the shim of Log4JXmlEventLayout.get_IncludeAllProperties()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.IncludeAllPropertiesSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayout.set_IncludeAllProperties(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.IncludeMdcGet">
            <summary>Sets the shim of Log4JXmlEventLayout.get_IncludeMdc()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.IncludeMdcSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayout.set_IncludeMdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.IncludeMdlcGet">
            <summary>Sets the shim of Log4JXmlEventLayout.get_IncludeMdlc()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.IncludeMdlcSetBoolean">
            <summary>Sets the shim of Log4JXmlEventLayout.set_IncludeMdlc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of Log4JXmlEventLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.RendererGet">
            <summary>Sets the shim of Log4JXmlEventLayout.get_Renderer()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimLog4JXmlEventLayout.RendererSetLog4JXmlEventLayoutRenderer">
            <summary>Sets the shim of Log4JXmlEventLayout.set_Renderer(Log4JXmlEventLayoutRenderer value)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimSimpleLayout">
            <summary>Shim type of NLog.Layouts.SimpleLayout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimSimpleLayout.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimSimpleLayout.#ctor(NLog.Layouts.SimpleLayout)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.FixedTextGet">
            <summary>Sets the shim of SimpleLayout.get_FixedText()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of SimpleLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.InitializeLayout">
            <summary>Sets the shim of SimpleLayout.InitializeLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.IsFixedTextGet">
            <summary>Sets the shim of SimpleLayout.get_IsFixedText()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.OriginalTextGet">
            <summary>Sets the shim of SimpleLayout.get_OriginalText()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.OriginalTextSetString">
            <summary>Sets the shim of SimpleLayout.set_OriginalText(String value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.RenderAllRenderersLogEventInfoStringBuilder">
            <summary>Sets the shim of SimpleLayout.RenderAllRenderers(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of SimpleLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.RenderersGet">
            <summary>Sets the shim of SimpleLayout.get_Renderers()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.RenderersSetReadOnlyCollectionOfLayoutRenderer">
            <summary>Sets the shim of SimpleLayout.set_Renderers(ReadOnlyCollection`1&lt;LayoutRenderer&gt; value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.SetRenderersLayoutRendererArrayString">
            <summary>Sets the shim of SimpleLayout.SetRenderers(LayoutRenderer[] renderers, String text)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.StackTraceUsageGet">
            <summary>Sets the shim of SimpleLayout.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.TextGet">
            <summary>Sets the shim of SimpleLayout.get_Text()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.TextSetString">
            <summary>Sets the shim of SimpleLayout.set_Text(String value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.AllInstances.ToString01">
            <summary>Sets the shim of SimpleLayout.ToString()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimSimpleLayout.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimSimpleLayout.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.ShimSimpleLayout.Bind(NLog.Internal.IUsesStackTrace)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.Constructor">
            <summary>Sets the shim of SimpleLayout.SimpleLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.ConstructorLayoutRendererArrayStringConfigurationItemFactory">
            <summary>Sets the shim of SimpleLayout.SimpleLayout(LayoutRenderer[] renderers, String text, ConfigurationItemFactory configurationItemFactory)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.ConstructorString">
            <summary>Sets the shim of SimpleLayout.SimpleLayout(String txt)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.ConstructorStringConfigurationItemFactory">
            <summary>Sets the shim of SimpleLayout.SimpleLayout(String txt, ConfigurationItemFactory configurationItemFactory)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.EscapeString">
            <summary>Sets the shim of SimpleLayout.Escape(String text)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.EvaluateString">
            <summary>Sets the shim of SimpleLayout.Evaluate(String text)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.EvaluateStringLogEventInfo">
            <summary>Sets the shim of SimpleLayout.Evaluate(String text, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.FixedTextGet">
            <summary>Sets the shim of SimpleLayout.get_FixedText()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of SimpleLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.ImplicitOpStringSimpleLayout">
            <summary>Sets the shim of SimpleLayout.op_Implicit(String text)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.InitializeLayout">
            <summary>Sets the shim of SimpleLayout.InitializeLayout()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.IsFixedTextGet">
            <summary>Sets the shim of SimpleLayout.get_IsFixedText()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.OriginalTextGet">
            <summary>Sets the shim of SimpleLayout.get_OriginalText()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.OriginalTextSetString">
            <summary>Sets the shim of SimpleLayout.set_OriginalText(String value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.RenderAllRenderersLogEventInfoStringBuilder">
            <summary>Sets the shim of SimpleLayout.RenderAllRenderers(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of SimpleLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.RenderersGet">
            <summary>Sets the shim of SimpleLayout.get_Renderers()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.RenderersSetReadOnlyCollectionOfLayoutRenderer">
            <summary>Sets the shim of SimpleLayout.set_Renderers(ReadOnlyCollection`1&lt;LayoutRenderer&gt; value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.SetRenderersLayoutRendererArrayString">
            <summary>Sets the shim of SimpleLayout.SetRenderers(LayoutRenderer[] renderers, String text)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.StackTraceUsageGet">
            <summary>Sets the shim of SimpleLayout.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.TextGet">
            <summary>Sets the shim of SimpleLayout.get_Text()</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.TextSetString">
            <summary>Sets the shim of SimpleLayout.set_Text(String value)</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.ShimSimpleLayout.ToString">
            <summary>Sets the shim of SimpleLayout.ToString()</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.StubCompoundLayout">
            <summary>Stub type of NLog.Layouts.CompoundLayout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCompoundLayout.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubCompoundLayout.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCompoundLayout.CloseLayout">
            <summary>Sets the stub of CompoundLayout.CloseLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubCompoundLayout.CloseLayout01">
            <summary>Sets the stub of CompoundLayout.CloseLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCompoundLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>Sets the stub of CompoundLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubCompoundLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the stub of CompoundLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCompoundLayout.InitializeLayout">
            <summary>Sets the stub of CompoundLayout.InitializeLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubCompoundLayout.InitializeLayout01">
            <summary>Sets the stub of CompoundLayout.InitializeLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCompoundLayout.InitializeStub">
            <summary>Initializes a new instance of type StubCompoundLayout</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubCompoundLayout.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubCompoundLayout.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCompoundLayout.Precalculate(NLog.LogEventInfo)">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubCompoundLayout.PrecalculateLogEventInfo">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCompoundLayout.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <summary>Sets the stub of CompoundLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubCompoundLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the stub of CompoundLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.StubCsvColumn">
            <summary>Stub type of NLog.Layouts.CsvColumn</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCsvColumn.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCsvColumn.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubCsvColumn.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCsvColumn.InitializeStub">
            <summary>Initializes a new instance of type StubCsvColumn</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubCsvColumn.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubCsvColumn.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.StubCsvLayout">
            <summary>Stub type of NLog.Layouts.CsvLayout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCsvLayout.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubCsvLayout.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCsvLayout.CloseLayout">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubCsvLayout.CloseLayout01">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCsvLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>Sets the stub of CsvLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubCsvLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the stub of CsvLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCsvLayout.InitializeLayout">
            <summary>Sets the stub of CsvLayout.InitializeLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubCsvLayout.InitializeLayout01">
            <summary>Sets the stub of CsvLayout.InitializeLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCsvLayout.InitializeStub">
            <summary>Initializes a new instance of type StubCsvLayout</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubCsvLayout.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubCsvLayout.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCsvLayout.Precalculate(NLog.LogEventInfo)">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubCsvLayout.PrecalculateLogEventInfo">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubCsvLayout.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <summary>Sets the stub of CsvLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubCsvLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the stub of CsvLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.StubJsonAttribute">
            <summary>Stub type of NLog.Layouts.JsonAttribute</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonAttribute.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonAttribute.#ctor(System.String,NLog.Layouts.Layout,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubJsonAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubJsonAttribute</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubJsonAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubJsonAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.StubJsonLayout">
            <summary>Stub type of NLog.Layouts.JsonLayout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonLayout.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubJsonLayout.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonLayout.CloseLayout">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubJsonLayout.CloseLayout01">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>Sets the stub of JsonLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubJsonLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the stub of JsonLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonLayout.InitializeLayout">
            <summary>Sets the stub of JsonLayout.InitializeLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubJsonLayout.InitializeLayout01">
            <summary>Sets the stub of JsonLayout.InitializeLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonLayout.InitializeStub">
            <summary>Initializes a new instance of type StubJsonLayout</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubJsonLayout.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubJsonLayout.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonLayout.Precalculate(NLog.LogEventInfo)">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubJsonLayout.PrecalculateLogEventInfo">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubJsonLayout.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <summary>Sets the stub of JsonLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubJsonLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the stub of JsonLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.StubLayout">
            <summary>Stub type of NLog.Layouts.Layout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayout.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubLayout.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayout.CloseLayout">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLayout.CloseLayout01">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>Sets the stub of Layout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the stub of Layout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayout.InitializeLayout">
            <summary>Sets the stub of Layout.InitializeLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLayout.InitializeLayout01">
            <summary>Sets the stub of Layout.InitializeLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayout.InitializeStub">
            <summary>Initializes a new instance of type StubLayout</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubLayout.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubLayout.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayout.Precalculate(NLog.LogEventInfo)">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLayout.PrecalculateLogEventInfo">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayout.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <summary>Sets the stub of Layout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the stub of Layout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter">
            <summary>Stub type of NLog.Layouts.LayoutWithHeaderAndFooter</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.CloseLayout">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.CloseLayout01">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>Sets the stub of LayoutWithHeaderAndFooter.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.GetFormattedMessageLogEventInfo">
            <summary>Sets the stub of LayoutWithHeaderAndFooter.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.InitializeLayout">
            <summary>Sets the stub of Layout.InitializeLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.InitializeLayout01">
            <summary>Sets the stub of Layout.InitializeLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.InitializeStub">
            <summary>Initializes a new instance of type StubLayoutWithHeaderAndFooter</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.Precalculate(NLog.LogEventInfo)">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.PrecalculateLogEventInfo">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <summary>Sets the stub of LayoutWithHeaderAndFooter.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLayoutWithHeaderAndFooter.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the stub of LayoutWithHeaderAndFooter.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.StubLog4JXmlEventLayout">
            <summary>Stub type of NLog.Layouts.Log4JXmlEventLayout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.CloseLayout">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.CloseLayout01">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>Sets the stub of Log4JXmlEventLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the stub of Log4JXmlEventLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.InitializeLayout">
            <summary>Sets the stub of Layout.InitializeLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.InitializeLayout01">
            <summary>Sets the stub of Layout.InitializeLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.InitializeStub">
            <summary>Initializes a new instance of type StubLog4JXmlEventLayout</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.Precalculate(NLog.LogEventInfo)">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.PrecalculateLogEventInfo">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <summary>Sets the stub of Log4JXmlEventLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubLog4JXmlEventLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the stub of Log4JXmlEventLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="T:NLog.Layouts.Fakes.StubSimpleLayout">
            <summary>Stub type of NLog.Layouts.SimpleLayout</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubSimpleLayout.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubSimpleLayout.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubSimpleLayout.#ctor(System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubSimpleLayout.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubSimpleLayout.CloseLayout">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubSimpleLayout.CloseLayout01">
            <summary>Sets the stub of Layout.CloseLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubSimpleLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>Sets the stub of SimpleLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubSimpleLayout.GetFormattedMessageLogEventInfo">
            <summary>Sets the stub of SimpleLayout.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubSimpleLayout.InitializeLayout">
            <summary>Sets the stub of SimpleLayout.InitializeLayout()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubSimpleLayout.InitializeLayout01">
            <summary>Sets the stub of SimpleLayout.InitializeLayout()</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubSimpleLayout.InitializeStub">
            <summary>Initializes a new instance of type StubSimpleLayout</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubSimpleLayout.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Layouts.Fakes.StubSimpleLayout.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubSimpleLayout.Precalculate(NLog.LogEventInfo)">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubSimpleLayout.PrecalculateLogEventInfo">
            <summary>Sets the stub of Layout.Precalculate(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubSimpleLayout.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <summary>Sets the stub of SimpleLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubSimpleLayout.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the stub of SimpleLayout.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="M:NLog.Layouts.Fakes.StubSimpleLayout.ToString">
            <summary>Sets the stub of SimpleLayout.ToString()</summary>
        </member>
        <member name="F:NLog.Layouts.Fakes.StubSimpleLayout.ToString01">
            <summary>Sets the stub of SimpleLayout.ToString()</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService">
            <summary>Shim type of NLog.LogReceiverService.BaseLogReceiverForwardingService</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.#ctor(NLog.LogReceiverService.BaseLogReceiverForwardingService)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.AllInstances.ProcessLogMessagesLogEventInfoArray">
            <summary>Sets the shim of BaseLogReceiverForwardingService.ProcessLogMessages(LogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.AllInstances.ProcessLogMessagesNLogEvents">
            <summary>Sets the shim of BaseLogReceiverForwardingService.ProcessLogMessages(NLogEvents events)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.Constructor">
            <summary>Sets the shim of BaseLogReceiverForwardingService.BaseLogReceiverForwardingService()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.ConstructorLogFactory">
            <summary>Sets the shim of BaseLogReceiverForwardingService.BaseLogReceiverForwardingService(LogFactory logFactory)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.ProcessLogMessagesLogEventInfoArray">
            <summary>Sets the shim of BaseLogReceiverForwardingService.ProcessLogMessages(LogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimBaseLogReceiverForwardingService.ProcessLogMessagesNLogEvents">
            <summary>Sets the shim of BaseLogReceiverForwardingService.ProcessLogMessages(NLogEvents events)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimLogReceiverForwardingService">
            <summary>Shim type of NLog.LogReceiverService.LogReceiverForwardingService</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimLogReceiverForwardingService.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimLogReceiverForwardingService.#ctor(NLog.LogReceiverService.LogReceiverForwardingService)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimLogReceiverForwardingService.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimLogReceiverForwardingService.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimLogReceiverForwardingService.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimLogReceiverForwardingService.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimLogReceiverForwardingService.Bind(NLog.LogReceiverService.ILogReceiverServer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimLogReceiverForwardingService.Constructor">
            <summary>Sets the shim of LogReceiverForwardingService.LogReceiverForwardingService()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimLogReceiverForwardingService.ConstructorLogFactory">
            <summary>Sets the shim of LogReceiverForwardingService.LogReceiverForwardingService(LogFactory logFactory)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimLogReceiverOneWayForwardingService">
            <summary>Shim type of NLog.LogReceiverService.LogReceiverOneWayForwardingService</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimLogReceiverOneWayForwardingService.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimLogReceiverOneWayForwardingService.#ctor(NLog.LogReceiverService.LogReceiverOneWayForwardingService)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimLogReceiverOneWayForwardingService.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimLogReceiverOneWayForwardingService.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimLogReceiverOneWayForwardingService.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimLogReceiverOneWayForwardingService.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimLogReceiverOneWayForwardingService.Bind(NLog.LogReceiverService.ILogReceiverOneWayServer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimLogReceiverOneWayForwardingService.Constructor">
            <summary>Sets the shim of LogReceiverOneWayForwardingService.LogReceiverOneWayForwardingService()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimLogReceiverOneWayForwardingService.ConstructorLogFactory">
            <summary>Sets the shim of LogReceiverOneWayForwardingService.LogReceiverOneWayForwardingService(LogFactory logFactory)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimNLogEvent">
            <summary>Shim type of NLog.LogReceiverService.NLogEvent</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimNLogEvent.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimNLogEvent.#ctor(NLog.LogReceiverService.NLogEvent)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.IdGet">
            <summary>Sets the shim of NLogEvent.get_Id()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.IdSetInt32">
            <summary>Sets the shim of NLogEvent.set_Id(Int32 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.LevelOrdinalGet">
            <summary>Sets the shim of NLogEvent.get_LevelOrdinal()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.LevelOrdinalSetInt32">
            <summary>Sets the shim of NLogEvent.set_LevelOrdinal(Int32 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.LoggerOrdinalGet">
            <summary>Sets the shim of NLogEvent.get_LoggerOrdinal()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.LoggerOrdinalSetInt32">
            <summary>Sets the shim of NLogEvent.set_LoggerOrdinal(Int32 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.MessageOrdinalGet">
            <summary>Sets the shim of NLogEvent.get_MessageOrdinal()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.MessageOrdinalSetInt32">
            <summary>Sets the shim of NLogEvent.set_MessageOrdinal(Int32 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.TimeDeltaGet">
            <summary>Sets the shim of NLogEvent.get_TimeDelta()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.TimeDeltaSetInt64">
            <summary>Sets the shim of NLogEvent.set_TimeDelta(Int64 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.ToEventInfoNLogEventsString">
            <summary>Sets the shim of NLogEvent.ToEventInfo(NLogEvents context, String loggerNamePrefix)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.ValueIndexesGet">
            <summary>Sets the shim of NLogEvent.get_ValueIndexes()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.ValueIndexesSetIListOfInt32">
            <summary>Sets the shim of NLogEvent.set_ValueIndexes(IList`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.ValuesGet">
            <summary>Sets the shim of NLogEvent.get_Values()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.AllInstances.ValuesSetString">
            <summary>Sets the shim of NLogEvent.set_Values(String value)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimNLogEvent.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimNLogEvent.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.Constructor">
            <summary>Sets the shim of NLogEvent.NLogEvent()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.IdGet">
            <summary>Sets the shim of NLogEvent.get_Id()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.IdSetInt32">
            <summary>Sets the shim of NLogEvent.set_Id(Int32 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.LevelOrdinalGet">
            <summary>Sets the shim of NLogEvent.get_LevelOrdinal()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.LevelOrdinalSetInt32">
            <summary>Sets the shim of NLogEvent.set_LevelOrdinal(Int32 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.LoggerOrdinalGet">
            <summary>Sets the shim of NLogEvent.get_LoggerOrdinal()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.LoggerOrdinalSetInt32">
            <summary>Sets the shim of NLogEvent.set_LoggerOrdinal(Int32 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.MessageOrdinalGet">
            <summary>Sets the shim of NLogEvent.get_MessageOrdinal()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.MessageOrdinalSetInt32">
            <summary>Sets the shim of NLogEvent.set_MessageOrdinal(Int32 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.TimeDeltaGet">
            <summary>Sets the shim of NLogEvent.get_TimeDelta()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.TimeDeltaSetInt64">
            <summary>Sets the shim of NLogEvent.set_TimeDelta(Int64 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.ToEventInfoNLogEventsString">
            <summary>Sets the shim of NLogEvent.ToEventInfo(NLogEvents context, String loggerNamePrefix)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.ValueIndexesGet">
            <summary>Sets the shim of NLogEvent.get_ValueIndexes()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.ValueIndexesSetIListOfInt32">
            <summary>Sets the shim of NLogEvent.set_ValueIndexes(IList`1&lt;Int32&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.ValuesGet">
            <summary>Sets the shim of NLogEvent.get_Values()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvent.ValuesSetString">
            <summary>Sets the shim of NLogEvent.set_Values(String value)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimNLogEvents">
            <summary>Shim type of NLog.LogReceiverService.NLogEvents</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimNLogEvents.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimNLogEvents.#ctor(NLog.LogReceiverService.NLogEvents)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.BaseTimeUtcGet">
            <summary>Sets the shim of NLogEvents.get_BaseTimeUtc()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.BaseTimeUtcSetInt64">
            <summary>Sets the shim of NLogEvents.set_BaseTimeUtc(Int64 value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.ClientNameGet">
            <summary>Sets the shim of NLogEvents.get_ClientName()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.ClientNameSetString">
            <summary>Sets the shim of NLogEvents.set_ClientName(String value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.EventsGet">
            <summary>Sets the shim of NLogEvents.get_Events()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.EventsSetNLogEventArray">
            <summary>Sets the shim of NLogEvents.set_Events(NLogEvent[] value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.LayoutNamesGet">
            <summary>Sets the shim of NLogEvents.get_LayoutNames()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.LayoutNamesSetStringCollection">
            <summary>Sets the shim of NLogEvents.set_LayoutNames(StringCollection value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.StringsGet">
            <summary>Sets the shim of NLogEvents.get_Strings()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.StringsSetStringCollection">
            <summary>Sets the shim of NLogEvents.set_Strings(StringCollection value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.ToEventInfo">
            <summary>Sets the shim of NLogEvents.ToEventInfo()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.AllInstances.ToEventInfoString">
            <summary>Sets the shim of NLogEvents.ToEventInfo(String loggerNamePrefix)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.BaseTimeUtcGet">
            <summary>Sets the shim of NLogEvents.get_BaseTimeUtc()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.BaseTimeUtcSetInt64">
            <summary>Sets the shim of NLogEvents.set_BaseTimeUtc(Int64 value)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimNLogEvents.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimNLogEvents.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.ClientNameGet">
            <summary>Sets the shim of NLogEvents.get_ClientName()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.ClientNameSetString">
            <summary>Sets the shim of NLogEvents.set_ClientName(String value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.Constructor">
            <summary>Sets the shim of NLogEvents.NLogEvents()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.EventsGet">
            <summary>Sets the shim of NLogEvents.get_Events()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.EventsSetNLogEventArray">
            <summary>Sets the shim of NLogEvents.set_Events(NLogEvent[] value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.LayoutNamesGet">
            <summary>Sets the shim of NLogEvents.get_LayoutNames()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.LayoutNamesSetStringCollection">
            <summary>Sets the shim of NLogEvents.set_LayoutNames(StringCollection value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.StringsGet">
            <summary>Sets the shim of NLogEvents.get_Strings()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.StringsSetStringCollection">
            <summary>Sets the shim of NLogEvents.set_Strings(StringCollection value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.ToEventInfo">
            <summary>Sets the shim of NLogEvents.ToEventInfo()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimNLogEvents.ToEventInfoString">
            <summary>Sets the shim of NLogEvents.ToEventInfo(String loggerNamePrefix)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimStringCollection">
            <summary>Shim type of NLog.LogReceiverService.StringCollection</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.#ctor(NLog.LogReceiverService.StringCollection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimStringCollection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimStringCollection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.Bind(System.Collections.IList)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.Bind(System.Collections.Generic.ICollection{System.String})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.Bind(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.Bind(System.Collections.Generic.IList{System.String})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.Bind(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimStringCollection.Bind(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimStringCollection.Constructor">
            <summary>Sets the shim of StringCollection.StringCollection()</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient">
            <summary>Shim type of NLog.LogReceiverService.WcfLogReceiverClient</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.#ctor(NLog.LogReceiverService.WcfLogReceiverClient)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.Abort">
            <summary>Sets the shim of WcfLogReceiverClient.Abort()</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.Abort">
            <summary>Sets the shim of WcfLogReceiverClient.Abort()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.BeginCloseAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClient.BeginClose(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.BeginCloseTimeSpanAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClient.BeginClose(TimeSpan timeout, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.BeginOpenAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClient.BeginOpen(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.BeginOpenTimeSpanAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClient.BeginOpen(TimeSpan timeout, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.BeginProcessLogMessagesNLogEventsAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ClientCredentialsGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_ClientCredentials()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.Close">
            <summary>Sets the shim of WcfLogReceiverClient.Close()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.CloseAsync">
            <summary>Sets the shim of WcfLogReceiverClient.CloseAsync()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.CloseAsyncObject">
            <summary>Sets the shim of WcfLogReceiverClient.CloseAsync(Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.CloseCommunicationObject">
            <summary>Sets the shim of WcfLogReceiverClient.CloseCommunicationObject()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.CloseCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.add_CloseCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.CloseCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.remove_CloseCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.CloseTimeSpan">
            <summary>Sets the shim of WcfLogReceiverClient.Close(TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ClosedAddEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.add_Closed(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ClosedRemoveEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.remove_Closed(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ClosingAddEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.add_Closing(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ClosingRemoveEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.remove_Closing(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.CookieContainerGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_CookieContainer()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.CookieContainerSetCookieContainer">
            <summary>Sets the shim of WcfLogReceiverClient.set_CookieContainer(CookieContainer value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.DisplayInitializationUI">
            <summary>Sets the shim of WcfLogReceiverClient.DisplayInitializationUI()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.EndCloseIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClient.EndClose(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.EndOpenIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClient.EndOpen(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.EndProcessLogMessagesIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.EndpointGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_Endpoint()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.FaultedAddEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.add_Faulted(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.FaultedRemoveEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.remove_Faulted(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.InnerChannelGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_InnerChannel()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.Open">
            <summary>Sets the shim of WcfLogReceiverClient.Open()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.OpenAsync">
            <summary>Sets the shim of WcfLogReceiverClient.OpenAsync()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.OpenAsyncObject">
            <summary>Sets the shim of WcfLogReceiverClient.OpenAsync(Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.OpenCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.add_OpenCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.OpenCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.remove_OpenCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.OpenTimeSpan">
            <summary>Sets the shim of WcfLogReceiverClient.Open(TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.OpenedAddEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.add_Opened(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.OpenedRemoveEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.remove_Opened(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.OpeningAddEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.add_Opening(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.OpeningRemoveEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.remove_Opening(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ProcessLogMessagesAsyncNLogEvents">
            <summary>Sets the shim of WcfLogReceiverClient.ProcessLogMessagesAsync(NLogEvents events)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ProcessLogMessagesAsyncNLogEventsObject">
            <summary>Sets the shim of WcfLogReceiverClient.ProcessLogMessagesAsync(NLogEvents events, Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ProcessLogMessagesCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.add_ProcessLogMessagesCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ProcessLogMessagesCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.remove_ProcessLogMessagesCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ProxiedClientGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_ProxiedClient()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.ProxiedClientSetIWcfLogReceiverClient">
            <summary>Sets the shim of WcfLogReceiverClient.set_ProxiedClient(IWcfLogReceiverClient value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.StateGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_State()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.UseOneWayGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_UseOneWay()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.AllInstances.UseOneWaySetBoolean">
            <summary>Sets the shim of WcfLogReceiverClient.set_UseOneWay(Boolean value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.BeginCloseAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClient.BeginClose(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.BeginCloseTimeSpanAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClient.BeginClose(TimeSpan timeout, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.BeginOpenAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClient.BeginOpen(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.BeginOpenTimeSpanAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClient.BeginOpen(TimeSpan timeout, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.BeginProcessLogMessagesNLogEventsAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.Bind(NLog.LogReceiverService.IWcfLogReceiverClient)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.Bind(System.ServiceModel.ICommunicationObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ClientCredentialsGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_ClientCredentials()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.Close">
            <summary>Sets the shim of WcfLogReceiverClient.Close()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.CloseAsync">
            <summary>Sets the shim of WcfLogReceiverClient.CloseAsync()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.CloseAsyncObject">
            <summary>Sets the shim of WcfLogReceiverClient.CloseAsync(Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.CloseCommunicationObject">
            <summary>Sets the shim of WcfLogReceiverClient.CloseCommunicationObject()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.CloseCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.add_CloseCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.CloseCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.remove_CloseCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.CloseTimeSpan">
            <summary>Sets the shim of WcfLogReceiverClient.Close(TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ClosedAddEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.add_Closed(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ClosedRemoveEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.remove_Closed(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ClosingAddEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.add_Closing(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ClosingRemoveEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.remove_Closing(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ConstructorBoolean">
            <summary>Sets the shim of WcfLogReceiverClient.WcfLogReceiverClient(Boolean useOneWay)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ConstructorBooleanBindingEndpointAddress">
            <summary>Sets the shim of WcfLogReceiverClient.WcfLogReceiverClient(Boolean useOneWay, Binding binding, EndpointAddress remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ConstructorBooleanString">
            <summary>Sets the shim of WcfLogReceiverClient.WcfLogReceiverClient(Boolean useOneWay, String endpointConfigurationName)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ConstructorBooleanStringEndpointAddress">
            <summary>Sets the shim of WcfLogReceiverClient.WcfLogReceiverClient(Boolean useOneWay, String endpointConfigurationName, EndpointAddress remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ConstructorBooleanStringString">
            <summary>Sets the shim of WcfLogReceiverClient.WcfLogReceiverClient(Boolean useOneWay, String endpointConfigurationName, String remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.CookieContainerGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_CookieContainer()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.CookieContainerSetCookieContainer">
            <summary>Sets the shim of WcfLogReceiverClient.set_CookieContainer(CookieContainer value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.DisplayInitializationUI">
            <summary>Sets the shim of WcfLogReceiverClient.DisplayInitializationUI()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.EndCloseIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClient.EndClose(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.EndOpenIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClient.EndOpen(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.EndProcessLogMessagesIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.EndpointGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_Endpoint()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.FaultedAddEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.add_Faulted(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.FaultedRemoveEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.remove_Faulted(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.InnerChannelGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_InnerChannel()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.Open">
            <summary>Sets the shim of WcfLogReceiverClient.Open()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.OpenAsync">
            <summary>Sets the shim of WcfLogReceiverClient.OpenAsync()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.OpenAsyncObject">
            <summary>Sets the shim of WcfLogReceiverClient.OpenAsync(Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.OpenCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.add_OpenCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.OpenCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.remove_OpenCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.OpenTimeSpan">
            <summary>Sets the shim of WcfLogReceiverClient.Open(TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.OpenedAddEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.add_Opened(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.OpenedRemoveEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.remove_Opened(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.OpeningAddEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.add_Opening(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.OpeningRemoveEventHandler">
            <summary>Sets the shim of WcfLogReceiverClient.remove_Opening(EventHandler value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ProcessLogMessagesAsyncNLogEvents">
            <summary>Sets the shim of WcfLogReceiverClient.ProcessLogMessagesAsync(NLogEvents events)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ProcessLogMessagesAsyncNLogEventsObject">
            <summary>Sets the shim of WcfLogReceiverClient.ProcessLogMessagesAsync(NLogEvents events, Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ProcessLogMessagesCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.add_ProcessLogMessagesCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ProcessLogMessagesCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClient.remove_ProcessLogMessagesCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ProxiedClientGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_ProxiedClient()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.ProxiedClientSetIWcfLogReceiverClient">
            <summary>Sets the shim of WcfLogReceiverClient.set_ProxiedClient(IWcfLogReceiverClient value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.StateGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_State()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.UseOneWayGet">
            <summary>Sets the shim of WcfLogReceiverClient.get_UseOneWay()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClient.UseOneWaySetBoolean">
            <summary>Sets the shim of WcfLogReceiverClient.set_UseOneWay(Boolean value)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1">
            <summary>Shim type of NLog.LogReceiverService.WcfLogReceiverClientBase`1</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.#ctor(NLog.LogReceiverService.WcfLogReceiverClientBase{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.CloseAsync">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.CloseAsync()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.CloseAsyncObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.CloseAsync(Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.CloseCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.add_CloseCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.CloseCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.remove_CloseCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.CookieContainerGet">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.get_CookieContainer()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.CookieContainerSetCookieContainer">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.set_CookieContainer(CookieContainer value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.NLogLogReceiverServiceIWcfLogReceiverClientDisplayInitializationUI">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.NLog.LogReceiverService.IWcfLogReceiverClient.DisplayInitializationUI()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.NLogLogReceiverServiceIWcfLogReceiverClientget_ClientCredentials">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.NLog.LogReceiverService.IWcfLogReceiverClient.get_ClientCredentials()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.NLogLogReceiverServiceIWcfLogReceiverClientget_Endpoint">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.NLog.LogReceiverService.IWcfLogReceiverClient.get_Endpoint()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.NLogLogReceiverServiceIWcfLogReceiverClientget_InnerChannel">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.NLog.LogReceiverService.IWcfLogReceiverClient.get_InnerChannel()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OnBeginCloseObjectArrayAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnBeginClose(Object[] inValues, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OnBeginOpenObjectArrayAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnBeginOpen(Object[] inValues, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OnBeginProcessLogMessagesObjectArrayAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnBeginProcessLogMessages(Object[] inValues, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OnCloseCompletedObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnCloseCompleted(Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OnEndCloseIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnEndClose(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OnEndOpenIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnEndOpen(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OnEndProcessLogMessagesIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnEndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OnOpenCompletedObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnOpenCompleted(Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OnProcessLogMessagesCompletedObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnProcessLogMessagesCompleted(Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OpenAsync">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OpenAsync()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OpenAsyncObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OpenAsync(Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OpenCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.add_OpenCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.OpenCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.remove_OpenCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.ProcessLogMessagesAsyncNLogEvents">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.ProcessLogMessagesAsync(NLogEvents events)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.ProcessLogMessagesAsyncNLogEventsObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.ProcessLogMessagesAsync(NLogEvents events, Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.ProcessLogMessagesCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.add_ProcessLogMessagesCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.AllInstances.ProcessLogMessagesCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.remove_ProcessLogMessagesCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.Bind(NLog.LogReceiverService.IWcfLogReceiverClient)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.Bind(System.ServiceModel.ICommunicationObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.CloseAsync">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.CloseAsync()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.CloseAsyncObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.CloseAsync(Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.CloseCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.add_CloseCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.CloseCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.remove_CloseCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.Constructor">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.WcfLogReceiverClientBase`1()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.ConstructorBindingEndpointAddress">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.WcfLogReceiverClientBase`1(Binding binding, EndpointAddress remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.ConstructorString">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.WcfLogReceiverClientBase`1(String endpointConfigurationName)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.ConstructorStringEndpointAddress">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.WcfLogReceiverClientBase`1(String endpointConfigurationName, EndpointAddress remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.ConstructorStringString">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.WcfLogReceiverClientBase`1(String endpointConfigurationName, String remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.CookieContainerGet">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.get_CookieContainer()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.CookieContainerSetCookieContainer">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.set_CookieContainer(CookieContainer value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.NLogLogReceiverServiceIWcfLogReceiverClientDisplayInitializationUI">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.NLog.LogReceiverService.IWcfLogReceiverClient.DisplayInitializationUI()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.NLogLogReceiverServiceIWcfLogReceiverClientget_ClientCredentials">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.NLog.LogReceiverService.IWcfLogReceiverClient.get_ClientCredentials()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.NLogLogReceiverServiceIWcfLogReceiverClientget_Endpoint">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.NLog.LogReceiverService.IWcfLogReceiverClient.get_Endpoint()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.NLogLogReceiverServiceIWcfLogReceiverClientget_InnerChannel">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.NLog.LogReceiverService.IWcfLogReceiverClient.get_InnerChannel()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OnBeginCloseObjectArrayAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnBeginClose(Object[] inValues, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OnBeginOpenObjectArrayAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnBeginOpen(Object[] inValues, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OnBeginProcessLogMessagesObjectArrayAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnBeginProcessLogMessages(Object[] inValues, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OnCloseCompletedObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnCloseCompleted(Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OnEndCloseIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnEndClose(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OnEndOpenIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnEndOpen(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OnEndProcessLogMessagesIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnEndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OnOpenCompletedObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnOpenCompleted(Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OnProcessLogMessagesCompletedObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OnProcessLogMessagesCompleted(Object state)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OpenAsync">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OpenAsync()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OpenAsyncObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.OpenAsync(Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OpenCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.add_OpenCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.OpenCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.remove_OpenCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.ProcessLogMessagesAsyncNLogEvents">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.ProcessLogMessagesAsync(NLogEvents events)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.ProcessLogMessagesAsyncNLogEventsObject">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.ProcessLogMessagesAsync(NLogEvents events, Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.ProcessLogMessagesCompletedAddEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.add_ProcessLogMessagesCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverClientBase`1.ProcessLogMessagesCompletedRemoveEventHandlerOfAsyncCompletedEventArgs">
            <summary>Sets the shim of WcfLogReceiverClientBase`1.remove_ProcessLogMessagesCompleted(EventHandler`1&lt;AsyncCompletedEventArgs&gt; value)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient">
            <summary>Shim type of NLog.LogReceiverService.WcfLogReceiverOneWayClient</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.#ctor(NLog.LogReceiverService.WcfLogReceiverOneWayClient)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.AllInstances.BeginProcessLogMessagesNLogEventsAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverOneWayClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.AllInstances.EndProcessLogMessagesIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverOneWayClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.BeginProcessLogMessagesNLogEventsAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverOneWayClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.Bind(NLog.LogReceiverService.ILogReceiverOneWayClient)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.Bind(NLog.LogReceiverService.IWcfLogReceiverClient)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.Bind(System.ServiceModel.ICommunicationObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.Constructor">
            <summary>Sets the shim of WcfLogReceiverOneWayClient.WcfLogReceiverOneWayClient()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.ConstructorBindingEndpointAddress">
            <summary>Sets the shim of WcfLogReceiverOneWayClient.WcfLogReceiverOneWayClient(Binding binding, EndpointAddress remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.ConstructorString">
            <summary>Sets the shim of WcfLogReceiverOneWayClient.WcfLogReceiverOneWayClient(String endpointConfigurationName)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.ConstructorStringEndpointAddress">
            <summary>Sets the shim of WcfLogReceiverOneWayClient.WcfLogReceiverOneWayClient(String endpointConfigurationName, EndpointAddress remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.ConstructorStringString">
            <summary>Sets the shim of WcfLogReceiverOneWayClient.WcfLogReceiverOneWayClient(String endpointConfigurationName, String remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverOneWayClient.EndProcessLogMessagesIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverOneWayClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient">
            <summary>Shim type of NLog.LogReceiverService.WcfLogReceiverTwoWayClient</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.#ctor(NLog.LogReceiverService.WcfLogReceiverTwoWayClient)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.AllInstances.BeginProcessLogMessagesNLogEventsAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverTwoWayClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.AllInstances.EndProcessLogMessagesIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverTwoWayClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.BeginProcessLogMessagesNLogEventsAsyncCallbackObject">
            <summary>Sets the shim of WcfLogReceiverTwoWayClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.Bind(NLog.LogReceiverService.ILogReceiverTwoWayClient)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.Bind(NLog.LogReceiverService.IWcfLogReceiverClient)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.Bind(System.ServiceModel.ICommunicationObject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.Constructor">
            <summary>Sets the shim of WcfLogReceiverTwoWayClient.WcfLogReceiverTwoWayClient()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.ConstructorBindingEndpointAddress">
            <summary>Sets the shim of WcfLogReceiverTwoWayClient.WcfLogReceiverTwoWayClient(Binding binding, EndpointAddress remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.ConstructorString">
            <summary>Sets the shim of WcfLogReceiverTwoWayClient.WcfLogReceiverTwoWayClient(String endpointConfigurationName)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.ConstructorStringEndpointAddress">
            <summary>Sets the shim of WcfLogReceiverTwoWayClient.WcfLogReceiverTwoWayClient(String endpointConfigurationName, EndpointAddress remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.ConstructorStringString">
            <summary>Sets the shim of WcfLogReceiverTwoWayClient.WcfLogReceiverTwoWayClient(String endpointConfigurationName, String remoteAddress)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.ShimWcfLogReceiverTwoWayClient.EndProcessLogMessagesIAsyncResult">
            <summary>Sets the shim of WcfLogReceiverTwoWayClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubBaseLogReceiverForwardingService">
            <summary>Stub type of NLog.LogReceiverService.BaseLogReceiverForwardingService</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubBaseLogReceiverForwardingService.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubBaseLogReceiverForwardingService.#ctor(NLog.LogFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubBaseLogReceiverForwardingService.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubBaseLogReceiverForwardingService.InitializeStub">
            <summary>Initializes a new instance of type StubBaseLogReceiverForwardingService</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubBaseLogReceiverForwardingService.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubBaseLogReceiverForwardingService.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubBaseLogReceiverForwardingService.ProcessLogMessages(NLog.LogEventInfo[])">
            <summary>Sets the stub of BaseLogReceiverForwardingService.ProcessLogMessages(LogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubBaseLogReceiverForwardingService.ProcessLogMessagesLogEventInfoArray">
            <summary>Sets the stub of BaseLogReceiverForwardingService.ProcessLogMessages(LogEventInfo[] logEvents)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubILogReceiverOneWayClient">
            <summary>Stub type of NLog.LogReceiverService.ILogReceiverOneWayClient</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubILogReceiverOneWayClient.#ctor">
            <summary>Initializes a new instance of type StubILogReceiverOneWayClient</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubILogReceiverOneWayClient.BeginProcessLogMessagesNLogEventsAsyncCallbackObject">
            <summary>Sets the stub of ILogReceiverOneWayClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubILogReceiverOneWayClient.EndProcessLogMessagesIAsyncResult">
            <summary>Sets the stub of ILogReceiverOneWayClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubILogReceiverOneWayClient.NLog#LogReceiverService#ILogReceiverOneWayClient#BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>Sets the stub of ILogReceiverOneWayClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubILogReceiverOneWayClient.NLog#LogReceiverService#ILogReceiverOneWayClient#EndProcessLogMessages(System.IAsyncResult)">
            <summary>Sets the stub of ILogReceiverOneWayClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubILogReceiverOneWayServer">
            <summary>Stub type of NLog.LogReceiverService.ILogReceiverOneWayServer</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubILogReceiverOneWayServer.#ctor">
            <summary>Initializes a new instance of type StubILogReceiverOneWayServer</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubILogReceiverOneWayServer.NLog#LogReceiverService#ILogReceiverOneWayServer#ProcessLogMessages(NLog.LogReceiverService.NLogEvents)">
            <summary>Sets the stub of ILogReceiverOneWayServer.ProcessLogMessages(NLogEvents events)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubILogReceiverOneWayServer.ProcessLogMessagesNLogEvents">
            <summary>Sets the stub of ILogReceiverOneWayServer.ProcessLogMessages(NLogEvents events)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubILogReceiverServer">
            <summary>Stub type of NLog.LogReceiverService.ILogReceiverServer</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubILogReceiverServer.#ctor">
            <summary>Initializes a new instance of type StubILogReceiverServer</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubILogReceiverServer.NLog#LogReceiverService#ILogReceiverServer#ProcessLogMessages(NLog.LogReceiverService.NLogEvents)">
            <summary>Sets the stub of ILogReceiverServer.ProcessLogMessages(NLogEvents events)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubILogReceiverServer.ProcessLogMessagesNLogEvents">
            <summary>Sets the stub of ILogReceiverServer.ProcessLogMessages(NLogEvents events)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubILogReceiverTwoWayClient">
            <summary>Stub type of NLog.LogReceiverService.ILogReceiverTwoWayClient</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubILogReceiverTwoWayClient.#ctor">
            <summary>Initializes a new instance of type StubILogReceiverTwoWayClient</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubILogReceiverTwoWayClient.BeginProcessLogMessagesNLogEventsAsyncCallbackObject">
            <summary>Sets the stub of ILogReceiverTwoWayClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubILogReceiverTwoWayClient.EndProcessLogMessagesIAsyncResult">
            <summary>Sets the stub of ILogReceiverTwoWayClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubILogReceiverTwoWayClient.NLog#LogReceiverService#ILogReceiverTwoWayClient#BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>Sets the stub of ILogReceiverTwoWayClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubILogReceiverTwoWayClient.NLog#LogReceiverService#ILogReceiverTwoWayClient#EndProcessLogMessages(System.IAsyncResult)">
            <summary>Sets the stub of ILogReceiverTwoWayClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient">
            <summary>Stub type of NLog.LogReceiverService.IWcfLogReceiverClient</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.#ctor">
            <summary>Initializes a new instance of type StubIWcfLogReceiverClient</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.Abort">
            <summary>Sets the stub of ICommunicationObject.Abort()</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.AttachBackingFieldToCookieContainer">
            <summary>Attaches delegates to emulate StubIWcfLogReceiverClient.CookieContainer as a property with a backing field.</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.BeginCloseAsyncCallbackObject">
            <summary>Sets the stub of ICommunicationObject.BeginClose(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.BeginCloseTimeSpanAsyncCallbackObject">
            <summary>Sets the stub of ICommunicationObject.BeginClose(TimeSpan timeout, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.BeginOpenAsyncCallbackObject">
            <summary>Sets the stub of ICommunicationObject.BeginOpen(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.BeginOpenTimeSpanAsyncCallbackObject">
            <summary>Sets the stub of ICommunicationObject.BeginOpen(TimeSpan timeout, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.BeginProcessLogMessagesNLogEventsAsyncCallbackObject">
            <summary>Sets the stub of IWcfLogReceiverClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#ClientCredentials">
            <summary>Sets the stub of IWcfLogReceiverClient.get_ClientCredentials()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.ClientCredentialsGet">
            <summary>Sets the stub of IWcfLogReceiverClient.get_ClientCredentials()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.Close">
            <summary>Sets the stub of ICommunicationObject.Close()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.CloseAsync">
            <summary>Sets the stub of IWcfLogReceiverClient.CloseAsync()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.CloseAsyncObject">
            <summary>Sets the stub of IWcfLogReceiverClient.CloseAsync(Object userState)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.CloseTimeSpan">
            <summary>Sets the stub of ICommunicationObject.Close(TimeSpan timeout)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#CookieContainer">
            <summary>Sets the stub of IWcfLogReceiverClient.get_CookieContainer()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.CookieContainerGet">
            <summary>Sets the stub of IWcfLogReceiverClient.get_CookieContainer()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.CookieContainerSetCookieContainer">
            <summary>Sets the stub of IWcfLogReceiverClient.set_CookieContainer(CookieContainer value)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.DisplayInitializationUI">
            <summary>Sets the stub of IWcfLogReceiverClient.DisplayInitializationUI()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.EndCloseIAsyncResult">
            <summary>Sets the stub of ICommunicationObject.EndClose(IAsyncResult result)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.EndOpenIAsyncResult">
            <summary>Sets the stub of ICommunicationObject.EndOpen(IAsyncResult result)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.EndProcessLogMessagesIAsyncResult">
            <summary>Sets the stub of IWcfLogReceiverClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#Endpoint">
            <summary>Sets the stub of IWcfLogReceiverClient.get_Endpoint()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.EndpointGet">
            <summary>Sets the stub of IWcfLogReceiverClient.get_Endpoint()</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#InnerChannel">
            <summary>Sets the stub of IWcfLogReceiverClient.get_InnerChannel()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.InnerChannelGet">
            <summary>Sets the stub of IWcfLogReceiverClient.get_InnerChannel()</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>Sets the stub of IWcfLogReceiverClient.BeginProcessLogMessages(NLogEvents events, AsyncCallback callback, Object asyncState)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#CloseAsync">
            <summary>Sets the stub of IWcfLogReceiverClient.CloseAsync()</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#CloseAsync(System.Object)">
            <summary>Sets the stub of IWcfLogReceiverClient.CloseAsync(Object userState)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#DisplayInitializationUI">
            <summary>Sets the stub of IWcfLogReceiverClient.DisplayInitializationUI()</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#EndProcessLogMessages(System.IAsyncResult)">
            <summary>Sets the stub of IWcfLogReceiverClient.EndProcessLogMessages(IAsyncResult result)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#OpenAsync">
            <summary>Sets the stub of IWcfLogReceiverClient.OpenAsync()</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#OpenAsync(System.Object)">
            <summary>Sets the stub of IWcfLogReceiverClient.OpenAsync(Object userState)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#ProcessLogMessagesAsync(NLog.LogReceiverService.NLogEvents)">
            <summary>Sets the stub of IWcfLogReceiverClient.ProcessLogMessagesAsync(NLogEvents events)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.NLog#LogReceiverService#IWcfLogReceiverClient#ProcessLogMessagesAsync(NLog.LogReceiverService.NLogEvents,System.Object)">
            <summary>Sets the stub of IWcfLogReceiverClient.ProcessLogMessagesAsync(NLogEvents events, Object userState)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.Open">
            <summary>Sets the stub of ICommunicationObject.Open()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.OpenAsync">
            <summary>Sets the stub of IWcfLogReceiverClient.OpenAsync()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.OpenAsyncObject">
            <summary>Sets the stub of IWcfLogReceiverClient.OpenAsync(Object userState)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.OpenTimeSpan">
            <summary>Sets the stub of ICommunicationObject.Open(TimeSpan timeout)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.ProcessLogMessagesAsyncNLogEvents">
            <summary>Sets the stub of IWcfLogReceiverClient.ProcessLogMessagesAsync(NLogEvents events)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.ProcessLogMessagesAsyncNLogEventsObject">
            <summary>Sets the stub of IWcfLogReceiverClient.ProcessLogMessagesAsync(NLogEvents events, Object userState)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#State">
            <summary>Sets the stub of ICommunicationObject.get_State()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.StateGet">
            <summary>Sets the stub of ICommunicationObject.get_State()</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#Abort">
            <summary>Sets the stub of ICommunicationObject.Abort()</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
            <summary>Sets the stub of ICommunicationObject.BeginClose(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>Sets the stub of ICommunicationObject.BeginClose(TimeSpan timeout, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
            <summary>Sets the stub of ICommunicationObject.BeginOpen(AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>Sets the stub of ICommunicationObject.BeginOpen(TimeSpan timeout, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#Close">
            <summary>Sets the stub of ICommunicationObject.Close()</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
            <summary>Sets the stub of ICommunicationObject.Close(TimeSpan timeout)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
            <summary>Sets the stub of ICommunicationObject.EndClose(IAsyncResult result)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
            <summary>Sets the stub of ICommunicationObject.EndOpen(IAsyncResult result)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#Open">
            <summary>Sets the stub of ICommunicationObject.Open()</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubIWcfLogReceiverClient.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
            <summary>Sets the stub of ICommunicationObject.Open(TimeSpan timeout)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubLogReceiverForwardingService">
            <summary>Stub type of NLog.LogReceiverService.LogReceiverForwardingService</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubLogReceiverForwardingService.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubLogReceiverForwardingService.#ctor(NLog.LogFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubLogReceiverForwardingService.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubLogReceiverForwardingService.InitializeStub">
            <summary>Initializes a new instance of type StubLogReceiverForwardingService</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubLogReceiverForwardingService.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubLogReceiverForwardingService.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubLogReceiverForwardingService.ProcessLogMessages(NLog.LogEventInfo[])">
            <summary>Sets the stub of BaseLogReceiverForwardingService.ProcessLogMessages(LogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubLogReceiverForwardingService.ProcessLogMessagesLogEventInfoArray">
            <summary>Sets the stub of BaseLogReceiverForwardingService.ProcessLogMessages(LogEventInfo[] logEvents)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubLogReceiverOneWayForwardingService">
            <summary>Stub type of NLog.LogReceiverService.LogReceiverOneWayForwardingService</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubLogReceiverOneWayForwardingService.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubLogReceiverOneWayForwardingService.#ctor(NLog.LogFactory)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubLogReceiverOneWayForwardingService.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubLogReceiverOneWayForwardingService.InitializeStub">
            <summary>Initializes a new instance of type StubLogReceiverOneWayForwardingService</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubLogReceiverOneWayForwardingService.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubLogReceiverOneWayForwardingService.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubLogReceiverOneWayForwardingService.ProcessLogMessages(NLog.LogEventInfo[])">
            <summary>Sets the stub of BaseLogReceiverForwardingService.ProcessLogMessages(LogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubLogReceiverOneWayForwardingService.ProcessLogMessagesLogEventInfoArray">
            <summary>Sets the stub of BaseLogReceiverForwardingService.ProcessLogMessages(LogEventInfo[] logEvents)</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubNLogEvent">
            <summary>Stub type of NLog.LogReceiverService.NLogEvent</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubNLogEvent.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubNLogEvent.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubNLogEvent.InitializeStub">
            <summary>Initializes a new instance of type StubNLogEvent</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubNLogEvent.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubNLogEvent.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubNLogEvents">
            <summary>Stub type of NLog.LogReceiverService.NLogEvents</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubNLogEvents.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubNLogEvents.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubNLogEvents.InitializeStub">
            <summary>Initializes a new instance of type StubNLogEvents</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubNLogEvents.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubNLogEvents.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.LogReceiverService.Fakes.StubStringCollection">
            <summary>Stub type of NLog.LogReceiverService.StringCollection</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubStringCollection.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubStringCollection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubStringCollection.ClearItems">
            <summary>Sets the stub of Collection`1.ClearItems()</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubStringCollection.ClearItems01">
            <summary>Sets the stub of Collection`1.ClearItems()</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubStringCollection.InitializeStub">
            <summary>Initializes a new instance of type StubStringCollection</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubStringCollection.InsertItem(System.Int32,System.String)">
            <summary>Sets the stub of Collection`1.InsertItem(Int32 index, !0 item)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubStringCollection.InsertItemInt32String">
            <summary>Sets the stub of Collection`1.InsertItem(Int32 index, !0 item)</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubStringCollection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.LogReceiverService.Fakes.StubStringCollection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubStringCollection.RemoveItem(System.Int32)">
            <summary>Sets the stub of Collection`1.RemoveItem(Int32 index)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubStringCollection.RemoveItemInt32">
            <summary>Sets the stub of Collection`1.RemoveItem(Int32 index)</summary>
        </member>
        <member name="M:NLog.LogReceiverService.Fakes.StubStringCollection.SetItem(System.Int32,System.String)">
            <summary>Sets the stub of Collection`1.SetItem(Int32 index, !0 item)</summary>
        </member>
        <member name="F:NLog.LogReceiverService.Fakes.StubStringCollection.SetItemInt32String">
            <summary>Sets the stub of Collection`1.SetItem(Int32 index, !0 item)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimAsyncTaskTarget">
            <summary>Shim type of NLog.Targets.AsyncTaskTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimAsyncTaskTarget.#ctor(NLog.Targets.AsyncTaskTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.CloseTarget">
            <summary>Sets the shim of AsyncTaskTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.DisposeBoolean">
            <summary>Sets the shim of AsyncTaskTarget.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of AsyncTaskTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.TaskCancelledToken">
            <summary>Sets the shim of AsyncTaskTarget.TaskCancelledToken()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.TaskCompletionTaskObject">
            <summary>Sets the shim of AsyncTaskTarget.TaskCompletion(Task completedTask, Object continuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.TaskCreationAsyncLogEventInfo">
            <summary>Sets the shim of AsyncTaskTarget.TaskCreation(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.TaskSchedulerGet">
            <summary>Sets the shim of AsyncTaskTarget.get_TaskScheduler()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.TaskStartNextTask">
            <summary>Sets the shim of AsyncTaskTarget.TaskStartNext(Task previousTask)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.TaskTimeoutObject">
            <summary>Sets the shim of AsyncTaskTarget.TaskTimeout(Object state)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.TaskTimeoutSecondsGet">
            <summary>Sets the shim of AsyncTaskTarget.get_TaskTimeoutSeconds()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.TaskTimeoutSecondsSetInt32">
            <summary>Sets the shim of AsyncTaskTarget.set_TaskTimeoutSeconds(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of AsyncTaskTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.AllInstances._ctorb__10">
            <summary>Sets the shim of AsyncTaskTarget.&lt;.ctor&gt;b__10()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimAsyncTaskTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimAsyncTaskTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimAsyncTaskTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.CloseTarget">
            <summary>Sets the shim of AsyncTaskTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.Constructor">
            <summary>Sets the shim of AsyncTaskTarget.AsyncTaskTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.DisposeBoolean">
            <summary>Sets the shim of AsyncTaskTarget.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of AsyncTaskTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.TaskCancelledToken">
            <summary>Sets the shim of AsyncTaskTarget.TaskCancelledToken()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.TaskCompletionTaskObject">
            <summary>Sets the shim of AsyncTaskTarget.TaskCompletion(Task completedTask, Object continuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.TaskCreationAsyncLogEventInfo">
            <summary>Sets the shim of AsyncTaskTarget.TaskCreation(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.TaskSchedulerGet">
            <summary>Sets the shim of AsyncTaskTarget.get_TaskScheduler()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.TaskStartNextTask">
            <summary>Sets the shim of AsyncTaskTarget.TaskStartNext(Task previousTask)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.TaskTimeoutObject">
            <summary>Sets the shim of AsyncTaskTarget.TaskTimeout(Object state)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.TaskTimeoutSecondsGet">
            <summary>Sets the shim of AsyncTaskTarget.get_TaskTimeoutSeconds()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.TaskTimeoutSecondsSetInt32">
            <summary>Sets the shim of AsyncTaskTarget.set_TaskTimeoutSeconds(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget.WriteAsyncLogEventInfo">
            <summary>Sets the shim of AsyncTaskTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimAsyncTaskTarget._ctorb__10">
            <summary>Sets the shim of AsyncTaskTarget.&lt;.ctor&gt;b__10()</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimChainsawTarget">
            <summary>Shim type of NLog.Targets.ChainsawTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimChainsawTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimChainsawTarget.#ctor(NLog.Targets.ChainsawTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimChainsawTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimChainsawTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimChainsawTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimChainsawTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimChainsawTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimChainsawTarget.Constructor">
            <summary>Sets the shim of ChainsawTarget.ChainsawTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimChainsawTarget.ConstructorString">
            <summary>Sets the shim of ChainsawTarget.ChainsawTarget(String name)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimColoredConsoleTarget">
            <summary>Shim type of NLog.Targets.ColoredConsoleTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimColoredConsoleTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimColoredConsoleTarget.#ctor(NLog.Targets.ColoredConsoleTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.CloseTarget">
            <summary>Sets the shim of ColoredConsoleTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.DetectConsoleAvailableGet">
            <summary>Sets the shim of ColoredConsoleTarget.get_DetectConsoleAvailable()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.DetectConsoleAvailableSetBoolean">
            <summary>Sets the shim of ColoredConsoleTarget.set_DetectConsoleAvailable(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.ErrorStreamGet">
            <summary>Sets the shim of ColoredConsoleTarget.get_ErrorStream()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.ErrorStreamSetBoolean">
            <summary>Sets the shim of ColoredConsoleTarget.set_ErrorStream(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.GetMatchingRowHighlightingRuleLogEventInfo">
            <summary>Sets the shim of ColoredConsoleTarget.GetMatchingRowHighlightingRule(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.InitializeTarget">
            <summary>Sets the shim of ColoredConsoleTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.RowHighlightingRulesGet">
            <summary>Sets the shim of ColoredConsoleTarget.get_RowHighlightingRules()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.RowHighlightingRulesSetIListOfConsoleRowHighlightingRule">
            <summary>Sets the shim of ColoredConsoleTarget.set_RowHighlightingRules(IList`1&lt;ConsoleRowHighlightingRule&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.UseDefaultRowHighlightingRulesGet">
            <summary>Sets the shim of ColoredConsoleTarget.get_UseDefaultRowHighlightingRules()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.UseDefaultRowHighlightingRulesSetBoolean">
            <summary>Sets the shim of ColoredConsoleTarget.set_UseDefaultRowHighlightingRules(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.WordHighlightingRulesGet">
            <summary>Sets the shim of ColoredConsoleTarget.get_WordHighlightingRules()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.WordHighlightingRulesSetIListOfConsoleWordHighlightingRule">
            <summary>Sets the shim of ColoredConsoleTarget.set_WordHighlightingRules(IList`1&lt;ConsoleWordHighlightingRule&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of ColoredConsoleTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.AllInstances.WriteToOutputLogEventInfoString">
            <summary>Sets the shim of ColoredConsoleTarget.WriteToOutput(LogEventInfo logEvent, String message)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimColoredConsoleTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimColoredConsoleTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimColoredConsoleTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.CloseTarget">
            <summary>Sets the shim of ColoredConsoleTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.Constructor">
            <summary>Sets the shim of ColoredConsoleTarget.ColoredConsoleTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.ConstructorString">
            <summary>Sets the shim of ColoredConsoleTarget.ColoredConsoleTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.DetectConsoleAvailableGet">
            <summary>Sets the shim of ColoredConsoleTarget.get_DetectConsoleAvailable()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.DetectConsoleAvailableSetBoolean">
            <summary>Sets the shim of ColoredConsoleTarget.set_DetectConsoleAvailable(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.ErrorStreamGet">
            <summary>Sets the shim of ColoredConsoleTarget.get_ErrorStream()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.ErrorStreamSetBoolean">
            <summary>Sets the shim of ColoredConsoleTarget.set_ErrorStream(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.GetMatchingRowHighlightingRuleLogEventInfo">
            <summary>Sets the shim of ColoredConsoleTarget.GetMatchingRowHighlightingRule(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.InitializeTarget">
            <summary>Sets the shim of ColoredConsoleTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.IsColorChangeConsoleOutputColorConsoleColor">
            <summary>Sets the shim of ColoredConsoleTarget.IsColorChange(ConsoleOutputColor targetColor, ConsoleColor oldColor)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.RowHighlightingRulesGet">
            <summary>Sets the shim of ColoredConsoleTarget.get_RowHighlightingRules()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.RowHighlightingRulesSetIListOfConsoleRowHighlightingRule">
            <summary>Sets the shim of ColoredConsoleTarget.set_RowHighlightingRules(IList`1&lt;ConsoleRowHighlightingRule&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.StaticConstructor">
            <summary>Sets the shim of ColoredConsoleTarget.ColoredConsoleTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.UseDefaultRowHighlightingRulesGet">
            <summary>Sets the shim of ColoredConsoleTarget.get_UseDefaultRowHighlightingRules()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.UseDefaultRowHighlightingRulesSetBoolean">
            <summary>Sets the shim of ColoredConsoleTarget.set_UseDefaultRowHighlightingRules(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.WordHighlightingRulesGet">
            <summary>Sets the shim of ColoredConsoleTarget.get_WordHighlightingRules()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.WordHighlightingRulesSetIListOfConsoleWordHighlightingRule">
            <summary>Sets the shim of ColoredConsoleTarget.set_WordHighlightingRules(IList`1&lt;ConsoleWordHighlightingRule&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.WriteLogEventInfo">
            <summary>Sets the shim of ColoredConsoleTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimColoredConsoleTarget.WriteToOutputLogEventInfoString">
            <summary>Sets the shim of ColoredConsoleTarget.WriteToOutput(LogEventInfo logEvent, String message)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule">
            <summary>Shim type of NLog.Targets.ConsoleRowHighlightingRule</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.#ctor(NLog.Targets.ConsoleRowHighlightingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.AllInstances.BackgroundColorGet">
            <summary>Sets the shim of ConsoleRowHighlightingRule.get_BackgroundColor()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.AllInstances.BackgroundColorSetConsoleOutputColor">
            <summary>Sets the shim of ConsoleRowHighlightingRule.set_BackgroundColor(ConsoleOutputColor value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.AllInstances.CheckConditionLogEventInfo">
            <summary>Sets the shim of ConsoleRowHighlightingRule.CheckCondition(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.AllInstances.ConditionGet">
            <summary>Sets the shim of ConsoleRowHighlightingRule.get_Condition()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.AllInstances.ConditionSetConditionExpression">
            <summary>Sets the shim of ConsoleRowHighlightingRule.set_Condition(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.AllInstances.ForegroundColorGet">
            <summary>Sets the shim of ConsoleRowHighlightingRule.get_ForegroundColor()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.AllInstances.ForegroundColorSetConsoleOutputColor">
            <summary>Sets the shim of ConsoleRowHighlightingRule.set_ForegroundColor(ConsoleOutputColor value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.BackgroundColorGet">
            <summary>Sets the shim of ConsoleRowHighlightingRule.get_BackgroundColor()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.BackgroundColorSetConsoleOutputColor">
            <summary>Sets the shim of ConsoleRowHighlightingRule.set_BackgroundColor(ConsoleOutputColor value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.CheckConditionLogEventInfo">
            <summary>Sets the shim of ConsoleRowHighlightingRule.CheckCondition(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.ConditionGet">
            <summary>Sets the shim of ConsoleRowHighlightingRule.get_Condition()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.ConditionSetConditionExpression">
            <summary>Sets the shim of ConsoleRowHighlightingRule.set_Condition(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.Constructor">
            <summary>Sets the shim of ConsoleRowHighlightingRule.ConsoleRowHighlightingRule()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.ConstructorConditionExpressionConsoleOutputColorConsoleOutputColor">
            <summary>Sets the shim of ConsoleRowHighlightingRule.ConsoleRowHighlightingRule(ConditionExpression condition, ConsoleOutputColor foregroundColor, ConsoleOutputColor backgroundColor)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.DefaultGet">
            <summary>Sets the shim of ConsoleRowHighlightingRule.get_Default()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.DefaultSetConsoleRowHighlightingRule">
            <summary>Sets the shim of ConsoleRowHighlightingRule.set_Default(ConsoleRowHighlightingRule value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.ForegroundColorGet">
            <summary>Sets the shim of ConsoleRowHighlightingRule.get_ForegroundColor()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.ForegroundColorSetConsoleOutputColor">
            <summary>Sets the shim of ConsoleRowHighlightingRule.set_ForegroundColor(ConsoleOutputColor value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleRowHighlightingRule.StaticConstructor">
            <summary>Sets the shim of ConsoleRowHighlightingRule.ConsoleRowHighlightingRule()</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimConsoleTarget">
            <summary>Shim type of NLog.Targets.ConsoleTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleTarget.#ctor(NLog.Targets.ConsoleTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimConsoleTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.AllInstances.CloseTarget">
            <summary>Sets the shim of ConsoleTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.AllInstances.DetectConsoleAvailableGet">
            <summary>Sets the shim of ConsoleTarget.get_DetectConsoleAvailable()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.AllInstances.DetectConsoleAvailableSetBoolean">
            <summary>Sets the shim of ConsoleTarget.set_DetectConsoleAvailable(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.AllInstances.ErrorGet">
            <summary>Sets the shim of ConsoleTarget.get_Error()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.AllInstances.ErrorSetBoolean">
            <summary>Sets the shim of ConsoleTarget.set_Error(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.AllInstances.GetOutput">
            <summary>Sets the shim of ConsoleTarget.GetOutput()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.AllInstances.InitializeTarget">
            <summary>Sets the shim of ConsoleTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of ConsoleTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.AllInstances.WriteToOutputString">
            <summary>Sets the shim of ConsoleTarget.WriteToOutput(String textLine)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.CloseTarget">
            <summary>Sets the shim of ConsoleTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.Constructor">
            <summary>Sets the shim of ConsoleTarget.ConsoleTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.ConstructorString">
            <summary>Sets the shim of ConsoleTarget.ConsoleTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.DetectConsoleAvailableGet">
            <summary>Sets the shim of ConsoleTarget.get_DetectConsoleAvailable()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.DetectConsoleAvailableSetBoolean">
            <summary>Sets the shim of ConsoleTarget.set_DetectConsoleAvailable(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.ErrorGet">
            <summary>Sets the shim of ConsoleTarget.get_Error()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.ErrorSetBoolean">
            <summary>Sets the shim of ConsoleTarget.set_Error(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.GetOutput">
            <summary>Sets the shim of ConsoleTarget.GetOutput()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.InitializeTarget">
            <summary>Sets the shim of ConsoleTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.WriteLogEventInfo">
            <summary>Sets the shim of ConsoleTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleTarget.WriteToOutputString">
            <summary>Sets the shim of ConsoleTarget.WriteToOutput(String textLine)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule">
            <summary>Shim type of NLog.Targets.ConsoleWordHighlightingRule</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.#ctor(NLog.Targets.ConsoleWordHighlightingRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.BackgroundColorGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_BackgroundColor()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.BackgroundColorSetConsoleOutputColor">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_BackgroundColor(ConsoleOutputColor value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.CompileRegexGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_CompileRegex()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.CompileRegexSetBoolean">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_CompileRegex(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.CompiledRegexGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_CompiledRegex()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.ForegroundColorGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_ForegroundColor()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.ForegroundColorSetConsoleOutputColor">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_ForegroundColor(ConsoleOutputColor value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.GetRegexExpression">
            <summary>Sets the shim of ConsoleWordHighlightingRule.GetRegexExpression()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.GetRegexOptionsRegexOptions">
            <summary>Sets the shim of ConsoleWordHighlightingRule.GetRegexOptions(RegexOptions regexOptions)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.IgnoreCaseGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.IgnoreCaseSetBoolean">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.MatchEvaluatorMatch">
            <summary>Sets the shim of ConsoleWordHighlightingRule.MatchEvaluator(Match m)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.RegexGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_Regex()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.RegexSetString">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_Regex(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.ReplaceWithEscapeSequencesString">
            <summary>Sets the shim of ConsoleWordHighlightingRule.ReplaceWithEscapeSequences(String message)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.TextGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_Text()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.TextSetString">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_Text(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.WholeWordsGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_WholeWords()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.AllInstances.WholeWordsSetBoolean">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_WholeWords(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.BackgroundColorGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_BackgroundColor()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.BackgroundColorSetConsoleOutputColor">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_BackgroundColor(ConsoleOutputColor value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.CompileRegexGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_CompileRegex()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.CompileRegexSetBoolean">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_CompileRegex(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.CompiledRegexGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_CompiledRegex()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.Constructor">
            <summary>Sets the shim of ConsoleWordHighlightingRule.ConsoleWordHighlightingRule()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.ConstructorStringConsoleOutputColorConsoleOutputColor">
            <summary>Sets the shim of ConsoleWordHighlightingRule.ConsoleWordHighlightingRule(String text, ConsoleOutputColor foregroundColor, ConsoleOutputColor backgroundColor)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.ForegroundColorGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_ForegroundColor()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.ForegroundColorSetConsoleOutputColor">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_ForegroundColor(ConsoleOutputColor value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.GetRegexExpression">
            <summary>Sets the shim of ConsoleWordHighlightingRule.GetRegexExpression()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.GetRegexOptionsRegexOptions">
            <summary>Sets the shim of ConsoleWordHighlightingRule.GetRegexOptions(RegexOptions regexOptions)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.IgnoreCaseGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_IgnoreCase()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.IgnoreCaseSetBoolean">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.MatchEvaluatorMatch">
            <summary>Sets the shim of ConsoleWordHighlightingRule.MatchEvaluator(Match m)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.RegexGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_Regex()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.RegexSetString">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_Regex(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.ReplaceWithEscapeSequencesString">
            <summary>Sets the shim of ConsoleWordHighlightingRule.ReplaceWithEscapeSequences(String message)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.TextGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_Text()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.TextSetString">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_Text(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.WholeWordsGet">
            <summary>Sets the shim of ConsoleWordHighlightingRule.get_WholeWords()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimConsoleWordHighlightingRule.WholeWordsSetBoolean">
            <summary>Sets the shim of ConsoleWordHighlightingRule.set_WholeWords(Boolean value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDatabaseCommandInfo">
            <summary>Shim type of NLog.Targets.DatabaseCommandInfo</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseCommandInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseCommandInfo.#ctor(NLog.Targets.DatabaseCommandInfo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances.CommandTypeGet">
            <summary>Sets the shim of DatabaseCommandInfo.get_CommandType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances.CommandTypeSetCommandType">
            <summary>Sets the shim of DatabaseCommandInfo.set_CommandType(CommandType value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances.ConnectionStringGet">
            <summary>Sets the shim of DatabaseCommandInfo.get_ConnectionString()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances.ConnectionStringSetLayout">
            <summary>Sets the shim of DatabaseCommandInfo.set_ConnectionString(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances.IgnoreFailuresGet">
            <summary>Sets the shim of DatabaseCommandInfo.get_IgnoreFailures()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances.IgnoreFailuresSetBoolean">
            <summary>Sets the shim of DatabaseCommandInfo.set_IgnoreFailures(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances.ParametersGet">
            <summary>Sets the shim of DatabaseCommandInfo.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances.ParametersSetIListOfDatabaseParameterInfo">
            <summary>Sets the shim of DatabaseCommandInfo.set_Parameters(IList`1&lt;DatabaseParameterInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances.TextGet">
            <summary>Sets the shim of DatabaseCommandInfo.get_Text()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.AllInstances.TextSetLayout">
            <summary>Sets the shim of DatabaseCommandInfo.set_Text(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseCommandInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseCommandInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.CommandTypeGet">
            <summary>Sets the shim of DatabaseCommandInfo.get_CommandType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.CommandTypeSetCommandType">
            <summary>Sets the shim of DatabaseCommandInfo.set_CommandType(CommandType value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.ConnectionStringGet">
            <summary>Sets the shim of DatabaseCommandInfo.get_ConnectionString()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.ConnectionStringSetLayout">
            <summary>Sets the shim of DatabaseCommandInfo.set_ConnectionString(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.Constructor">
            <summary>Sets the shim of DatabaseCommandInfo.DatabaseCommandInfo()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.IgnoreFailuresGet">
            <summary>Sets the shim of DatabaseCommandInfo.get_IgnoreFailures()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.IgnoreFailuresSetBoolean">
            <summary>Sets the shim of DatabaseCommandInfo.set_IgnoreFailures(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.ParametersGet">
            <summary>Sets the shim of DatabaseCommandInfo.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.ParametersSetIListOfDatabaseParameterInfo">
            <summary>Sets the shim of DatabaseCommandInfo.set_Parameters(IList`1&lt;DatabaseParameterInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.TextGet">
            <summary>Sets the shim of DatabaseCommandInfo.get_Text()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseCommandInfo.TextSetLayout">
            <summary>Sets the shim of DatabaseCommandInfo.set_Text(Layout value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDatabaseParameterInfo">
            <summary>Shim type of NLog.Targets.DatabaseParameterInfo</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseParameterInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseParameterInfo.#ctor(NLog.Targets.DatabaseParameterInfo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances.LayoutGet">
            <summary>Sets the shim of DatabaseParameterInfo.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of DatabaseParameterInfo.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances.NameGet">
            <summary>Sets the shim of DatabaseParameterInfo.get_Name()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances.NameSetString">
            <summary>Sets the shim of DatabaseParameterInfo.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances.PrecisionGet">
            <summary>Sets the shim of DatabaseParameterInfo.get_Precision()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances.PrecisionSetByte">
            <summary>Sets the shim of DatabaseParameterInfo.set_Precision(Byte value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances.ScaleGet">
            <summary>Sets the shim of DatabaseParameterInfo.get_Scale()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances.ScaleSetByte">
            <summary>Sets the shim of DatabaseParameterInfo.set_Scale(Byte value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances.SizeGet">
            <summary>Sets the shim of DatabaseParameterInfo.get_Size()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.AllInstances.SizeSetInt32">
            <summary>Sets the shim of DatabaseParameterInfo.set_Size(Int32 value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseParameterInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseParameterInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.Constructor">
            <summary>Sets the shim of DatabaseParameterInfo.DatabaseParameterInfo()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.ConstructorStringLayout">
            <summary>Sets the shim of DatabaseParameterInfo.DatabaseParameterInfo(String parameterName, Layout parameterLayout)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.LayoutGet">
            <summary>Sets the shim of DatabaseParameterInfo.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.LayoutSetLayout">
            <summary>Sets the shim of DatabaseParameterInfo.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.NameGet">
            <summary>Sets the shim of DatabaseParameterInfo.get_Name()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.NameSetString">
            <summary>Sets the shim of DatabaseParameterInfo.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.PrecisionGet">
            <summary>Sets the shim of DatabaseParameterInfo.get_Precision()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.PrecisionSetByte">
            <summary>Sets the shim of DatabaseParameterInfo.set_Precision(Byte value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.ScaleGet">
            <summary>Sets the shim of DatabaseParameterInfo.get_Scale()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.ScaleSetByte">
            <summary>Sets the shim of DatabaseParameterInfo.set_Scale(Byte value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.SizeGet">
            <summary>Sets the shim of DatabaseParameterInfo.get_Size()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseParameterInfo.SizeSetInt32">
            <summary>Sets the shim of DatabaseParameterInfo.set_Size(Int32 value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDatabaseTarget">
            <summary>Shim type of NLog.Targets.DatabaseTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseTarget.#ctor(NLog.Targets.DatabaseTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.BuildConnectionStringLogEventInfo">
            <summary>Sets the shim of DatabaseTarget.BuildConnectionString(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.CloseConnection">
            <summary>Sets the shim of DatabaseTarget.CloseConnection()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.CloseTarget">
            <summary>Sets the shim of DatabaseTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.CommandTextGet">
            <summary>Sets the shim of DatabaseTarget.get_CommandText()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.CommandTextSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_CommandText(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.CommandTypeGet">
            <summary>Sets the shim of DatabaseTarget.get_CommandType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.CommandTypeSetCommandType">
            <summary>Sets the shim of DatabaseTarget.set_CommandType(CommandType value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ConnectionStringGet">
            <summary>Sets the shim of DatabaseTarget.get_ConnectionString()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ConnectionStringNameGet">
            <summary>Sets the shim of DatabaseTarget.get_ConnectionStringName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ConnectionStringNameSetString">
            <summary>Sets the shim of DatabaseTarget.set_ConnectionStringName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ConnectionStringSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_ConnectionString(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ConnectionStringsSettingsGet">
            <summary>Sets the shim of DatabaseTarget.get_ConnectionStringsSettings()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ConnectionStringsSettingsSetConnectionStringSettingsCollection">
            <summary>Sets the shim of DatabaseTarget.set_ConnectionStringsSettings(ConnectionStringSettingsCollection value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ConnectionTypeGet">
            <summary>Sets the shim of DatabaseTarget.get_ConnectionType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ConnectionTypeSetType">
            <summary>Sets the shim of DatabaseTarget.set_ConnectionType(Type value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.DBDatabaseGet">
            <summary>Sets the shim of DatabaseTarget.get_DBDatabase()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.DBDatabaseSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_DBDatabase(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.DBHostGet">
            <summary>Sets the shim of DatabaseTarget.get_DBHost()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.DBHostSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_DBHost(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.DBPasswordGet">
            <summary>Sets the shim of DatabaseTarget.get_DBPassword()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.DBPasswordSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_DBPassword(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.DBProviderGet">
            <summary>Sets the shim of DatabaseTarget.get_DBProvider()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.DBProviderSetString">
            <summary>Sets the shim of DatabaseTarget.set_DBProvider(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.DBUserNameGet">
            <summary>Sets the shim of DatabaseTarget.get_DBUserName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.DBUserNameSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_DBUserName(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.EnsureConnectionOpenString">
            <summary>Sets the shim of DatabaseTarget.EnsureConnectionOpen(String connectionString)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.InitializeTarget">
            <summary>Sets the shim of DatabaseTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.InstallConnectionStringGet">
            <summary>Sets the shim of DatabaseTarget.get_InstallConnectionString()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.InstallConnectionStringSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_InstallConnectionString(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.InstallDdlCommandsGet">
            <summary>Sets the shim of DatabaseTarget.get_InstallDdlCommands()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.InstallDdlCommandsSetIListOfDatabaseCommandInfo">
            <summary>Sets the shim of DatabaseTarget.set_InstallDdlCommands(IList`1&lt;DatabaseCommandInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.InstallInstallationContext">
            <summary>Sets the shim of DatabaseTarget.Install(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.IsInstalledInstallationContext">
            <summary>Sets the shim of DatabaseTarget.IsInstalled(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.KeepConnectionGet">
            <summary>Sets the shim of DatabaseTarget.get_KeepConnection()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.KeepConnectionSetBoolean">
            <summary>Sets the shim of DatabaseTarget.set_KeepConnection(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.OpenConnectionString">
            <summary>Sets the shim of DatabaseTarget.OpenConnection(String connectionString)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ParametersGet">
            <summary>Sets the shim of DatabaseTarget.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ParametersSetIListOfDatabaseParameterInfo">
            <summary>Sets the shim of DatabaseTarget.set_Parameters(IList`1&lt;DatabaseParameterInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ProviderFactoryGet">
            <summary>Sets the shim of DatabaseTarget.get_ProviderFactory()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.ProviderFactorySetDbProviderFactory">
            <summary>Sets the shim of DatabaseTarget.set_ProviderFactory(DbProviderFactory value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.RunInstallCommandsInstallationContextIEnumerableOfDatabaseCommandInfo">
            <summary>Sets the shim of DatabaseTarget.RunInstallCommands(InstallationContext installationContext, IEnumerable`1&lt;DatabaseCommandInfo&gt; commands)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.SetConnectionType">
            <summary>Sets the shim of DatabaseTarget.SetConnectionType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.UninstallDdlCommandsGet">
            <summary>Sets the shim of DatabaseTarget.get_UninstallDdlCommands()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.UninstallDdlCommandsSetIListOfDatabaseCommandInfo">
            <summary>Sets the shim of DatabaseTarget.set_UninstallDdlCommands(IList`1&lt;DatabaseCommandInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.UninstallInstallationContext">
            <summary>Sets the shim of DatabaseTarget.Uninstall(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.UseTransactionsGet">
            <summary>Sets the shim of DatabaseTarget.get_UseTransactions()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.UseTransactionsSetNullableOfBoolean">
            <summary>Sets the shim of DatabaseTarget.set_UseTransactions(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of DatabaseTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.WriteEventToDatabaseLogEventInfo">
            <summary>Sets the shim of DatabaseTarget.WriteEventToDatabase(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of DatabaseTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of DatabaseTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.AllInstances._Writeb__0AsyncLogEventInfo">
            <summary>Sets the shim of DatabaseTarget.&lt;Write&gt;b__0(AsyncLogEventInfo c)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseTarget.Bind(NLog.Config.IInstallable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDatabaseTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.BuildConnectionStringLogEventInfo">
            <summary>Sets the shim of DatabaseTarget.BuildConnectionString(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.CloseConnection">
            <summary>Sets the shim of DatabaseTarget.CloseConnection()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.CloseTarget">
            <summary>Sets the shim of DatabaseTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.CommandTextGet">
            <summary>Sets the shim of DatabaseTarget.get_CommandText()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.CommandTextSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_CommandText(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.CommandTypeGet">
            <summary>Sets the shim of DatabaseTarget.get_CommandType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.CommandTypeSetCommandType">
            <summary>Sets the shim of DatabaseTarget.set_CommandType(CommandType value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ConnectionStringGet">
            <summary>Sets the shim of DatabaseTarget.get_ConnectionString()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ConnectionStringNameGet">
            <summary>Sets the shim of DatabaseTarget.get_ConnectionStringName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ConnectionStringNameSetString">
            <summary>Sets the shim of DatabaseTarget.set_ConnectionStringName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ConnectionStringSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_ConnectionString(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ConnectionStringsSettingsGet">
            <summary>Sets the shim of DatabaseTarget.get_ConnectionStringsSettings()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ConnectionStringsSettingsSetConnectionStringSettingsCollection">
            <summary>Sets the shim of DatabaseTarget.set_ConnectionStringsSettings(ConnectionStringSettingsCollection value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ConnectionTypeGet">
            <summary>Sets the shim of DatabaseTarget.get_ConnectionType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ConnectionTypeSetType">
            <summary>Sets the shim of DatabaseTarget.set_ConnectionType(Type value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.Constructor">
            <summary>Sets the shim of DatabaseTarget.DatabaseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ConstructorString">
            <summary>Sets the shim of DatabaseTarget.DatabaseTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.DBDatabaseGet">
            <summary>Sets the shim of DatabaseTarget.get_DBDatabase()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.DBDatabaseSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_DBDatabase(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.DBHostGet">
            <summary>Sets the shim of DatabaseTarget.get_DBHost()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.DBHostSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_DBHost(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.DBPasswordGet">
            <summary>Sets the shim of DatabaseTarget.get_DBPassword()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.DBPasswordSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_DBPassword(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.DBProviderGet">
            <summary>Sets the shim of DatabaseTarget.get_DBProvider()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.DBProviderSetString">
            <summary>Sets the shim of DatabaseTarget.set_DBProvider(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.DBUserNameGet">
            <summary>Sets the shim of DatabaseTarget.get_DBUserName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.DBUserNameSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_DBUserName(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.EnsureConnectionOpenString">
            <summary>Sets the shim of DatabaseTarget.EnsureConnectionOpen(String connectionString)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.InitializeTarget">
            <summary>Sets the shim of DatabaseTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.InstallConnectionStringGet">
            <summary>Sets the shim of DatabaseTarget.get_InstallConnectionString()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.InstallConnectionStringSetLayout">
            <summary>Sets the shim of DatabaseTarget.set_InstallConnectionString(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.InstallDdlCommandsGet">
            <summary>Sets the shim of DatabaseTarget.get_InstallDdlCommands()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.InstallDdlCommandsSetIListOfDatabaseCommandInfo">
            <summary>Sets the shim of DatabaseTarget.set_InstallDdlCommands(IList`1&lt;DatabaseCommandInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.InstallInstallationContext">
            <summary>Sets the shim of DatabaseTarget.Install(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.IsInstalledInstallationContext">
            <summary>Sets the shim of DatabaseTarget.IsInstalled(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.KeepConnectionGet">
            <summary>Sets the shim of DatabaseTarget.get_KeepConnection()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.KeepConnectionSetBoolean">
            <summary>Sets the shim of DatabaseTarget.set_KeepConnection(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.OpenConnectionString">
            <summary>Sets the shim of DatabaseTarget.OpenConnection(String connectionString)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ParametersGet">
            <summary>Sets the shim of DatabaseTarget.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ParametersSetIListOfDatabaseParameterInfo">
            <summary>Sets the shim of DatabaseTarget.set_Parameters(IList`1&lt;DatabaseParameterInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ProviderFactoryGet">
            <summary>Sets the shim of DatabaseTarget.get_ProviderFactory()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.ProviderFactorySetDbProviderFactory">
            <summary>Sets the shim of DatabaseTarget.set_ProviderFactory(DbProviderFactory value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.RunInstallCommandsInstallationContextIEnumerableOfDatabaseCommandInfo">
            <summary>Sets the shim of DatabaseTarget.RunInstallCommands(InstallationContext installationContext, IEnumerable`1&lt;DatabaseCommandInfo&gt; commands)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.SetConnectionType">
            <summary>Sets the shim of DatabaseTarget.SetConnectionType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.StaticConstructor">
            <summary>Sets the shim of DatabaseTarget.DatabaseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.UninstallDdlCommandsGet">
            <summary>Sets the shim of DatabaseTarget.get_UninstallDdlCommands()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.UninstallDdlCommandsSetIListOfDatabaseCommandInfo">
            <summary>Sets the shim of DatabaseTarget.set_UninstallDdlCommands(IList`1&lt;DatabaseCommandInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.UninstallInstallationContext">
            <summary>Sets the shim of DatabaseTarget.Uninstall(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.UseTransactionsGet">
            <summary>Sets the shim of DatabaseTarget.get_UseTransactions()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.UseTransactionsSetNullableOfBoolean">
            <summary>Sets the shim of DatabaseTarget.set_UseTransactions(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of DatabaseTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.WriteEventToDatabaseLogEventInfo">
            <summary>Sets the shim of DatabaseTarget.WriteEventToDatabase(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of DatabaseTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget.WriteLogEventInfo">
            <summary>Sets the shim of DatabaseTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDatabaseTarget._Writeb__0AsyncLogEventInfo">
            <summary>Sets the shim of DatabaseTarget.&lt;Write&gt;b__0(AsyncLogEventInfo c)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDebugTarget">
            <summary>Shim type of NLog.Targets.DebugTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDebugTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDebugTarget.#ctor(NLog.Targets.DebugTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDebugTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.AllInstances.CounterGet">
            <summary>Sets the shim of DebugTarget.get_Counter()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.AllInstances.CounterSetInt32">
            <summary>Sets the shim of DebugTarget.set_Counter(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.AllInstances.LastMessageGet">
            <summary>Sets the shim of DebugTarget.get_LastMessage()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.AllInstances.LastMessageSetString">
            <summary>Sets the shim of DebugTarget.set_LastMessage(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of DebugTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDebugTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDebugTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDebugTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.Constructor">
            <summary>Sets the shim of DebugTarget.DebugTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.ConstructorString">
            <summary>Sets the shim of DebugTarget.DebugTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.CounterGet">
            <summary>Sets the shim of DebugTarget.get_Counter()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.CounterSetInt32">
            <summary>Sets the shim of DebugTarget.set_Counter(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.LastMessageGet">
            <summary>Sets the shim of DebugTarget.get_LastMessage()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.LastMessageSetString">
            <summary>Sets the shim of DebugTarget.set_LastMessage(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebugTarget.WriteLogEventInfo">
            <summary>Sets the shim of DebugTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDebuggerTarget">
            <summary>Shim type of NLog.Targets.DebuggerTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDebuggerTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDebuggerTarget.#ctor(NLog.Targets.DebuggerTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDebuggerTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebuggerTarget.AllInstances.CloseTarget">
            <summary>Sets the shim of DebuggerTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebuggerTarget.AllInstances.InitializeTarget">
            <summary>Sets the shim of DebuggerTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebuggerTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of DebuggerTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDebuggerTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDebuggerTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebuggerTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDebuggerTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebuggerTarget.CloseTarget">
            <summary>Sets the shim of DebuggerTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebuggerTarget.Constructor">
            <summary>Sets the shim of DebuggerTarget.DebuggerTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebuggerTarget.ConstructorString">
            <summary>Sets the shim of DebuggerTarget.DebuggerTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebuggerTarget.InitializeTarget">
            <summary>Sets the shim of DebuggerTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDebuggerTarget.WriteLogEventInfo">
            <summary>Sets the shim of DebuggerTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDefaultJsonSerializer">
            <summary>Shim type of NLog.Targets.DefaultJsonSerializer</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDefaultJsonSerializer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDefaultJsonSerializer.#ctor(NLog.Targets.DefaultJsonSerializer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimDefaultJsonSerializer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.AllInstances.SerializeObjectObject">
            <summary>Sets the shim of DefaultJsonSerializer.SerializeObject(Object value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.AllInstances.SerializeObjectObjectBooleanHashSetOfObjectInt32">
            <summary>Sets the shim of DefaultJsonSerializer.SerializeObject(Object value, Boolean escapeUnicode, HashSet`1&lt;Object&gt; objectsInPath, Int32 depth)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDefaultJsonSerializer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDefaultJsonSerializer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimDefaultJsonSerializer.Bind(NLog.Targets.IJsonSerializer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.Constructor">
            <summary>Sets the shim of DefaultJsonSerializer.DefaultJsonSerializer()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.EscapeCharCharBoolean">
            <summary>Sets the shim of DefaultJsonSerializer.EscapeChar(Char ch, Boolean escapeUnicode)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.InstanceGet">
            <summary>Sets the shim of DefaultJsonSerializer.get_Instance()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.IsNumericTypeCodeTypeCode">
            <summary>Sets the shim of DefaultJsonSerializer.IsNumericTypeCode(TypeCode objTypeCode)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.JsonStringEncodeObjectTypeCodeBooleanBooleanOut">
            <summary>Sets the shim of DefaultJsonSerializer.JsonStringEncode(Object value, TypeCode objTypeCode, Boolean escapeUnicode, Boolean&amp; encodeString)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.JsonStringEscapeStringBoolean">
            <summary>Sets the shim of DefaultJsonSerializer.JsonStringEscape(String text, Boolean escapeUnicode)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.SerializeObjectObject">
            <summary>Sets the shim of DefaultJsonSerializer.SerializeObject(Object value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.SerializeObjectObjectBooleanHashSetOfObjectInt32">
            <summary>Sets the shim of DefaultJsonSerializer.SerializeObject(Object value, Boolean escapeUnicode, HashSet`1&lt;Object&gt; objectsInPath, Int32 depth)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimDefaultJsonSerializer.StaticConstructor">
            <summary>Sets the shim of DefaultJsonSerializer.DefaultJsonSerializer()</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimEventLogTarget">
            <summary>Shim type of NLog.Targets.EventLogTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimEventLogTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimEventLogTarget.#ctor(NLog.Targets.EventLogTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.CategoryGet">
            <summary>Sets the shim of EventLogTarget.get_Category()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.CategorySetLayout">
            <summary>Sets the shim of EventLogTarget.set_Category(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.CreateEventSourceIfNeededStringBoolean">
            <summary>Sets the shim of EventLogTarget.CreateEventSourceIfNeeded(String fixedSource, Boolean alwaysThrowError)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.EntryTypeGet">
            <summary>Sets the shim of EventLogTarget.get_EntryType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.EntryTypeSetLayout">
            <summary>Sets the shim of EventLogTarget.set_EntryType(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.EventIdGet">
            <summary>Sets the shim of EventLogTarget.get_EventId()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.EventIdSetLayout">
            <summary>Sets the shim of EventLogTarget.set_EventId(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.GetEntryTypeLogEventInfo">
            <summary>Sets the shim of EventLogTarget.GetEntryType(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.GetEventLogLogEventInfo">
            <summary>Sets the shim of EventLogTarget.GetEventLog(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.GetFixedSource">
            <summary>Sets the shim of EventLogTarget.GetFixedSource()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.InitializeTarget">
            <summary>Sets the shim of EventLogTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.InstallInstallationContext">
            <summary>Sets the shim of EventLogTarget.Install(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.IsInstalledInstallationContext">
            <summary>Sets the shim of EventLogTarget.IsInstalled(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.LogGet">
            <summary>Sets the shim of EventLogTarget.get_Log()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.LogSetString">
            <summary>Sets the shim of EventLogTarget.set_Log(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.MachineNameGet">
            <summary>Sets the shim of EventLogTarget.get_MachineName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.MachineNameSetString">
            <summary>Sets the shim of EventLogTarget.set_MachineName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.MaxKilobytesGet">
            <summary>Sets the shim of EventLogTarget.get_MaxKilobytes()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.MaxKilobytesSetNullableOfInt64">
            <summary>Sets the shim of EventLogTarget.set_MaxKilobytes(Nullable`1&lt;Int64&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.MaxMessageLengthGet">
            <summary>Sets the shim of EventLogTarget.get_MaxMessageLength()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.MaxMessageLengthSetInt32">
            <summary>Sets the shim of EventLogTarget.set_MaxMessageLength(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.OnOverflowGet">
            <summary>Sets the shim of EventLogTarget.get_OnOverflow()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.OnOverflowSetEventLogTargetOverflowAction">
            <summary>Sets the shim of EventLogTarget.set_OnOverflow(EventLogTargetOverflowAction value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.SourceGet">
            <summary>Sets the shim of EventLogTarget.get_Source()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.SourceSetLayout">
            <summary>Sets the shim of EventLogTarget.set_Source(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.UninstallInstallationContext">
            <summary>Sets the shim of EventLogTarget.Uninstall(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of EventLogTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimEventLogTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimEventLogTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimEventLogTarget.Bind(NLog.Config.IInstallable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimEventLogTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.CategoryGet">
            <summary>Sets the shim of EventLogTarget.get_Category()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.CategorySetLayout">
            <summary>Sets the shim of EventLogTarget.set_Category(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.Constructor">
            <summary>Sets the shim of EventLogTarget.EventLogTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.ConstructorIAppDomain">
            <summary>Sets the shim of EventLogTarget.EventLogTarget(IAppDomain appDomain)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.ConstructorString">
            <summary>Sets the shim of EventLogTarget.EventLogTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.CreateEventSourceIfNeededStringBoolean">
            <summary>Sets the shim of EventLogTarget.CreateEventSourceIfNeeded(String fixedSource, Boolean alwaysThrowError)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.EntryTypeGet">
            <summary>Sets the shim of EventLogTarget.get_EntryType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.EntryTypeSetLayout">
            <summary>Sets the shim of EventLogTarget.set_EntryType(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.EventIdGet">
            <summary>Sets the shim of EventLogTarget.get_EventId()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.EventIdSetLayout">
            <summary>Sets the shim of EventLogTarget.set_EventId(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.GetEntryTypeLogEventInfo">
            <summary>Sets the shim of EventLogTarget.GetEntryType(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.GetEventLogLogEventInfo">
            <summary>Sets the shim of EventLogTarget.GetEventLog(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.GetFixedSource">
            <summary>Sets the shim of EventLogTarget.GetFixedSource()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.InitializeTarget">
            <summary>Sets the shim of EventLogTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.InstallInstallationContext">
            <summary>Sets the shim of EventLogTarget.Install(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.IsInstalledInstallationContext">
            <summary>Sets the shim of EventLogTarget.IsInstalled(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.LogGet">
            <summary>Sets the shim of EventLogTarget.get_Log()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.LogSetString">
            <summary>Sets the shim of EventLogTarget.set_Log(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.MachineNameGet">
            <summary>Sets the shim of EventLogTarget.get_MachineName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.MachineNameSetString">
            <summary>Sets the shim of EventLogTarget.set_MachineName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.MaxKilobytesGet">
            <summary>Sets the shim of EventLogTarget.get_MaxKilobytes()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.MaxKilobytesSetNullableOfInt64">
            <summary>Sets the shim of EventLogTarget.set_MaxKilobytes(Nullable`1&lt;Int64&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.MaxMessageLengthGet">
            <summary>Sets the shim of EventLogTarget.get_MaxMessageLength()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.MaxMessageLengthSetInt32">
            <summary>Sets the shim of EventLogTarget.set_MaxMessageLength(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.OnOverflowGet">
            <summary>Sets the shim of EventLogTarget.get_OnOverflow()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.OnOverflowSetEventLogTargetOverflowAction">
            <summary>Sets the shim of EventLogTarget.set_OnOverflow(EventLogTargetOverflowAction value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.SourceGet">
            <summary>Sets the shim of EventLogTarget.get_Source()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.SourceSetLayout">
            <summary>Sets the shim of EventLogTarget.set_Source(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.UninstallInstallationContext">
            <summary>Sets the shim of EventLogTarget.Uninstall(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimEventLogTarget.WriteLogEventInfo">
            <summary>Sets the shim of EventLogTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimFileTarget">
            <summary>Shim type of NLog.Targets.FileTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimFileTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimFileTarget.#ctor(NLog.Targets.FileTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimFileTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveAboveSizeGet">
            <summary>Sets the shim of FileTarget.get_ArchiveAboveSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveAboveSizeSetInt64">
            <summary>Sets the shim of FileTarget.set_ArchiveAboveSize(Int64 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveByDateAndSequenceStringStringLogEventInfo">
            <summary>Sets the shim of FileTarget.ArchiveByDateAndSequence(String fileName, String pattern, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveByDateStringStringLogEventInfo">
            <summary>Sets the shim of FileTarget.ArchiveByDate(String fileName, String pattern, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveBySequenceStringString">
            <summary>Sets the shim of FileTarget.ArchiveBySequence(String fileName, String pattern)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveDateFormatGet">
            <summary>Sets the shim of FileTarget.get_ArchiveDateFormat()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveDateFormatSetString">
            <summary>Sets the shim of FileTarget.set_ArchiveDateFormat(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveEveryGet">
            <summary>Sets the shim of FileTarget.get_ArchiveEvery()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveEverySetFileArchivePeriod">
            <summary>Sets the shim of FileTarget.set_ArchiveEvery(FileArchivePeriod value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveFileKindGet">
            <summary>Sets the shim of FileTarget.get_ArchiveFileKind()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveFileKindSetFilePathKind">
            <summary>Sets the shim of FileTarget.set_ArchiveFileKind(FilePathKind value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveFileNameGet">
            <summary>Sets the shim of FileTarget.get_ArchiveFileName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveFileNameSetLayout">
            <summary>Sets the shim of FileTarget.set_ArchiveFileName(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveFileStringString">
            <summary>Sets the shim of FileTarget.ArchiveFile(String fileName, String archiveFileName)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveNumberingGet">
            <summary>Sets the shim of FileTarget.get_ArchiveNumbering()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveNumberingSetArchiveNumberingMode">
            <summary>Sets the shim of FileTarget.set_ArchiveNumbering(ArchiveNumberingMode value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveOldFileOnStartupGet">
            <summary>Sets the shim of FileTarget.get_ArchiveOldFileOnStartup()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ArchiveOldFileOnStartupSetBoolean">
            <summary>Sets the shim of FileTarget.set_ArchiveOldFileOnStartup(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.AutoClosingTimerCallbackObjectEventArgs">
            <summary>Sets the shim of FileTarget.AutoClosingTimerCallback(Object sender, EventArgs state)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.AutoFlushGet">
            <summary>Sets the shim of FileTarget.get_AutoFlush()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.AutoFlushSetBoolean">
            <summary>Sets the shim of FileTarget.set_AutoFlush(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.BufferSizeGet">
            <summary>Sets the shim of FileTarget.get_BufferSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.BufferSizeSetInt32">
            <summary>Sets the shim of FileTarget.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.CaptureLastWriteTimeNLogInternalFileAppendersICreateFileParametersget">
            <summary>Sets the shim of FileTarget.NLog.Internal.FileAppenders.ICreateFileParameters.get_CaptureLastWriteTime()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.CleanupFileNameGet">
            <summary>Sets the shim of FileTarget.get_CleanupFileName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.CleanupFileNameSetBoolean">
            <summary>Sets the shim of FileTarget.set_CleanupFileName(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.CleanupInitializedFiles">
            <summary>Sets the shim of FileTarget.CleanupInitializedFiles()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.CleanupInitializedFilesDateTime">
            <summary>Sets the shim of FileTarget.CleanupInitializedFiles(DateTime cleanupThreshold)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.CloseTarget">
            <summary>Sets the shim of FileTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ConcurrentWriteAttemptDelayGet">
            <summary>Sets the shim of FileTarget.get_ConcurrentWriteAttemptDelay()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ConcurrentWriteAttemptDelaySetInt32">
            <summary>Sets the shim of FileTarget.set_ConcurrentWriteAttemptDelay(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ConcurrentWriteAttemptsGet">
            <summary>Sets the shim of FileTarget.get_ConcurrentWriteAttempts()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ConcurrentWriteAttemptsSetInt32">
            <summary>Sets the shim of FileTarget.set_ConcurrentWriteAttempts(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ConcurrentWritesGet">
            <summary>Sets the shim of FileTarget.get_ConcurrentWrites()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ConcurrentWritesSetBoolean">
            <summary>Sets the shim of FileTarget.set_ConcurrentWrites(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.CreateDirsGet">
            <summary>Sets the shim of FileTarget.get_CreateDirs()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.CreateDirsSetBoolean">
            <summary>Sets the shim of FileTarget.set_CreateDirs(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.DeleteOldDateArchivesString">
            <summary>Sets the shim of FileTarget.DeleteOldDateArchives(String pattern)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.DeleteOldFileOnStartupGet">
            <summary>Sets the shim of FileTarget.get_DeleteOldFileOnStartup()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.DeleteOldFileOnStartupSetBoolean">
            <summary>Sets the shim of FileTarget.set_DeleteOldFileOnStartup(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.DiscardAllGet">
            <summary>Sets the shim of FileTarget.get_DiscardAll()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.DiscardAllSetBoolean">
            <summary>Sets the shim of FileTarget.set_DiscardAll(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.DoAutoArchiveStringLogEventInfo">
            <summary>Sets the shim of FileTarget.DoAutoArchive(String fileName, LogEventInfo eventInfo)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.EnableArchiveFileCompressionGet">
            <summary>Sets the shim of FileTarget.get_EnableArchiveFileCompression()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.EnableArchiveFileCompressionSetBoolean">
            <summary>Sets the shim of FileTarget.set_EnableArchiveFileCompression(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.EnableFileDeleteGet">
            <summary>Sets the shim of FileTarget.get_EnableFileDelete()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.EnableFileDeleteSetBoolean">
            <summary>Sets the shim of FileTarget.set_EnableFileDelete(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.EnsureArchiveCountListOfString">
            <summary>Sets the shim of FileTarget.EnsureArchiveCount(List`1&lt;String&gt; oldArchiveFileNames)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.FileAttributesGet">
            <summary>Sets the shim of FileTarget.get_FileAttributes()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.FileAttributesSetWin32FileAttributes">
            <summary>Sets the shim of FileTarget.set_FileAttributes(Win32FileAttributes value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.FileNameGet">
            <summary>Sets the shim of FileTarget.get_FileName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.FileNameKindGet">
            <summary>Sets the shim of FileTarget.get_FileNameKind()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.FileNameKindSetFilePathKind">
            <summary>Sets the shim of FileTarget.set_FileNameKind(FilePathKind value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.FileNameSetLayout">
            <summary>Sets the shim of FileTarget.set_FileName(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.FinalizeFileStringBoolean">
            <summary>Sets the shim of FileTarget.FinalizeFile(String fileName, Boolean isArchiving)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of FileTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ForceManagedGet">
            <summary>Sets the shim of FileTarget.get_ForceManaged()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ForceManagedSetBoolean">
            <summary>Sets the shim of FileTarget.set_ForceManaged(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ForceMutexConcurrentWritesGet">
            <summary>Sets the shim of FileTarget.get_ForceMutexConcurrentWrites()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ForceMutexConcurrentWritesSetBoolean">
            <summary>Sets the shim of FileTarget.set_ForceMutexConcurrentWrites(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetArchiveDateFormatStringString">
            <summary>Sets the shim of FileTarget.GetArchiveDateFormatString(String defaultFormat)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetArchiveDateStringLogEventInfo">
            <summary>Sets the shim of FileTarget.GetArchiveDate(String fileName, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetArchiveFileNameBasedOnFileSizeStringInt32">
            <summary>Sets the shim of FileTarget.GetArchiveFileNameBasedOnFileSize(String fileName, Int32 upcomingWriteSize)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetArchiveFileNameBasedOnTimeStringLogEventInfo">
            <summary>Sets the shim of FileTarget.GetArchiveFileNameBasedOnTime(String fileName, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetArchiveFileNamePatternStringLogEventInfo">
            <summary>Sets the shim of FileTarget.GetArchiveFileNamePattern(String fileName, LogEventInfo eventInfo)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetArchiveFileNameStringLogEventInfoInt32">
            <summary>Sets the shim of FileTarget.GetArchiveFileName(String fileName, LogEventInfo ev, Int32 upcomingWriteSize)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetBytesToWriteLogEventInfo">
            <summary>Sets the shim of FileTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of FileTarget.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetFullFileNameLogEventInfo">
            <summary>Sets the shim of FileTarget.GetFullFileName(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetLayoutBytesLayout">
            <summary>Sets the shim of FileTarget.GetLayoutBytes(Layout layout)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetMemoryStreamInitialSizeInt32Int32">
            <summary>Sets the shim of FileTarget.GetMemoryStreamInitialSize(Int32 eventsCount, Int32 firstEventSize)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.GetPotentialFileForArchivingString">
            <summary>Sets the shim of FileTarget.GetPotentialFileForArchiving(String fileName)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.InitializeFileStringLogEventInfoBoolean">
            <summary>Sets the shim of FileTarget.InitializeFile(String fileName, LogEventInfo logEvent, Boolean justData)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.InitializeTarget">
            <summary>Sets the shim of FileTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.IsArchivingEnabled">
            <summary>Sets the shim of FileTarget.IsArchivingEnabled()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.KeepFileOpenGet">
            <summary>Sets the shim of FileTarget.get_KeepFileOpen()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.KeepFileOpenSetBoolean">
            <summary>Sets the shim of FileTarget.set_KeepFileOpen(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.LineEndingGet">
            <summary>Sets the shim of FileTarget.get_LineEnding()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.LineEndingSetLineEndingMode">
            <summary>Sets the shim of FileTarget.set_LineEnding(LineEndingMode value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.MaxArchiveFilesGet">
            <summary>Sets the shim of FileTarget.get_MaxArchiveFiles()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.MaxArchiveFilesSetInt32">
            <summary>Sets the shim of FileTarget.set_MaxArchiveFiles(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.NetworkWritesGet">
            <summary>Sets the shim of FileTarget.get_NetworkWrites()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.NetworkWritesSetBoolean">
            <summary>Sets the shim of FileTarget.set_NetworkWrites(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.NewLineCharsGet">
            <summary>Sets the shim of FileTarget.get_NewLineChars()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.OpenFileCacheSizeGet">
            <summary>Sets the shim of FileTarget.get_OpenFileCacheSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.OpenFileCacheSizeSetInt32">
            <summary>Sets the shim of FileTarget.set_OpenFileCacheSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.OpenFileCacheTimeoutGet">
            <summary>Sets the shim of FileTarget.get_OpenFileCacheTimeout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.OpenFileCacheTimeoutSetInt32">
            <summary>Sets the shim of FileTarget.set_OpenFileCacheTimeout(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.PreviousLogOverlappedPeriodLogEventInfoDateTime">
            <summary>Sets the shim of FileTarget.PreviousLogOverlappedPeriod(LogEventInfo logEvent, DateTime lastWrite)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ProcessLogEventLogEventInfoStringArraySegmentOfByte">
            <summary>Sets the shim of FileTarget.ProcessLogEvent(LogEventInfo logEvent, String fileName, ArraySegment`1&lt;Byte&gt; bytesToWrite)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ProcessOnStartupStringLogEventInfo">
            <summary>Sets the shim of FileTarget.ProcessOnStartup(String fileName, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.RefreshArchiveFilePatternToWatch">
            <summary>Sets the shim of FileTarget.RefreshArchiveFilePatternToWatch()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.RefreshFileArchive">
            <summary>Sets the shim of FileTarget.RefreshFileArchive()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of FileTarget.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ReplaceFileContentStringArraySegmentOfByteBoolean">
            <summary>Sets the shim of FileTarget.ReplaceFileContent(String fileName, ArraySegment`1&lt;Byte&gt; bytes, Boolean firstAttempt)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ReplaceFileContentsOnEachWriteGet">
            <summary>Sets the shim of FileTarget.get_ReplaceFileContentsOnEachWrite()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ReplaceFileContentsOnEachWriteSetBoolean">
            <summary>Sets the shim of FileTarget.set_ReplaceFileContentsOnEachWrite(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.RollArchivesForwardStringStringInt32">
            <summary>Sets the shim of FileTarget.RollArchivesForward(String fileName, String pattern, Int32 archiveNumber)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.ShouldDeleteOldArchives">
            <summary>Sets the shim of FileTarget.ShouldDeleteOldArchives()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.TransformBytesByteArray">
            <summary>Sets the shim of FileTarget.TransformBytes(Byte[] value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.TryArchiveFileStringLogEventInfoInt32">
            <summary>Sets the shim of FileTarget.TryArchiveFile(String fileName, LogEventInfo ev, Int32 upcomingWriteSize)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of FileTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.WriteFooterOnArchivingOnlyGet">
            <summary>Sets the shim of FileTarget.get_WriteFooterOnArchivingOnly()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.WriteFooterOnArchivingOnlySetBoolean">
            <summary>Sets the shim of FileTarget.set_WriteFooterOnArchivingOnly(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.WriteFooterString">
            <summary>Sets the shim of FileTarget.WriteFooter(String fileName)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of FileTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of FileTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.WriteToFileStringLogEventInfoArraySegmentOfByteBoolean">
            <summary>Sets the shim of FileTarget.WriteToFile(String fileName, LogEventInfo logEvent, ArraySegment`1&lt;Byte&gt; bytes, Boolean justData)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances._InitializeTargetb__2Object">
            <summary>Sets the shim of FileTarget.&lt;InitializeTarget&gt;b__2(Object state)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances._Writeb__4AsyncLogEventInfo">
            <summary>Sets the shim of FileTarget.&lt;Write&gt;b__4(AsyncLogEventInfo c)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.maxLogFilenamesGet">
            <summary>Sets the shim of FileTarget.get_maxLogFilenames()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AllInstances.maxLogFilenamesSetInt32">
            <summary>Sets the shim of FileTarget.set_maxLogFilenames(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveAboveSizeGet">
            <summary>Sets the shim of FileTarget.get_ArchiveAboveSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveAboveSizeSetInt64">
            <summary>Sets the shim of FileTarget.set_ArchiveAboveSize(Int64 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveByDateAndSequenceStringStringLogEventInfo">
            <summary>Sets the shim of FileTarget.ArchiveByDateAndSequence(String fileName, String pattern, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveByDateStringStringLogEventInfo">
            <summary>Sets the shim of FileTarget.ArchiveByDate(String fileName, String pattern, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveBySequenceStringString">
            <summary>Sets the shim of FileTarget.ArchiveBySequence(String fileName, String pattern)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveDateFormatGet">
            <summary>Sets the shim of FileTarget.get_ArchiveDateFormat()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveDateFormatSetString">
            <summary>Sets the shim of FileTarget.set_ArchiveDateFormat(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveEveryGet">
            <summary>Sets the shim of FileTarget.get_ArchiveEvery()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveEverySetFileArchivePeriod">
            <summary>Sets the shim of FileTarget.set_ArchiveEvery(FileArchivePeriod value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveFileKindGet">
            <summary>Sets the shim of FileTarget.get_ArchiveFileKind()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveFileKindSetFilePathKind">
            <summary>Sets the shim of FileTarget.set_ArchiveFileKind(FilePathKind value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveFileNameGet">
            <summary>Sets the shim of FileTarget.get_ArchiveFileName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveFileNameSetLayout">
            <summary>Sets the shim of FileTarget.set_ArchiveFileName(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveFileStringString">
            <summary>Sets the shim of FileTarget.ArchiveFile(String fileName, String archiveFileName)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveNumberingGet">
            <summary>Sets the shim of FileTarget.get_ArchiveNumbering()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveNumberingSetArchiveNumberingMode">
            <summary>Sets the shim of FileTarget.set_ArchiveNumbering(ArchiveNumberingMode value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveOldFileOnStartupGet">
            <summary>Sets the shim of FileTarget.get_ArchiveOldFileOnStartup()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ArchiveOldFileOnStartupSetBoolean">
            <summary>Sets the shim of FileTarget.set_ArchiveOldFileOnStartup(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AutoClosingTimerCallbackObjectEventArgs">
            <summary>Sets the shim of FileTarget.AutoClosingTimerCallback(Object sender, EventArgs state)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AutoFlushGet">
            <summary>Sets the shim of FileTarget.get_AutoFlush()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.AutoFlushSetBoolean">
            <summary>Sets the shim of FileTarget.set_AutoFlush(Boolean value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimFileTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimFileTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimFileTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.BufferSizeGet">
            <summary>Sets the shim of FileTarget.get_BufferSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.BufferSizeSetInt32">
            <summary>Sets the shim of FileTarget.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.CalculateNextWeekdayDateTimeDayOfWeek">
            <summary>Sets the shim of FileTarget.CalculateNextWeekday(DateTime previousLogEventTimestamp, DayOfWeek dayOfWeek)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.CaptureLastWriteTimeNLogInternalFileAppendersICreateFileParametersget">
            <summary>Sets the shim of FileTarget.NLog.Internal.FileAppenders.ICreateFileParameters.get_CaptureLastWriteTime()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.CleanupFileNameGet">
            <summary>Sets the shim of FileTarget.get_CleanupFileName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.CleanupFileNameSetBoolean">
            <summary>Sets the shim of FileTarget.set_CleanupFileName(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.CleanupInitializedFiles">
            <summary>Sets the shim of FileTarget.CleanupInitializedFiles()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.CleanupInitializedFilesDateTime">
            <summary>Sets the shim of FileTarget.CleanupInitializedFiles(DateTime cleanupThreshold)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.CloseTarget">
            <summary>Sets the shim of FileTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ConcurrentWriteAttemptDelayGet">
            <summary>Sets the shim of FileTarget.get_ConcurrentWriteAttemptDelay()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ConcurrentWriteAttemptDelaySetInt32">
            <summary>Sets the shim of FileTarget.set_ConcurrentWriteAttemptDelay(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ConcurrentWriteAttemptsGet">
            <summary>Sets the shim of FileTarget.get_ConcurrentWriteAttempts()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ConcurrentWriteAttemptsSetInt32">
            <summary>Sets the shim of FileTarget.set_ConcurrentWriteAttempts(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ConcurrentWritesGet">
            <summary>Sets the shim of FileTarget.get_ConcurrentWrites()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ConcurrentWritesSetBoolean">
            <summary>Sets the shim of FileTarget.set_ConcurrentWrites(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.Constructor">
            <summary>Sets the shim of FileTarget.FileTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ConstructorString">
            <summary>Sets the shim of FileTarget.FileTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ContainsFileNamePatternString">
            <summary>Sets the shim of FileTarget.ContainsFileNamePattern(String fileName)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.CreateDirsGet">
            <summary>Sets the shim of FileTarget.get_CreateDirs()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.CreateDirsSetBoolean">
            <summary>Sets the shim of FileTarget.set_CreateDirs(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.DeleteAndWaitForFileDeleteString">
            <summary>Sets the shim of FileTarget.DeleteAndWaitForFileDelete(String fileName)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.DeleteOldArchiveFileString">
            <summary>Sets the shim of FileTarget.DeleteOldArchiveFile(String fileName)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.DeleteOldDateArchivesString">
            <summary>Sets the shim of FileTarget.DeleteOldDateArchives(String pattern)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.DeleteOldFileOnStartupGet">
            <summary>Sets the shim of FileTarget.get_DeleteOldFileOnStartup()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.DeleteOldFileOnStartupSetBoolean">
            <summary>Sets the shim of FileTarget.set_DeleteOldFileOnStartup(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.DiscardAllGet">
            <summary>Sets the shim of FileTarget.get_DiscardAll()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.DiscardAllSetBoolean">
            <summary>Sets the shim of FileTarget.set_DiscardAll(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.DoAutoArchiveStringLogEventInfo">
            <summary>Sets the shim of FileTarget.DoAutoArchive(String fileName, LogEventInfo eventInfo)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.EnableArchiveFileCompressionGet">
            <summary>Sets the shim of FileTarget.get_EnableArchiveFileCompression()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.EnableArchiveFileCompressionSetBoolean">
            <summary>Sets the shim of FileTarget.set_EnableArchiveFileCompression(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.EnableFileDeleteGet">
            <summary>Sets the shim of FileTarget.get_EnableFileDelete()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.EnableFileDeleteSetBoolean">
            <summary>Sets the shim of FileTarget.set_EnableFileDelete(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.EnsureArchiveCountListOfString">
            <summary>Sets the shim of FileTarget.EnsureArchiveCount(List`1&lt;String&gt; oldArchiveFileNames)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.FileAttributesGet">
            <summary>Sets the shim of FileTarget.get_FileAttributes()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.FileAttributesSetWin32FileAttributes">
            <summary>Sets the shim of FileTarget.set_FileAttributes(Win32FileAttributes value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.FileCompressorGet">
            <summary>Sets the shim of FileTarget.get_FileCompressor()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.FileCompressorSetIFileCompressor">
            <summary>Sets the shim of FileTarget.set_FileCompressor(IFileCompressor value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.FileNameGet">
            <summary>Sets the shim of FileTarget.get_FileName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.FileNameKindGet">
            <summary>Sets the shim of FileTarget.get_FileNameKind()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.FileNameKindSetFilePathKind">
            <summary>Sets the shim of FileTarget.set_FileNameKind(FilePathKind value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.FileNameSetLayout">
            <summary>Sets the shim of FileTarget.set_FileName(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.FinalizeFileStringBoolean">
            <summary>Sets the shim of FileTarget.FinalizeFile(String fileName, Boolean isArchiving)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of FileTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ForceManagedGet">
            <summary>Sets the shim of FileTarget.get_ForceManaged()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ForceManagedSetBoolean">
            <summary>Sets the shim of FileTarget.set_ForceManaged(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ForceMutexConcurrentWritesGet">
            <summary>Sets the shim of FileTarget.get_ForceMutexConcurrentWrites()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ForceMutexConcurrentWritesSetBoolean">
            <summary>Sets the shim of FileTarget.set_ForceMutexConcurrentWrites(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetArchiveDateFormatStringString">
            <summary>Sets the shim of FileTarget.GetArchiveDateFormatString(String defaultFormat)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetArchiveDateStringLogEventInfo">
            <summary>Sets the shim of FileTarget.GetArchiveDate(String fileName, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetArchiveFileNameBasedOnFileSizeStringInt32">
            <summary>Sets the shim of FileTarget.GetArchiveFileNameBasedOnFileSize(String fileName, Int32 upcomingWriteSize)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetArchiveFileNameBasedOnTimeStringLogEventInfo">
            <summary>Sets the shim of FileTarget.GetArchiveFileNameBasedOnTime(String fileName, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetArchiveFileNamePatternStringLogEventInfo">
            <summary>Sets the shim of FileTarget.GetArchiveFileNamePattern(String fileName, LogEventInfo eventInfo)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetArchiveFileNameStringLogEventInfoInt32">
            <summary>Sets the shim of FileTarget.GetArchiveFileName(String fileName, LogEventInfo ev, Int32 upcomingWriteSize)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetBytesToWriteLogEventInfo">
            <summary>Sets the shim of FileTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetFilesDirectoryInfoString">
            <summary>Sets the shim of FileTarget.GetFiles(DirectoryInfo directoryInfo, String fileNameMask)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetFormattedMessageLogEventInfo">
            <summary>Sets the shim of FileTarget.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetFullFileNameLogEventInfo">
            <summary>Sets the shim of FileTarget.GetFullFileName(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetLayoutBytesLayout">
            <summary>Sets the shim of FileTarget.GetLayoutBytes(Layout layout)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetMemoryStreamInitialSizeInt32Int32">
            <summary>Sets the shim of FileTarget.GetMemoryStreamInitialSize(Int32 eventsCount, Int32 firstEventSize)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.GetPotentialFileForArchivingString">
            <summary>Sets the shim of FileTarget.GetPotentialFileForArchiving(String fileName)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.InitializeFileStringLogEventInfoBoolean">
            <summary>Sets the shim of FileTarget.InitializeFile(String fileName, LogEventInfo logEvent, Boolean justData)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.InitializeTarget">
            <summary>Sets the shim of FileTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.IsArchivingEnabled">
            <summary>Sets the shim of FileTarget.IsArchivingEnabled()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.KeepFileOpenGet">
            <summary>Sets the shim of FileTarget.get_KeepFileOpen()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.KeepFileOpenSetBoolean">
            <summary>Sets the shim of FileTarget.set_KeepFileOpen(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.LineEndingGet">
            <summary>Sets the shim of FileTarget.get_LineEnding()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.LineEndingSetLineEndingMode">
            <summary>Sets the shim of FileTarget.set_LineEnding(LineEndingMode value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.MaxArchiveFilesGet">
            <summary>Sets the shim of FileTarget.get_MaxArchiveFiles()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.MaxArchiveFilesSetInt32">
            <summary>Sets the shim of FileTarget.set_MaxArchiveFiles(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.NetworkWritesGet">
            <summary>Sets the shim of FileTarget.get_NetworkWrites()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.NetworkWritesSetBoolean">
            <summary>Sets the shim of FileTarget.set_NetworkWrites(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.NewLineCharsGet">
            <summary>Sets the shim of FileTarget.get_NewLineChars()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.OpenFileCacheSizeGet">
            <summary>Sets the shim of FileTarget.get_OpenFileCacheSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.OpenFileCacheSizeSetInt32">
            <summary>Sets the shim of FileTarget.set_OpenFileCacheSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.OpenFileCacheTimeoutGet">
            <summary>Sets the shim of FileTarget.get_OpenFileCacheTimeout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.OpenFileCacheTimeoutSetInt32">
            <summary>Sets the shim of FileTarget.set_OpenFileCacheTimeout(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.PreviousLogOverlappedPeriodLogEventInfoDateTime">
            <summary>Sets the shim of FileTarget.PreviousLogOverlappedPeriod(LogEventInfo logEvent, DateTime lastWrite)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ProcessLogEventLogEventInfoStringArraySegmentOfByte">
            <summary>Sets the shim of FileTarget.ProcessLogEvent(LogEventInfo logEvent, String fileName, ArraySegment`1&lt;Byte&gt; bytesToWrite)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ProcessOnStartupStringLogEventInfo">
            <summary>Sets the shim of FileTarget.ProcessOnStartup(String fileName, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.RefreshArchiveFilePatternToWatch">
            <summary>Sets the shim of FileTarget.RefreshArchiveFilePatternToWatch()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.RefreshFileArchive">
            <summary>Sets the shim of FileTarget.RefreshFileArchive()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the shim of FileTarget.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ReplaceFileContentStringArraySegmentOfByteBoolean">
            <summary>Sets the shim of FileTarget.ReplaceFileContent(String fileName, ArraySegment`1&lt;Byte&gt; bytes, Boolean firstAttempt)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ReplaceFileContentsOnEachWriteGet">
            <summary>Sets the shim of FileTarget.get_ReplaceFileContentsOnEachWrite()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ReplaceFileContentsOnEachWriteSetBoolean">
            <summary>Sets the shim of FileTarget.set_ReplaceFileContentsOnEachWrite(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ReplaceFileNamePatternStringString">
            <summary>Sets the shim of FileTarget.ReplaceFileNamePattern(String pattern, String replacementValue)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ReplaceNumberPatternStringInt32">
            <summary>Sets the shim of FileTarget.ReplaceNumberPattern(String pattern, Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.RollArchivesForwardStringStringInt32">
            <summary>Sets the shim of FileTarget.RollArchivesForward(String fileName, String pattern, Int32 archiveNumber)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.ShouldDeleteOldArchives">
            <summary>Sets the shim of FileTarget.ShouldDeleteOldArchives()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.StaticConstructor">
            <summary>Sets the shim of FileTarget.FileTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.TransformBytesByteArray">
            <summary>Sets the shim of FileTarget.TransformBytes(Byte[] value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.TruncateArchiveTimeDateTimeFileArchivePeriod">
            <summary>Sets the shim of FileTarget.TruncateArchiveTime(DateTime input, FileArchivePeriod resolution)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.TryArchiveFileStringLogEventInfoInt32">
            <summary>Sets the shim of FileTarget.TryArchiveFile(String fileName, LogEventInfo ev, Int32 upcomingWriteSize)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of FileTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.WriteFooterOnArchivingOnlyGet">
            <summary>Sets the shim of FileTarget.get_WriteFooterOnArchivingOnly()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.WriteFooterOnArchivingOnlySetBoolean">
            <summary>Sets the shim of FileTarget.set_WriteFooterOnArchivingOnly(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.WriteFooterString">
            <summary>Sets the shim of FileTarget.WriteFooter(String fileName)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of FileTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.WriteLogEventInfo">
            <summary>Sets the shim of FileTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.WriteToFileStringLogEventInfoArraySegmentOfByteBoolean">
            <summary>Sets the shim of FileTarget.WriteToFile(String fileName, LogEventInfo logEvent, ArraySegment`1&lt;Byte&gt; bytes, Boolean justData)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget._DeleteOldDateArchivesb__23FileInfo">
            <summary>Sets the shim of FileTarget.&lt;DeleteOldDateArchives&gt;b__23(FileInfo n)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget._DeleteOldDateArchivesb__24FileInfo">
            <summary>Sets the shim of FileTarget.&lt;DeleteOldDateArchives&gt;b__24(FileInfo n)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget._FindDateAndSequenceArchivesb__12FileInfo">
            <summary>Sets the shim of FileTarget.&lt;FindDateAndSequenceArchives&gt;b__12(FileInfo n)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget._FindDateAndSequenceArchivesb__13FileInfo">
            <summary>Sets the shim of FileTarget.&lt;FindDateAndSequenceArchives&gt;b__13(FileInfo n)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget._InitializeTargetb__2Object">
            <summary>Sets the shim of FileTarget.&lt;InitializeTarget&gt;b__2(Object state)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget._Writeb__4AsyncLogEventInfo">
            <summary>Sets the shim of FileTarget.&lt;Write&gt;b__4(AsyncLogEventInfo c)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.maxLogFilenamesGet">
            <summary>Sets the shim of FileTarget.get_maxLogFilenames()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimFileTarget.maxLogFilenamesSetInt32">
            <summary>Sets the shim of FileTarget.set_maxLogFilenames(Int32 value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimLineEndingMode">
            <summary>Shim type of NLog.Targets.LineEndingMode</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLineEndingMode.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLineEndingMode.#ctor(NLog.Targets.LineEndingMode)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimLineEndingMode.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.AllInstances.EqualsObject">
            <summary>Sets the shim of LineEndingMode.Equals(Object obj)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.AllInstances.GetHashCode01">
            <summary>Sets the shim of LineEndingMode.GetHashCode()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.AllInstances.NameGet">
            <summary>Sets the shim of LineEndingMode.get_Name()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.AllInstances.NewLineCharactersGet">
            <summary>Sets the shim of LineEndingMode.get_NewLineCharacters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.AllInstances.ToString01">
            <summary>Sets the shim of LineEndingMode.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLineEndingMode.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLineEndingMode.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.Constructor">
            <summary>Sets the shim of LineEndingMode.LineEndingMode()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.ConstructorStringString">
            <summary>Sets the shim of LineEndingMode.LineEndingMode(String name, String newLineCharacters)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.EqualityOpLineEndingModeLineEndingMode">
            <summary>Sets the shim of LineEndingMode.op_Equality(LineEndingMode mode1, LineEndingMode mode2)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.EqualsObject">
            <summary>Sets the shim of LineEndingMode.Equals(Object obj)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.FromStringString">
            <summary>Sets the shim of LineEndingMode.FromString(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.GetHashCode">
            <summary>Sets the shim of LineEndingMode.GetHashCode()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.InequalityOpLineEndingModeLineEndingMode">
            <summary>Sets the shim of LineEndingMode.op_Inequality(LineEndingMode mode1, LineEndingMode mode2)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.NameGet">
            <summary>Sets the shim of LineEndingMode.get_Name()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.NewLineCharactersGet">
            <summary>Sets the shim of LineEndingMode.get_NewLineCharacters()</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter">
            <summary>Shim type of NLog.Targets.LineEndingMode+LineEndingModeConverter</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.#ctor(NLog.Targets.LineEndingMode.LineEndingModeConverter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.AllInstances.CanConvertFromITypeDescriptorContextType">
            <summary>Sets the shim of LineEndingModeConverter.CanConvertFrom(ITypeDescriptorContext context, Type sourceType)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.AllInstances.ConvertFromITypeDescriptorContextCultureInfoObject">
            <summary>Sets the shim of LineEndingModeConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.CanConvertFromITypeDescriptorContextType">
            <summary>Sets the shim of LineEndingModeConverter.CanConvertFrom(ITypeDescriptorContext context, Type sourceType)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.Constructor">
            <summary>Sets the shim of LineEndingModeConverter.LineEndingModeConverter()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.ShimLineEndingModeConverter.ConvertFromITypeDescriptorContextCultureInfoObject">
            <summary>Sets the shim of LineEndingModeConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.StaticConstructor">
            <summary>Sets the shim of LineEndingMode.LineEndingMode()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLineEndingMode.ToString">
            <summary>Sets the shim of LineEndingMode.ToString()</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget">
            <summary>Shim type of NLog.Targets.LogReceiverWebServiceTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.#ctor(NLog.Targets.LogReceiverWebServiceTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AddValueAndGetStringOrdinalNLogEventsDictionaryOfStringInt32String">
            <summary>Sets the shim of LogReceiverWebServiceTarget.AddValueAndGetStringOrdinal(NLogEvents context, Dictionary`2&lt;String,Int32&gt; stringTable, String value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.ClientIdGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_ClientId()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.ClientIdSetLayout">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_ClientId(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.ClientOnProcessLogMessagesCompletedObjectAsyncCompletedEventArgs">
            <summary>Sets the shim of LogReceiverWebServiceTarget.ClientOnProcessLogMessagesCompleted(Object sender, AsyncCompletedEventArgs asyncCompletedEventArgs)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.CreateLogReceiver">
            <summary>Sets the shim of LogReceiverWebServiceTarget.CreateLogReceiver()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.CreateWcfLogReceiverClient">
            <summary>Sets the shim of LogReceiverWebServiceTarget.CreateWcfLogReceiverClient()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.EndpointAddressGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_EndpointAddress()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.EndpointAddressSetString">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_EndpointAddress(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.EndpointConfigurationNameGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_EndpointConfigurationName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.EndpointConfigurationNameSetString">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_EndpointConfigurationName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of LogReceiverWebServiceTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.IncludeEventPropertiesGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_IncludeEventProperties()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.IncludeEventPropertiesSetBoolean">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_IncludeEventProperties(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.OnSendNLogEventsIEnumerableOfAsyncLogEventInfo">
            <summary>Sets the shim of LogReceiverWebServiceTarget.OnSend(NLogEvents events, IEnumerable`1&lt;AsyncLogEventInfo&gt; asyncContinuations)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.ParametersGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.ParametersSetIListOfMethodCallParameter">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_Parameters(IList`1&lt;MethodCallParameter&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.SendBufferedEventsAsyncContinuation">
            <summary>Sets the shim of LogReceiverWebServiceTarget.SendBufferedEvents(AsyncContinuation flushContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.SendNLogEventsIListOfAsyncLogEventInfoAsyncContinuation">
            <summary>Sets the shim of LogReceiverWebServiceTarget.Send(NLogEvents events, IList`1&lt;AsyncLogEventInfo&gt; asyncContinuations, AsyncContinuation flushContinuations)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.TranslateEventLogEventInfoNLogEventsDictionaryOfStringInt32">
            <summary>Sets the shim of LogReceiverWebServiceTarget.TranslateEvent(LogEventInfo eventInfo, NLogEvents context, Dictionary`2&lt;String,Int32&gt; stringTable)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.TranslateLogEventsIListOfAsyncLogEventInfo">
            <summary>Sets the shim of LogReceiverWebServiceTarget.TranslateLogEvents(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.UseBinaryEncodingGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_UseBinaryEncoding()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.UseBinaryEncodingSetBoolean">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_UseBinaryEncoding(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.UseOneWayContractGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_UseOneWayContract()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.UseOneWayContractSetBoolean">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_UseOneWayContract(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of LogReceiverWebServiceTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of LogReceiverWebServiceTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.AllInstances.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of LogReceiverWebServiceTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.ClientIdGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_ClientId()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.ClientIdSetLayout">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_ClientId(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.ClientOnProcessLogMessagesCompletedObjectAsyncCompletedEventArgs">
            <summary>Sets the shim of LogReceiverWebServiceTarget.ClientOnProcessLogMessagesCompleted(Object sender, AsyncCompletedEventArgs asyncCompletedEventArgs)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.Constructor">
            <summary>Sets the shim of LogReceiverWebServiceTarget.LogReceiverWebServiceTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.ConstructorString">
            <summary>Sets the shim of LogReceiverWebServiceTarget.LogReceiverWebServiceTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.CreateLogReceiver">
            <summary>Sets the shim of LogReceiverWebServiceTarget.CreateLogReceiver()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.CreateWcfLogReceiverClient">
            <summary>Sets the shim of LogReceiverWebServiceTarget.CreateWcfLogReceiverClient()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.EndpointAddressGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_EndpointAddress()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.EndpointAddressSetString">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_EndpointAddress(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.EndpointConfigurationNameGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_EndpointConfigurationName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.EndpointConfigurationNameSetString">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_EndpointConfigurationName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of LogReceiverWebServiceTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.IncludeEventPropertiesGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_IncludeEventProperties()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.IncludeEventPropertiesSetBoolean">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_IncludeEventProperties(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.OnSendNLogEventsIEnumerableOfAsyncLogEventInfo">
            <summary>Sets the shim of LogReceiverWebServiceTarget.OnSend(NLogEvents events, IEnumerable`1&lt;AsyncLogEventInfo&gt; asyncContinuations)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.ParametersGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.ParametersSetIListOfMethodCallParameter">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_Parameters(IList`1&lt;MethodCallParameter&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.SendBufferedEventsAsyncContinuation">
            <summary>Sets the shim of LogReceiverWebServiceTarget.SendBufferedEvents(AsyncContinuation flushContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.SendNLogEventsIListOfAsyncLogEventInfoAsyncContinuation">
            <summary>Sets the shim of LogReceiverWebServiceTarget.Send(NLogEvents events, IList`1&lt;AsyncLogEventInfo&gt; asyncContinuations, AsyncContinuation flushContinuations)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.TranslateEventLogEventInfoNLogEventsDictionaryOfStringInt32">
            <summary>Sets the shim of LogReceiverWebServiceTarget.TranslateEvent(LogEventInfo eventInfo, NLogEvents context, Dictionary`2&lt;String,Int32&gt; stringTable)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.TranslateLogEventsIListOfAsyncLogEventInfo">
            <summary>Sets the shim of LogReceiverWebServiceTarget.TranslateLogEvents(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.UseBinaryEncodingGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_UseBinaryEncoding()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.UseBinaryEncodingSetBoolean">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_UseBinaryEncoding(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.UseOneWayContractGet">
            <summary>Sets the shim of LogReceiverWebServiceTarget.get_UseOneWayContract()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.UseOneWayContractSetBoolean">
            <summary>Sets the shim of LogReceiverWebServiceTarget.set_UseOneWayContract(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.WriteAsyncLogEventInfo">
            <summary>Sets the shim of LogReceiverWebServiceTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of LogReceiverWebServiceTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimLogReceiverWebServiceTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of LogReceiverWebServiceTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimMailTarget">
            <summary>Shim type of NLog.Targets.MailTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMailTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMailTarget.#ctor(NLog.Targets.MailTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AddAddressesMailAddressCollectionLayoutLogEventInfo">
            <summary>Sets the shim of MailTarget.AddAddresses(MailAddressCollection mailAddressCollection, Layout layout, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AddNewLinesGet">
            <summary>Sets the shim of MailTarget.get_AddNewLines()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AddNewLinesSetBoolean">
            <summary>Sets the shim of MailTarget.set_AddNewLines(Boolean value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimMailTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.AddNewLinesGet">
            <summary>Sets the shim of MailTarget.get_AddNewLines()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.AddNewLinesSetBoolean">
            <summary>Sets the shim of MailTarget.set_AddNewLines(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.BccGet">
            <summary>Sets the shim of MailTarget.get_Bcc()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.BccSetLayout">
            <summary>Sets the shim of MailTarget.set_Bcc(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.BodyGet">
            <summary>Sets the shim of MailTarget.get_Body()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.BodySetLayout">
            <summary>Sets the shim of MailTarget.set_Body(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.CCGet">
            <summary>Sets the shim of MailTarget.get_CC()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.CCSetLayout">
            <summary>Sets the shim of MailTarget.set_CC(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.CheckRequiredParameters">
            <summary>Sets the shim of MailTarget.CheckRequiredParameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.CreateBodyBufferIEnumerableOfAsyncLogEventInfoLogEventInfoLogEventInfo">
            <summary>Sets the shim of MailTarget.CreateBodyBuffer(IEnumerable`1&lt;AsyncLogEventInfo&gt; events, LogEventInfo firstEvent, LogEventInfo lastEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.CreateMailMessageLogEventInfoString">
            <summary>Sets the shim of MailTarget.CreateMailMessage(LogEventInfo lastEvent, String body)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.DeliveryMethodGet">
            <summary>Sets the shim of MailTarget.get_DeliveryMethod()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.DeliveryMethodSetSmtpDeliveryMethod">
            <summary>Sets the shim of MailTarget.set_DeliveryMethod(SmtpDeliveryMethod value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.EnableSslGet">
            <summary>Sets the shim of MailTarget.get_EnableSsl()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.EnableSslSetBoolean">
            <summary>Sets the shim of MailTarget.set_EnableSsl(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.FromGet">
            <summary>Sets the shim of MailTarget.get_From()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.FromSetLayout">
            <summary>Sets the shim of MailTarget.set_From(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.GetSmtpSettingsKeyLogEventInfo">
            <summary>Sets the shim of MailTarget.GetSmtpSettingsKey(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.HtmlGet">
            <summary>Sets the shim of MailTarget.get_Html()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.HtmlSetBoolean">
            <summary>Sets the shim of MailTarget.set_Html(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.InitializeTarget">
            <summary>Sets the shim of MailTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.PickupDirectoryLocationGet">
            <summary>Sets the shim of MailTarget.get_PickupDirectoryLocation()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.PickupDirectoryLocationSetString">
            <summary>Sets the shim of MailTarget.set_PickupDirectoryLocation(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.PriorityGet">
            <summary>Sets the shim of MailTarget.get_Priority()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.PrioritySetLayout">
            <summary>Sets the shim of MailTarget.set_Priority(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.ProcessSingleMailMessageIListOfAsyncLogEventInfo">
            <summary>Sets the shim of MailTarget.ProcessSingleMailMessage(IList`1&lt;AsyncLogEventInfo&gt; events)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.ReplaceNewlineWithBrTagInHtmlGet">
            <summary>Sets the shim of MailTarget.get_ReplaceNewlineWithBrTagInHtml()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.ReplaceNewlineWithBrTagInHtmlSetBoolean">
            <summary>Sets the shim of MailTarget.set_ReplaceNewlineWithBrTagInHtml(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpAuthenticationGet">
            <summary>Sets the shim of MailTarget.get_SmtpAuthentication()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpAuthenticationSetSmtpAuthenticationMode">
            <summary>Sets the shim of MailTarget.set_SmtpAuthentication(SmtpAuthenticationMode value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpPasswordGet">
            <summary>Sets the shim of MailTarget.get_SmtpPassword()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpPasswordSetLayout">
            <summary>Sets the shim of MailTarget.set_SmtpPassword(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpPortGet">
            <summary>Sets the shim of MailTarget.get_SmtpPort()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpPortSetInt32">
            <summary>Sets the shim of MailTarget.set_SmtpPort(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpSectionGet">
            <summary>Sets the shim of MailTarget.get_SmtpSection()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpSectionSetSmtpSection">
            <summary>Sets the shim of MailTarget.set_SmtpSection(SmtpSection value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpServerGet">
            <summary>Sets the shim of MailTarget.get_SmtpServer()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpServerSetLayout">
            <summary>Sets the shim of MailTarget.set_SmtpServer(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpUserNameGet">
            <summary>Sets the shim of MailTarget.get_SmtpUserName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SmtpUserNameSetLayout">
            <summary>Sets the shim of MailTarget.set_SmtpUserName(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SubjectGet">
            <summary>Sets the shim of MailTarget.get_Subject()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.SubjectSetLayout">
            <summary>Sets the shim of MailTarget.set_Subject(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.TimeoutGet">
            <summary>Sets the shim of MailTarget.get_Timeout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.TimeoutSetInt32">
            <summary>Sets the shim of MailTarget.set_Timeout(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.ToGet">
            <summary>Sets the shim of MailTarget.get_To()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.ToSetLayout">
            <summary>Sets the shim of MailTarget.set_To(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.UseSystemNetMailSettingsGet">
            <summary>Sets the shim of MailTarget.get_UseSystemNetMailSettings()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.UseSystemNetMailSettingsSetBoolean">
            <summary>Sets the shim of MailTarget.set_UseSystemNetMailSettings(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of MailTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of MailTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of MailTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AllInstances._Writeb__0AsyncLogEventInfo">
            <summary>Sets the shim of MailTarget.&lt;Write&gt;b__0(AsyncLogEventInfo c)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.AppendLayoutStringBuilderLogEventInfoLayout">
            <summary>Sets the shim of MailTarget.AppendLayout(StringBuilder sb, LogEventInfo logEvent, Layout layout)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.BccGet">
            <summary>Sets the shim of MailTarget.get_Bcc()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.BccSetLayout">
            <summary>Sets the shim of MailTarget.set_Bcc(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMailTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMailTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMailTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.BodyGet">
            <summary>Sets the shim of MailTarget.get_Body()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.BodySetLayout">
            <summary>Sets the shim of MailTarget.set_Body(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.CCGet">
            <summary>Sets the shim of MailTarget.get_CC()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.CCSetLayout">
            <summary>Sets the shim of MailTarget.set_CC(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.CheckRequiredParameters">
            <summary>Sets the shim of MailTarget.CheckRequiredParameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.Constructor">
            <summary>Sets the shim of MailTarget.MailTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.ConstructorString">
            <summary>Sets the shim of MailTarget.MailTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.ConvertDirectoryLocationString">
            <summary>Sets the shim of MailTarget.ConvertDirectoryLocation(String pickupDirectoryLocation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.CreateBodyBufferIEnumerableOfAsyncLogEventInfoLogEventInfoLogEventInfo">
            <summary>Sets the shim of MailTarget.CreateBodyBuffer(IEnumerable`1&lt;AsyncLogEventInfo&gt; events, LogEventInfo firstEvent, LogEventInfo lastEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.CreateMailMessageLogEventInfoString">
            <summary>Sets the shim of MailTarget.CreateMailMessage(LogEventInfo lastEvent, String body)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.DeliveryMethodGet">
            <summary>Sets the shim of MailTarget.get_DeliveryMethod()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.DeliveryMethodSetSmtpDeliveryMethod">
            <summary>Sets the shim of MailTarget.set_DeliveryMethod(SmtpDeliveryMethod value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.EnableSslGet">
            <summary>Sets the shim of MailTarget.get_EnableSsl()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.EnableSslSetBoolean">
            <summary>Sets the shim of MailTarget.set_EnableSsl(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.FromGet">
            <summary>Sets the shim of MailTarget.get_From()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.FromSetLayout">
            <summary>Sets the shim of MailTarget.set_From(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.GetSmtpSettingsKeyLogEventInfo">
            <summary>Sets the shim of MailTarget.GetSmtpSettingsKey(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.HtmlGet">
            <summary>Sets the shim of MailTarget.get_Html()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.HtmlSetBoolean">
            <summary>Sets the shim of MailTarget.set_Html(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.InitializeTarget">
            <summary>Sets the shim of MailTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.PickupDirectoryLocationGet">
            <summary>Sets the shim of MailTarget.get_PickupDirectoryLocation()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.PickupDirectoryLocationSetString">
            <summary>Sets the shim of MailTarget.set_PickupDirectoryLocation(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.PriorityGet">
            <summary>Sets the shim of MailTarget.get_Priority()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.PrioritySetLayout">
            <summary>Sets the shim of MailTarget.set_Priority(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.ProcessSingleMailMessageIListOfAsyncLogEventInfo">
            <summary>Sets the shim of MailTarget.ProcessSingleMailMessage(IList`1&lt;AsyncLogEventInfo&gt; events)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.ReplaceNewlineWithBrTagInHtmlGet">
            <summary>Sets the shim of MailTarget.get_ReplaceNewlineWithBrTagInHtml()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.ReplaceNewlineWithBrTagInHtmlSetBoolean">
            <summary>Sets the shim of MailTarget.set_ReplaceNewlineWithBrTagInHtml(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpAuthenticationGet">
            <summary>Sets the shim of MailTarget.get_SmtpAuthentication()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpAuthenticationSetSmtpAuthenticationMode">
            <summary>Sets the shim of MailTarget.set_SmtpAuthentication(SmtpAuthenticationMode value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpPasswordGet">
            <summary>Sets the shim of MailTarget.get_SmtpPassword()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpPasswordSetLayout">
            <summary>Sets the shim of MailTarget.set_SmtpPassword(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpPortGet">
            <summary>Sets the shim of MailTarget.get_SmtpPort()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpPortSetInt32">
            <summary>Sets the shim of MailTarget.set_SmtpPort(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpSectionGet">
            <summary>Sets the shim of MailTarget.get_SmtpSection()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpSectionSetSmtpSection">
            <summary>Sets the shim of MailTarget.set_SmtpSection(SmtpSection value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpServerGet">
            <summary>Sets the shim of MailTarget.get_SmtpServer()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpServerSetLayout">
            <summary>Sets the shim of MailTarget.set_SmtpServer(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpUserNameGet">
            <summary>Sets the shim of MailTarget.get_SmtpUserName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SmtpUserNameSetLayout">
            <summary>Sets the shim of MailTarget.set_SmtpUserName(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SubjectGet">
            <summary>Sets the shim of MailTarget.get_Subject()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.SubjectSetLayout">
            <summary>Sets the shim of MailTarget.set_Subject(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.TimeoutGet">
            <summary>Sets the shim of MailTarget.get_Timeout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.TimeoutSetInt32">
            <summary>Sets the shim of MailTarget.set_Timeout(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.ToGet">
            <summary>Sets the shim of MailTarget.get_To()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.ToSetLayout">
            <summary>Sets the shim of MailTarget.set_To(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.UseSystemNetMailSettingsGet">
            <summary>Sets the shim of MailTarget.get_UseSystemNetMailSettings()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.UseSystemNetMailSettingsSetBoolean">
            <summary>Sets the shim of MailTarget.set_UseSystemNetMailSettings(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.WriteAsyncLogEventInfo">
            <summary>Sets the shim of MailTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of MailTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of MailTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMailTarget._Writeb__0AsyncLogEventInfo">
            <summary>Sets the shim of MailTarget.&lt;Write&gt;b__0(AsyncLogEventInfo c)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimMemoryTarget">
            <summary>Shim type of NLog.Targets.MemoryTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMemoryTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMemoryTarget.#ctor(NLog.Targets.MemoryTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimMemoryTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMemoryTarget.AllInstances.LogsGet">
            <summary>Sets the shim of MemoryTarget.get_Logs()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMemoryTarget.AllInstances.LogsSetIListOfString">
            <summary>Sets the shim of MemoryTarget.set_Logs(IList`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMemoryTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of MemoryTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMemoryTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMemoryTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMemoryTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMemoryTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMemoryTarget.Constructor">
            <summary>Sets the shim of MemoryTarget.MemoryTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMemoryTarget.ConstructorString">
            <summary>Sets the shim of MemoryTarget.MemoryTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMemoryTarget.LogsGet">
            <summary>Sets the shim of MemoryTarget.get_Logs()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMemoryTarget.LogsSetIListOfString">
            <summary>Sets the shim of MemoryTarget.set_Logs(IList`1&lt;String&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMemoryTarget.WriteLogEventInfo">
            <summary>Sets the shim of MemoryTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimMethodCallParameter">
            <summary>Shim type of NLog.Targets.MethodCallParameter</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallParameter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallParameter.#ctor(NLog.Targets.MethodCallParameter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimMethodCallParameter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.AllInstances.GetValueLogEventInfo">
            <summary>Sets the shim of MethodCallParameter.GetValue(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.AllInstances.LayoutGet">
            <summary>Sets the shim of MethodCallParameter.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of MethodCallParameter.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.AllInstances.NameGet">
            <summary>Sets the shim of MethodCallParameter.get_Name()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.AllInstances.NameSetString">
            <summary>Sets the shim of MethodCallParameter.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.AllInstances.ParameterTypeGet">
            <summary>Sets the shim of MethodCallParameter.get_ParameterType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.AllInstances.ParameterTypeSetType">
            <summary>Sets the shim of MethodCallParameter.set_ParameterType(Type value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.AllInstances.TypeGet">
            <summary>Sets the shim of MethodCallParameter.get_Type()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.AllInstances.TypeSetType">
            <summary>Sets the shim of MethodCallParameter.set_Type(Type value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallParameter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallParameter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.Constructor">
            <summary>Sets the shim of MethodCallParameter.MethodCallParameter()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.ConstructorLayout">
            <summary>Sets the shim of MethodCallParameter.MethodCallParameter(Layout layout)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.ConstructorStringLayout">
            <summary>Sets the shim of MethodCallParameter.MethodCallParameter(String parameterName, Layout layout)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.ConstructorStringLayoutType">
            <summary>Sets the shim of MethodCallParameter.MethodCallParameter(String name, Layout layout, Type type)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.GetValueLogEventInfo">
            <summary>Sets the shim of MethodCallParameter.GetValue(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.LayoutGet">
            <summary>Sets the shim of MethodCallParameter.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.LayoutSetLayout">
            <summary>Sets the shim of MethodCallParameter.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.NameGet">
            <summary>Sets the shim of MethodCallParameter.get_Name()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.NameSetString">
            <summary>Sets the shim of MethodCallParameter.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.ParameterTypeGet">
            <summary>Sets the shim of MethodCallParameter.get_ParameterType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.ParameterTypeSetType">
            <summary>Sets the shim of MethodCallParameter.set_ParameterType(Type value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.TypeGet">
            <summary>Sets the shim of MethodCallParameter.get_Type()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallParameter.TypeSetType">
            <summary>Sets the shim of MethodCallParameter.set_Type(Type value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimMethodCallTarget">
            <summary>Shim type of NLog.Targets.MethodCallTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallTarget.#ctor(NLog.Targets.MethodCallTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances.ClassNameGet">
            <summary>Sets the shim of MethodCallTarget.get_ClassName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances.ClassNameSetString">
            <summary>Sets the shim of MethodCallTarget.set_ClassName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances.DoInvokeObjectArray">
            <summary>Sets the shim of MethodCallTarget.DoInvoke(Object[] parameters)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances.InitializeTarget">
            <summary>Sets the shim of MethodCallTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances.MethodGet">
            <summary>Sets the shim of MethodCallTarget.get_Method()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances.MethodNameGet">
            <summary>Sets the shim of MethodCallTarget.get_MethodName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances.MethodNameSetString">
            <summary>Sets the shim of MethodCallTarget.set_MethodName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances.MethodSetMethodInfo">
            <summary>Sets the shim of MethodCallTarget.set_Method(MethodInfo value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances.NeededParametersGet">
            <summary>Sets the shim of MethodCallTarget.get_NeededParameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.AllInstances.NeededParametersSetInt32">
            <summary>Sets the shim of MethodCallTarget.set_NeededParameters(Int32 value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.ClassNameGet">
            <summary>Sets the shim of MethodCallTarget.get_ClassName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.ClassNameSetString">
            <summary>Sets the shim of MethodCallTarget.set_ClassName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.Constructor">
            <summary>Sets the shim of MethodCallTarget.MethodCallTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.ConstructorString">
            <summary>Sets the shim of MethodCallTarget.MethodCallTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.DoInvokeObjectArray">
            <summary>Sets the shim of MethodCallTarget.DoInvoke(Object[] parameters)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.InitializeTarget">
            <summary>Sets the shim of MethodCallTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.MethodGet">
            <summary>Sets the shim of MethodCallTarget.get_Method()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.MethodNameGet">
            <summary>Sets the shim of MethodCallTarget.get_MethodName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.MethodNameSetString">
            <summary>Sets the shim of MethodCallTarget.set_MethodName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.MethodSetMethodInfo">
            <summary>Sets the shim of MethodCallTarget.set_Method(MethodInfo value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.NeededParametersGet">
            <summary>Sets the shim of MethodCallTarget.get_NeededParameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTarget.NeededParametersSetInt32">
            <summary>Sets the shim of MethodCallTarget.set_NeededParameters(Int32 value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimMethodCallTargetBase">
            <summary>Shim type of NLog.Targets.MethodCallTargetBase</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallTargetBase.#ctor(NLog.Targets.MethodCallTargetBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimMethodCallTargetBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTargetBase.AllInstances.DoInvokeObjectArrayAsyncContinuation">
            <summary>Sets the shim of MethodCallTargetBase.DoInvoke(Object[] parameters, AsyncContinuation continuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTargetBase.AllInstances.ParametersGet">
            <summary>Sets the shim of MethodCallTargetBase.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTargetBase.AllInstances.ParametersSetIListOfMethodCallParameter">
            <summary>Sets the shim of MethodCallTargetBase.set_Parameters(IList`1&lt;MethodCallParameter&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTargetBase.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of MethodCallTargetBase.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallTargetBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallTargetBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTargetBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimMethodCallTargetBase.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTargetBase.Constructor">
            <summary>Sets the shim of MethodCallTargetBase.MethodCallTargetBase()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTargetBase.DoInvokeObjectArrayAsyncContinuation">
            <summary>Sets the shim of MethodCallTargetBase.DoInvoke(Object[] parameters, AsyncContinuation continuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTargetBase.ParametersGet">
            <summary>Sets the shim of MethodCallTargetBase.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTargetBase.ParametersSetIListOfMethodCallParameter">
            <summary>Sets the shim of MethodCallTargetBase.set_Parameters(IList`1&lt;MethodCallParameter&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimMethodCallTargetBase.WriteAsyncLogEventInfo">
            <summary>Sets the shim of MethodCallTargetBase.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimNLogViewerParameterInfo">
            <summary>Shim type of NLog.Targets.NLogViewerParameterInfo</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.#ctor(NLog.Targets.NLogViewerParameterInfo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.AllInstances.LayoutGet">
            <summary>Sets the shim of NLogViewerParameterInfo.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of NLogViewerParameterInfo.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.AllInstances.NameGet">
            <summary>Sets the shim of NLogViewerParameterInfo.get_Name()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.AllInstances.NameSetString">
            <summary>Sets the shim of NLogViewerParameterInfo.set_Name(String value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.Constructor">
            <summary>Sets the shim of NLogViewerParameterInfo.NLogViewerParameterInfo()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.LayoutGet">
            <summary>Sets the shim of NLogViewerParameterInfo.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.LayoutSetLayout">
            <summary>Sets the shim of NLogViewerParameterInfo.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.NameGet">
            <summary>Sets the shim of NLogViewerParameterInfo.get_Name()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerParameterInfo.NameSetString">
            <summary>Sets the shim of NLogViewerParameterInfo.set_Name(String value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimNLogViewerTarget">
            <summary>Shim type of NLog.Targets.NLogViewerTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNLogViewerTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNLogViewerTarget.#ctor(NLog.Targets.NLogViewerTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.AppInfoGet">
            <summary>Sets the shim of NLogViewerTarget.get_AppInfo()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.AppInfoSetString">
            <summary>Sets the shim of NLogViewerTarget.set_AppInfo(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeCallSiteGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeCallSite()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeCallSiteSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeCallSite(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeMdcGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeMdc()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeMdcSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeMdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeMdlcGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeMdlc()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeMdlcSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeMdlc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeNLogDataGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeNLogData()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeNLogDataSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeNLogData(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeNdcGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeNdc()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeNdcSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeNdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeSourceInfoGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeSourceInfo()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.IncludeSourceInfoSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeSourceInfo(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.LayoutGet">
            <summary>Sets the shim of NLogViewerTarget.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of NLogViewerTarget.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.NdcItemSeparatorGet">
            <summary>Sets the shim of NLogViewerTarget.get_NdcItemSeparator()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.NdcItemSeparatorSetString">
            <summary>Sets the shim of NLogViewerTarget.set_NdcItemSeparator(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.ParametersGet">
            <summary>Sets the shim of NLogViewerTarget.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.ParametersSetIListOfNLogViewerParameterInfo">
            <summary>Sets the shim of NLogViewerTarget.set_Parameters(IList`1&lt;NLogViewerParameterInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AllInstances.RendererGet">
            <summary>Sets the shim of NLogViewerTarget.get_Renderer()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AppInfoGet">
            <summary>Sets the shim of NLogViewerTarget.get_AppInfo()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.AppInfoSetString">
            <summary>Sets the shim of NLogViewerTarget.set_AppInfo(String value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNLogViewerTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNLogViewerTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNLogViewerTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.Constructor">
            <summary>Sets the shim of NLogViewerTarget.NLogViewerTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.ConstructorString">
            <summary>Sets the shim of NLogViewerTarget.NLogViewerTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeCallSiteGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeCallSite()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeCallSiteSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeCallSite(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeMdcGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeMdc()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeMdcSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeMdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeMdlcGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeMdlc()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeMdlcSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeMdlc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeNLogDataGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeNLogData()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeNLogDataSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeNLogData(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeNdcGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeNdc()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeNdcSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeNdc(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeSourceInfoGet">
            <summary>Sets the shim of NLogViewerTarget.get_IncludeSourceInfo()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.IncludeSourceInfoSetBoolean">
            <summary>Sets the shim of NLogViewerTarget.set_IncludeSourceInfo(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.LayoutGet">
            <summary>Sets the shim of NLogViewerTarget.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.LayoutSetLayout">
            <summary>Sets the shim of NLogViewerTarget.set_Layout(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.NdcItemSeparatorGet">
            <summary>Sets the shim of NLogViewerTarget.get_NdcItemSeparator()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.NdcItemSeparatorSetString">
            <summary>Sets the shim of NLogViewerTarget.set_NdcItemSeparator(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.ParametersGet">
            <summary>Sets the shim of NLogViewerTarget.get_Parameters()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.ParametersSetIListOfNLogViewerParameterInfo">
            <summary>Sets the shim of NLogViewerTarget.set_Parameters(IList`1&lt;NLogViewerParameterInfo&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNLogViewerTarget.RendererGet">
            <summary>Sets the shim of NLogViewerTarget.get_Renderer()</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimNetworkTarget">
            <summary>Shim type of NLog.Targets.NetworkTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNetworkTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNetworkTarget.#ctor(NLog.Targets.NetworkTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AddressGet">
            <summary>Sets the shim of NetworkTarget.get_Address()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AddressSetLayout">
            <summary>Sets the shim of NetworkTarget.set_Address(Layout value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.AddressGet">
            <summary>Sets the shim of NetworkTarget.get_Address()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.AddressSetLayout">
            <summary>Sets the shim of NetworkTarget.set_Address(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.CloseTarget">
            <summary>Sets the shim of NetworkTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.ConnectionCacheSizeGet">
            <summary>Sets the shim of NetworkTarget.get_ConnectionCacheSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.ConnectionCacheSizeSetInt32">
            <summary>Sets the shim of NetworkTarget.set_ConnectionCacheSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of NetworkTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.GetBytesToWriteLogEventInfo">
            <summary>Sets the shim of NetworkTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.KeepConnectionGet">
            <summary>Sets the shim of NetworkTarget.get_KeepConnection()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.KeepConnectionSetBoolean">
            <summary>Sets the shim of NetworkTarget.set_KeepConnection(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.LineEndingGet">
            <summary>Sets the shim of NetworkTarget.get_LineEnding()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.LineEndingSetLineEndingMode">
            <summary>Sets the shim of NetworkTarget.set_LineEnding(LineEndingMode value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.MaxConnectionsGet">
            <summary>Sets the shim of NetworkTarget.get_MaxConnections()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.MaxConnectionsSetInt32">
            <summary>Sets the shim of NetworkTarget.set_MaxConnections(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.MaxMessageSizeGet">
            <summary>Sets the shim of NetworkTarget.get_MaxMessageSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.MaxMessageSizeSetInt32">
            <summary>Sets the shim of NetworkTarget.set_MaxMessageSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.MaxQueueSizeGet">
            <summary>Sets the shim of NetworkTarget.get_MaxQueueSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.MaxQueueSizeSetInt32">
            <summary>Sets the shim of NetworkTarget.set_MaxQueueSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.NewLineGet">
            <summary>Sets the shim of NetworkTarget.get_NewLine()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.NewLineSetBoolean">
            <summary>Sets the shim of NetworkTarget.set_NewLine(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.OnConnectionOverflowGet">
            <summary>Sets the shim of NetworkTarget.get_OnConnectionOverflow()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.OnConnectionOverflowSetNetworkTargetConnectionsOverflowAction">
            <summary>Sets the shim of NetworkTarget.set_OnConnectionOverflow(NetworkTargetConnectionsOverflowAction value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.OnOverflowGet">
            <summary>Sets the shim of NetworkTarget.get_OnOverflow()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.OnOverflowSetNetworkTargetOverflowAction">
            <summary>Sets the shim of NetworkTarget.set_OnOverflow(NetworkTargetOverflowAction value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of NetworkTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNetworkTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNetworkTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNetworkTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.CloseTarget">
            <summary>Sets the shim of NetworkTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.ConnectionCacheSizeGet">
            <summary>Sets the shim of NetworkTarget.get_ConnectionCacheSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.ConnectionCacheSizeSetInt32">
            <summary>Sets the shim of NetworkTarget.set_ConnectionCacheSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.Constructor">
            <summary>Sets the shim of NetworkTarget.NetworkTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.ConstructorString">
            <summary>Sets the shim of NetworkTarget.NetworkTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of NetworkTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.GetBytesToWriteLogEventInfo">
            <summary>Sets the shim of NetworkTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.KeepConnectionGet">
            <summary>Sets the shim of NetworkTarget.get_KeepConnection()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.KeepConnectionSetBoolean">
            <summary>Sets the shim of NetworkTarget.set_KeepConnection(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.LineEndingGet">
            <summary>Sets the shim of NetworkTarget.get_LineEnding()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.LineEndingSetLineEndingMode">
            <summary>Sets the shim of NetworkTarget.set_LineEnding(LineEndingMode value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.MaxConnectionsGet">
            <summary>Sets the shim of NetworkTarget.get_MaxConnections()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.MaxConnectionsSetInt32">
            <summary>Sets the shim of NetworkTarget.set_MaxConnections(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.MaxMessageSizeGet">
            <summary>Sets the shim of NetworkTarget.get_MaxMessageSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.MaxMessageSizeSetInt32">
            <summary>Sets the shim of NetworkTarget.set_MaxMessageSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.MaxQueueSizeGet">
            <summary>Sets the shim of NetworkTarget.get_MaxQueueSize()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.MaxQueueSizeSetInt32">
            <summary>Sets the shim of NetworkTarget.set_MaxQueueSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.NewLineGet">
            <summary>Sets the shim of NetworkTarget.get_NewLine()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.NewLineSetBoolean">
            <summary>Sets the shim of NetworkTarget.set_NewLine(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.OnConnectionOverflowGet">
            <summary>Sets the shim of NetworkTarget.get_OnConnectionOverflow()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.OnConnectionOverflowSetNetworkTargetConnectionsOverflowAction">
            <summary>Sets the shim of NetworkTarget.set_OnConnectionOverflow(NetworkTargetConnectionsOverflowAction value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.OnOverflowGet">
            <summary>Sets the shim of NetworkTarget.get_OnOverflow()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.OnOverflowSetNetworkTargetOverflowAction">
            <summary>Sets the shim of NetworkTarget.set_OnOverflow(NetworkTargetOverflowAction value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNetworkTarget.TryRemoveOf1LinkedListOfM0LinkedListNodeOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},System.Boolean})">
            <summary>Sets the shim of NetworkTarget.TryRemove(LinkedList`1&lt;!!0&gt; list, LinkedListNode`1&lt;!!0&gt; node)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget.WriteAsyncLogEventInfo">
            <summary>Sets the shim of NetworkTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget._CloseTargetb__5Exception">
            <summary>Sets the shim of NetworkTarget.&lt;CloseTarget&gt;b__5(Exception ex)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNetworkTarget._ReleaseCachedConnectionb__17Exception">
            <summary>Sets the shim of NetworkTarget.&lt;ReleaseCachedConnection&gt;b__17(Exception ex)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimNullTarget">
            <summary>Shim type of NLog.Targets.NullTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNullTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNullTarget.#ctor(NLog.Targets.NullTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimNullTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNullTarget.AllInstances.FormatMessageGet">
            <summary>Sets the shim of NullTarget.get_FormatMessage()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNullTarget.AllInstances.FormatMessageSetBoolean">
            <summary>Sets the shim of NullTarget.set_FormatMessage(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNullTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of NullTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNullTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNullTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNullTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimNullTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNullTarget.Constructor">
            <summary>Sets the shim of NullTarget.NullTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNullTarget.ConstructorString">
            <summary>Sets the shim of NullTarget.NullTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNullTarget.FormatMessageGet">
            <summary>Sets the shim of NullTarget.get_FormatMessage()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNullTarget.FormatMessageSetBoolean">
            <summary>Sets the shim of NullTarget.set_FormatMessage(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimNullTarget.WriteLogEventInfo">
            <summary>Sets the shim of NullTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimOutputDebugStringTarget">
            <summary>Shim type of NLog.Targets.OutputDebugStringTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimOutputDebugStringTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimOutputDebugStringTarget.#ctor(NLog.Targets.OutputDebugStringTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimOutputDebugStringTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimOutputDebugStringTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of OutputDebugStringTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimOutputDebugStringTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimOutputDebugStringTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimOutputDebugStringTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimOutputDebugStringTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimOutputDebugStringTarget.Constructor">
            <summary>Sets the shim of OutputDebugStringTarget.OutputDebugStringTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimOutputDebugStringTarget.ConstructorString">
            <summary>Sets the shim of OutputDebugStringTarget.OutputDebugStringTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimOutputDebugStringTarget.WriteLogEventInfo">
            <summary>Sets the shim of OutputDebugStringTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimPerformanceCounterTarget">
            <summary>Shim type of NLog.Targets.PerformanceCounterTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimPerformanceCounterTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimPerformanceCounterTarget.#ctor(NLog.Targets.PerformanceCounterTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.AutoCreateGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_AutoCreate()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.AutoCreateSetBoolean">
            <summary>Sets the shim of PerformanceCounterTarget.set_AutoCreate(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.CategoryNameGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_CategoryName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.CategoryNameSetString">
            <summary>Sets the shim of PerformanceCounterTarget.set_CategoryName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.CloseTarget">
            <summary>Sets the shim of PerformanceCounterTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.CounterHelpGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_CounterHelp()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.CounterHelpSetString">
            <summary>Sets the shim of PerformanceCounterTarget.set_CounterHelp(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.CounterNameGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_CounterName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.CounterNameSetString">
            <summary>Sets the shim of PerformanceCounterTarget.set_CounterName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.CounterTypeGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_CounterType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.CounterTypeSetPerformanceCounterType">
            <summary>Sets the shim of PerformanceCounterTarget.set_CounterType(PerformanceCounterType value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.EnsureInitialized">
            <summary>Sets the shim of PerformanceCounterTarget.EnsureInitialized()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.IncrementValueGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_IncrementValue()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.IncrementValueSetLayout">
            <summary>Sets the shim of PerformanceCounterTarget.set_IncrementValue(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.InstallInstallationContext">
            <summary>Sets the shim of PerformanceCounterTarget.Install(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.InstanceNameGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_InstanceName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.InstanceNameSetString">
            <summary>Sets the shim of PerformanceCounterTarget.set_InstanceName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.IsInstalledInstallationContext">
            <summary>Sets the shim of PerformanceCounterTarget.IsInstalled(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.UninstallInstallationContext">
            <summary>Sets the shim of PerformanceCounterTarget.Uninstall(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of PerformanceCounterTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AutoCreateGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_AutoCreate()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.AutoCreateSetBoolean">
            <summary>Sets the shim of PerformanceCounterTarget.set_AutoCreate(Boolean value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimPerformanceCounterTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimPerformanceCounterTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimPerformanceCounterTarget.Bind(NLog.Config.IInstallable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimPerformanceCounterTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.CategoryNameGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_CategoryName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.CategoryNameSetString">
            <summary>Sets the shim of PerformanceCounterTarget.set_CategoryName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.CloseTarget">
            <summary>Sets the shim of PerformanceCounterTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.Constructor">
            <summary>Sets the shim of PerformanceCounterTarget.PerformanceCounterTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.ConstructorString">
            <summary>Sets the shim of PerformanceCounterTarget.PerformanceCounterTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.CounterHelpGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_CounterHelp()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.CounterHelpSetString">
            <summary>Sets the shim of PerformanceCounterTarget.set_CounterHelp(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.CounterNameGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_CounterName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.CounterNameSetString">
            <summary>Sets the shim of PerformanceCounterTarget.set_CounterName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.CounterTypeGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_CounterType()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.CounterTypeSetPerformanceCounterType">
            <summary>Sets the shim of PerformanceCounterTarget.set_CounterType(PerformanceCounterType value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.EnsureInitialized">
            <summary>Sets the shim of PerformanceCounterTarget.EnsureInitialized()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.GetCounterCreationDataCollectionIEnumerableOfPerformanceCounterTargetPerformanceCounterCategoryTypeOut">
            <summary>Sets the shim of PerformanceCounterTarget.GetCounterCreationDataCollection(IEnumerable`1&lt;PerformanceCounterTarget&gt; countersInCategory, PerformanceCounterCategoryType&amp; categoryType)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.IncrementValueGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_IncrementValue()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.IncrementValueSetLayout">
            <summary>Sets the shim of PerformanceCounterTarget.set_IncrementValue(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.InstallInstallationContext">
            <summary>Sets the shim of PerformanceCounterTarget.Install(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.InstanceNameGet">
            <summary>Sets the shim of PerformanceCounterTarget.get_InstanceName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.InstanceNameSetString">
            <summary>Sets the shim of PerformanceCounterTarget.set_InstanceName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.IsInstalledInstallationContext">
            <summary>Sets the shim of PerformanceCounterTarget.IsInstalled(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.UninstallInstallationContext">
            <summary>Sets the shim of PerformanceCounterTarget.Uninstall(InstallationContext installationContext)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget.WriteLogEventInfo">
            <summary>Sets the shim of PerformanceCounterTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget._Installb__0PerformanceCounterTarget">
            <summary>Sets the shim of PerformanceCounterTarget.&lt;Install&gt;b__0(PerformanceCounterTarget c)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimPerformanceCounterTarget._Installb__1PerformanceCounterTarget">
            <summary>Sets the shim of PerformanceCounterTarget.&lt;Install&gt;b__1(PerformanceCounterTarget c)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimTarget">
            <summary>Shim type of NLog.Targets.Target</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTarget.#ctor(NLog.Targets.Target)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.Close">
            <summary>Sets the shim of Target.Close()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.CloseTarget">
            <summary>Sets the shim of Target.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.CreateInitException">
            <summary>Sets the shim of Target.CreateInitException()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.Dispose">
            <summary>Sets the shim of Target.Dispose()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.DisposeBoolean">
            <summary>Sets the shim of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.FindAllLayouts">
            <summary>Sets the shim of Target.FindAllLayouts()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.FlushAsyncContinuation">
            <summary>Sets the shim of Target.Flush(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.InitializeLoggingConfiguration">
            <summary>Sets the shim of Target.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.InitializeTarget">
            <summary>Sets the shim of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.IsInitializedGet">
            <summary>Sets the shim of Target.get_IsInitialized()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.LoggingConfigurationGet">
            <summary>Sets the shim of Target.get_LoggingConfiguration()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.LoggingConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of Target.set_LoggingConfiguration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.MergeEventPropertiesLogEventInfo">
            <summary>Sets the shim of Target.MergeEventProperties(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.NLogInternalISupportsInitializeClose">
            <summary>Sets the shim of Target.NLog.Internal.ISupportsInitialize.Close()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.NLogInternalISupportsInitializeInitializeLoggingConfiguration">
            <summary>Sets the shim of Target.NLog.Internal.ISupportsInitialize.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.NameGet">
            <summary>Sets the shim of Target.get_Name()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.NameSetString">
            <summary>Sets the shim of Target.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.OptimizeBufferReuseGet">
            <summary>Sets the shim of Target.get_OptimizeBufferReuse()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.OptimizeBufferReuseSetBoolean">
            <summary>Sets the shim of Target.set_OptimizeBufferReuse(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.PrecalculateVolatileLayoutsLogEventInfo">
            <summary>Sets the shim of Target.PrecalculateVolatileLayouts(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.RenderLogEventLayoutLogEventInfo">
            <summary>Sets the shim of Target.RenderLogEvent(Layout layout, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.StackTraceUsageGet">
            <summary>Sets the shim of Target.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.StackTraceUsageSetStackTraceUsage">
            <summary>Sets the shim of Target.set_StackTraceUsage(StackTraceUsage value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.SyncRootGet">
            <summary>Sets the shim of Target.get_SyncRoot()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.ToString01">
            <summary>Sets the shim of Target.ToString()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.WriteAsyncLogEventAsyncLogEventInfo">
            <summary>Sets the shim of Target.WriteAsyncLogEvent(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.WriteAsyncLogEventsAsyncLogEventInfoArray">
            <summary>Sets the shim of Target.WriteAsyncLogEvents(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.WriteAsyncLogEventsIListOfAsyncLogEventInfo">
            <summary>Sets the shim of Target.WriteAsyncLogEvents(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the shim of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the shim of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the shim of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.Close">
            <summary>Sets the shim of Target.Close()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.CloseTarget">
            <summary>Sets the shim of Target.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.Constructor">
            <summary>Sets the shim of Target.Target()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.CreateInitException">
            <summary>Sets the shim of Target.CreateInitException()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.Dispose">
            <summary>Sets the shim of Target.Dispose()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.DisposeBoolean">
            <summary>Sets the shim of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.FindAllLayouts">
            <summary>Sets the shim of Target.FindAllLayouts()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.FlushAsyncContinuation">
            <summary>Sets the shim of Target.Flush(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.InitializeLoggingConfiguration">
            <summary>Sets the shim of Target.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.InitializeTarget">
            <summary>Sets the shim of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.IsInitializedGet">
            <summary>Sets the shim of Target.get_IsInitialized()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.LoggingConfigurationGet">
            <summary>Sets the shim of Target.get_LoggingConfiguration()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.LoggingConfigurationSetLoggingConfiguration">
            <summary>Sets the shim of Target.set_LoggingConfiguration(LoggingConfiguration value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.MergeEventPropertiesLogEventInfo">
            <summary>Sets the shim of Target.MergeEventProperties(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.NLogInternalISupportsInitializeClose">
            <summary>Sets the shim of Target.NLog.Internal.ISupportsInitialize.Close()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.NLogInternalISupportsInitializeInitializeLoggingConfiguration">
            <summary>Sets the shim of Target.NLog.Internal.ISupportsInitialize.Initialize(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.NameGet">
            <summary>Sets the shim of Target.get_Name()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.NameSetString">
            <summary>Sets the shim of Target.set_Name(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.OptimizeBufferReuseGet">
            <summary>Sets the shim of Target.get_OptimizeBufferReuse()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.OptimizeBufferReuseSetBoolean">
            <summary>Sets the shim of Target.set_OptimizeBufferReuse(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.PrecalculateVolatileLayoutsLogEventInfo">
            <summary>Sets the shim of Target.PrecalculateVolatileLayouts(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTarget.RegisterOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String})">
            <summary>Sets the shim of Target.Register(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.RegisterStringType">
            <summary>Sets the shim of Target.Register(String name, Type targetType)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.RenderLogEventLayoutLogEventInfo">
            <summary>Sets the shim of Target.RenderLogEvent(Layout layout, LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.StackTraceUsageGet">
            <summary>Sets the shim of Target.get_StackTraceUsage()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.StackTraceUsageSetStackTraceUsage">
            <summary>Sets the shim of Target.set_StackTraceUsage(StackTraceUsage value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.SyncRootGet">
            <summary>Sets the shim of Target.get_SyncRoot()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.ToString">
            <summary>Sets the shim of Target.ToString()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.WriteAsyncLogEventAsyncLogEventInfo">
            <summary>Sets the shim of Target.WriteAsyncLogEvent(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.WriteAsyncLogEventInfo">
            <summary>Sets the shim of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.WriteAsyncLogEventsAsyncLogEventInfoArray">
            <summary>Sets the shim of Target.WriteAsyncLogEvents(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.WriteAsyncLogEventsIListOfAsyncLogEventInfo">
            <summary>Sets the shim of Target.WriteAsyncLogEvents(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the shim of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the shim of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the shim of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget.WriteLogEventInfo">
            <summary>Sets the shim of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget._FindAllLayoutsb__aLayout">
            <summary>Sets the shim of Target.&lt;FindAllLayouts&gt;b__a(Layout layout)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTarget._FindAllLayoutsb__bLayout">
            <summary>Sets the shim of Target.&lt;FindAllLayouts&gt;b__b(Layout layout)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimTargetAttribute">
            <summary>Shim type of NLog.Targets.TargetAttribute</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetAttribute.#ctor(NLog.Targets.TargetAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimTargetAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetAttribute.AllInstances.IsCompoundGet">
            <summary>Sets the shim of TargetAttribute.get_IsCompound()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetAttribute.AllInstances.IsCompoundSetBoolean">
            <summary>Sets the shim of TargetAttribute.set_IsCompound(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetAttribute.AllInstances.IsWrapperGet">
            <summary>Sets the shim of TargetAttribute.get_IsWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetAttribute.AllInstances.IsWrapperSetBoolean">
            <summary>Sets the shim of TargetAttribute.set_IsWrapper(Boolean value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetAttribute.ConstructorString">
            <summary>Sets the shim of TargetAttribute.TargetAttribute(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetAttribute.IsCompoundGet">
            <summary>Sets the shim of TargetAttribute.get_IsCompound()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetAttribute.IsCompoundSetBoolean">
            <summary>Sets the shim of TargetAttribute.set_IsCompound(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetAttribute.IsWrapperGet">
            <summary>Sets the shim of TargetAttribute.get_IsWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetAttribute.IsWrapperSetBoolean">
            <summary>Sets the shim of TargetAttribute.set_IsWrapper(Boolean value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimTargetWithLayout">
            <summary>Shim type of NLog.Targets.TargetWithLayout</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetWithLayout.#ctor(NLog.Targets.TargetWithLayout)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimTargetWithLayout.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayout.AllInstances.LayoutGet">
            <summary>Sets the shim of TargetWithLayout.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayout.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of TargetWithLayout.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetWithLayout.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetWithLayout.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayout.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetWithLayout.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayout.Constructor">
            <summary>Sets the shim of TargetWithLayout.TargetWithLayout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayout.LayoutGet">
            <summary>Sets the shim of TargetWithLayout.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayout.LayoutSetLayout">
            <summary>Sets the shim of TargetWithLayout.set_Layout(Layout value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter">
            <summary>Shim type of NLog.Targets.TargetWithLayoutHeaderAndFooter</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.#ctor(NLog.Targets.TargetWithLayoutHeaderAndFooter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.AllInstances.FooterGet">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.get_Footer()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.AllInstances.FooterSetLayout">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.set_Footer(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.AllInstances.HeaderGet">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.get_Header()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.AllInstances.HeaderSetLayout">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.set_Header(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.AllInstances.LHFGet">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.get_LHF()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.AllInstances.LHFSetLayoutWithHeaderAndFooter">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.set_LHF(LayoutWithHeaderAndFooter value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.AllInstances.LayoutGet">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.Constructor">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.TargetWithLayoutHeaderAndFooter()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.FooterGet">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.get_Footer()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.FooterSetLayout">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.set_Footer(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.HeaderGet">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.get_Header()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.HeaderSetLayout">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.set_Header(Layout value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.LHFGet">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.get_LHF()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.LHFSetLayoutWithHeaderAndFooter">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.set_LHF(LayoutWithHeaderAndFooter value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.LayoutGet">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.get_Layout()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTargetWithLayoutHeaderAndFooter.LayoutSetLayout">
            <summary>Sets the shim of TargetWithLayoutHeaderAndFooter.set_Layout(Layout value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimTraceTarget">
            <summary>Shim type of NLog.Targets.TraceTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTraceTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTraceTarget.#ctor(NLog.Targets.TraceTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimTraceTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTraceTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of TraceTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTraceTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTraceTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTraceTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimTraceTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTraceTarget.Constructor">
            <summary>Sets the shim of TraceTarget.TraceTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTraceTarget.ConstructorString">
            <summary>Sets the shim of TraceTarget.TraceTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimTraceTarget.WriteLogEventInfo">
            <summary>Sets the shim of TraceTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimWebServiceTarget">
            <summary>Shim type of NLog.Targets.WebServiceTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimWebServiceTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimWebServiceTarget.#ctor(NLog.Targets.WebServiceTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.BuildWebServiceUrlObjectArray">
            <summary>Sets the shim of WebServiceTarget.BuildWebServiceUrl(Object[] parameterValues)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.CloseTarget">
            <summary>Sets the shim of WebServiceTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.DoInvokeCompletedAsyncContinuationException">
            <summary>Sets the shim of WebServiceTarget.DoInvokeCompleted(AsyncContinuation continuation, Exception ex)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.DoInvokeObjectArray">
            <summary>Sets the shim of WebServiceTarget.DoInvoke(Object[] parameters)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.DoInvokeObjectArrayAsyncContinuation">
            <summary>Sets the shim of WebServiceTarget.DoInvoke(Object[] parameters, AsyncContinuation continuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.DoInvokeObjectArrayAsyncContinuationHttpWebRequestFuncOfAsyncCallbackIAsyncResultFuncOfIAsyncResultStream">
            <summary>Sets the shim of WebServiceTarget.DoInvoke(Object[] parameters, AsyncContinuation continuation, HttpWebRequest request, Func`2&lt;AsyncCallback,IAsyncResult&gt; beginFunc, Func`2&lt;IAsyncResult,Stream&gt; getStreamFunc)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.EscapeDataNLogLegacyGet">
            <summary>Sets the shim of WebServiceTarget.get_EscapeDataNLogLegacy()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.EscapeDataNLogLegacySetBoolean">
            <summary>Sets the shim of WebServiceTarget.set_EscapeDataNLogLegacy(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.EscapeDataRfc3986Get">
            <summary>Sets the shim of WebServiceTarget.get_EscapeDataRfc3986()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.EscapeDataRfc3986SetBoolean">
            <summary>Sets the shim of WebServiceTarget.set_EscapeDataRfc3986(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of WebServiceTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.IncludeBOMGet">
            <summary>Sets the shim of WebServiceTarget.get_IncludeBOM()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.IncludeBOMSetNullableOfBoolean">
            <summary>Sets the shim of WebServiceTarget.set_IncludeBOM(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.MethodNameGet">
            <summary>Sets the shim of WebServiceTarget.get_MethodName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.MethodNameSetString">
            <summary>Sets the shim of WebServiceTarget.set_MethodName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.NamespaceGet">
            <summary>Sets the shim of WebServiceTarget.get_Namespace()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.NamespaceSetString">
            <summary>Sets the shim of WebServiceTarget.set_Namespace(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.PrepareGetRequestHttpWebRequest">
            <summary>Sets the shim of WebServiceTarget.PrepareGetRequest(HttpWebRequest request)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.ProtocolGet">
            <summary>Sets the shim of WebServiceTarget.get_Protocol()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.ProtocolSetWebServiceProtocol">
            <summary>Sets the shim of WebServiceTarget.set_Protocol(WebServiceProtocol value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.UrlGet">
            <summary>Sets the shim of WebServiceTarget.get_Url()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.UrlSetUri">
            <summary>Sets the shim of WebServiceTarget.set_Url(Uri value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.XmlRootGet">
            <summary>Sets the shim of WebServiceTarget.get_XmlRoot()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.XmlRootNamespaceGet">
            <summary>Sets the shim of WebServiceTarget.get_XmlRootNamespace()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.XmlRootNamespaceSetString">
            <summary>Sets the shim of WebServiceTarget.set_XmlRootNamespace(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.AllInstances.XmlRootSetString">
            <summary>Sets the shim of WebServiceTarget.set_XmlRoot(String value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimWebServiceTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimWebServiceTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.ShimWebServiceTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.BuildWebServiceUrlObjectArray">
            <summary>Sets the shim of WebServiceTarget.BuildWebServiceUrl(Object[] parameterValues)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.CloseTarget">
            <summary>Sets the shim of WebServiceTarget.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.Constructor">
            <summary>Sets the shim of WebServiceTarget.WebServiceTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.ConstructorString">
            <summary>Sets the shim of WebServiceTarget.WebServiceTarget(String name)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.DoInvokeCompletedAsyncContinuationException">
            <summary>Sets the shim of WebServiceTarget.DoInvokeCompleted(AsyncContinuation continuation, Exception ex)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.DoInvokeObjectArray">
            <summary>Sets the shim of WebServiceTarget.DoInvoke(Object[] parameters)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.DoInvokeObjectArrayAsyncContinuation">
            <summary>Sets the shim of WebServiceTarget.DoInvoke(Object[] parameters, AsyncContinuation continuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.DoInvokeObjectArrayAsyncContinuationHttpWebRequestFuncOfAsyncCallbackIAsyncResultFuncOfIAsyncResultStream">
            <summary>Sets the shim of WebServiceTarget.DoInvoke(Object[] parameters, AsyncContinuation continuation, HttpWebRequest request, Func`2&lt;AsyncCallback,IAsyncResult&gt; beginFunc, Func`2&lt;IAsyncResult,Stream&gt; getStreamFunc)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.EscapeDataNLogLegacyGet">
            <summary>Sets the shim of WebServiceTarget.get_EscapeDataNLogLegacy()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.EscapeDataNLogLegacySetBoolean">
            <summary>Sets the shim of WebServiceTarget.set_EscapeDataNLogLegacy(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.EscapeDataRfc3986Get">
            <summary>Sets the shim of WebServiceTarget.get_EscapeDataRfc3986()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.EscapeDataRfc3986SetBoolean">
            <summary>Sets the shim of WebServiceTarget.set_EscapeDataRfc3986(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of WebServiceTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.IncludeBOMGet">
            <summary>Sets the shim of WebServiceTarget.get_IncludeBOM()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.IncludeBOMSetNullableOfBoolean">
            <summary>Sets the shim of WebServiceTarget.set_IncludeBOM(Nullable`1&lt;Boolean&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.MethodNameGet">
            <summary>Sets the shim of WebServiceTarget.get_MethodName()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.MethodNameSetString">
            <summary>Sets the shim of WebServiceTarget.set_MethodName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.NamespaceGet">
            <summary>Sets the shim of WebServiceTarget.get_Namespace()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.NamespaceSetString">
            <summary>Sets the shim of WebServiceTarget.set_Namespace(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.PrepareGetRequestHttpWebRequest">
            <summary>Sets the shim of WebServiceTarget.PrepareGetRequest(HttpWebRequest request)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.ProtocolGet">
            <summary>Sets the shim of WebServiceTarget.get_Protocol()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.ProtocolSetWebServiceProtocol">
            <summary>Sets the shim of WebServiceTarget.set_Protocol(WebServiceProtocol value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.StaticConstructor">
            <summary>Sets the shim of WebServiceTarget.WebServiceTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.UrlGet">
            <summary>Sets the shim of WebServiceTarget.get_Url()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.UrlSetUri">
            <summary>Sets the shim of WebServiceTarget.set_Url(Uri value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.XmlRootGet">
            <summary>Sets the shim of WebServiceTarget.get_XmlRoot()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.XmlRootNamespaceGet">
            <summary>Sets the shim of WebServiceTarget.get_XmlRootNamespace()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.XmlRootNamespaceSetString">
            <summary>Sets the shim of WebServiceTarget.set_XmlRootNamespace(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.ShimWebServiceTarget.XmlRootSetString">
            <summary>Sets the shim of WebServiceTarget.set_XmlRoot(String value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubAsyncTaskTarget">
            <summary>Stub type of NLog.Targets.AsyncTaskTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubAsyncTaskTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.CloseTarget">
            <summary>Sets the stub of AsyncTaskTarget.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.CloseTarget01">
            <summary>Sets the stub of AsyncTaskTarget.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of AsyncTaskTarget.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.DisposeBoolean">
            <summary>Sets the stub of AsyncTaskTarget.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of AsyncTaskTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of AsyncTaskTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.InitializeStub">
            <summary>Initializes a new instance of type StubAsyncTaskTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubAsyncTaskTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubAsyncTaskTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubAsyncTaskTarget.TaskScheduler">
            <summary>Sets the stub of AsyncTaskTarget.get_TaskScheduler()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.TaskSchedulerGet">
            <summary>Sets the stub of AsyncTaskTarget.get_TaskScheduler()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of AsyncTaskTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of AsyncTaskTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteAsyncTask(NLog.LogEventInfo,System.Threading.CancellationToken)">
            <summary>Sets the stub of AsyncTaskTarget.WriteAsyncTask(LogEventInfo logEvent, CancellationToken cancellationToken)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteAsyncTaskLogEventInfoCancellationToken">
            <summary>Sets the stub of AsyncTaskTarget.WriteAsyncTask(LogEventInfo logEvent, CancellationToken cancellationToken)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubAsyncTaskTarget.WriteLogEventInfo">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubChainsawTarget">
            <summary>Stub type of NLog.Targets.ChainsawTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.AttachBackingFieldToLayout">
            <summary>Attaches delegates to emulate StubChainsawTarget.Layout as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubChainsawTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.CloseTarget">
            <summary>Sets the stub of NetworkTarget.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.CloseTarget01">
            <summary>Sets the stub of NetworkTarget.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of NetworkTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of NetworkTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>Sets the stub of NetworkTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.GetBytesToWriteLogEventInfo">
            <summary>Sets the stub of NetworkTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.InitializeStub">
            <summary>Initializes a new instance of type StubChainsawTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubChainsawTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubChainsawTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubChainsawTarget.Layout">
            <summary>Sets the stub of NLogViewerTarget.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.LayoutGet">
            <summary>Sets the stub of NLogViewerTarget.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.LayoutSetLayout">
            <summary>Sets the stub of NLogViewerTarget.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of NetworkTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of NetworkTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubChainsawTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubChainsawTarget.WriteLogEventInfo">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubConsoleRowHighlightingRule">
            <summary>Stub type of NLog.Targets.ConsoleRowHighlightingRule</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubConsoleRowHighlightingRule.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubConsoleRowHighlightingRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubConsoleRowHighlightingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubConsoleRowHighlightingRule.InitializeStub">
            <summary>Initializes a new instance of type StubConsoleRowHighlightingRule</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubConsoleRowHighlightingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubConsoleRowHighlightingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubConsoleWordHighlightingRule">
            <summary>Stub type of NLog.Targets.ConsoleWordHighlightingRule</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubConsoleWordHighlightingRule.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubConsoleWordHighlightingRule.#ctor(System.String,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubConsoleWordHighlightingRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubConsoleWordHighlightingRule.InitializeStub">
            <summary>Initializes a new instance of type StubConsoleWordHighlightingRule</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubConsoleWordHighlightingRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubConsoleWordHighlightingRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubDatabaseCommandInfo">
            <summary>Stub type of NLog.Targets.DatabaseCommandInfo</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseCommandInfo.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubDatabaseCommandInfo.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseCommandInfo.InitializeStub">
            <summary>Initializes a new instance of type StubDatabaseCommandInfo</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubDatabaseCommandInfo.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubDatabaseCommandInfo.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubDatabaseParameterInfo">
            <summary>Stub type of NLog.Targets.DatabaseParameterInfo</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseParameterInfo.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseParameterInfo.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubDatabaseParameterInfo.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseParameterInfo.InitializeStub">
            <summary>Initializes a new instance of type StubDatabaseParameterInfo</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubDatabaseParameterInfo.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubDatabaseParameterInfo.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubDatabaseTarget">
            <summary>Stub type of NLog.Targets.DatabaseTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubDatabaseTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.CloseTarget">
            <summary>Sets the stub of DatabaseTarget.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.CloseTarget01">
            <summary>Sets the stub of DatabaseTarget.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.InitializeStub">
            <summary>Initializes a new instance of type StubDatabaseTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.InitializeTarget">
            <summary>Sets the stub of DatabaseTarget.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.InitializeTarget01">
            <summary>Sets the stub of DatabaseTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubDatabaseTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubDatabaseTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of DatabaseTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of DatabaseTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of DatabaseTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of DatabaseTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubDatabaseTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of DatabaseTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubDatabaseTarget.WriteLogEventInfo">
            <summary>Sets the stub of DatabaseTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubEventLogTarget">
            <summary>Stub type of NLog.Targets.EventLogTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.#ctor(NLog.Internal.Fakeables.IAppDomain)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.AttachBackingFieldToLayout">
            <summary>Attaches delegates to emulate StubEventLogTarget.Layout as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubEventLogTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.InitializeStub">
            <summary>Initializes a new instance of type StubEventLogTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.InitializeTarget">
            <summary>Sets the stub of EventLogTarget.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.InitializeTarget01">
            <summary>Sets the stub of EventLogTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubEventLogTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubEventLogTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubEventLogTarget.Layout">
            <summary>Sets the stub of TargetWithLayout.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.LayoutGet">
            <summary>Sets the stub of TargetWithLayout.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.LayoutSetLayout">
            <summary>Sets the stub of TargetWithLayout.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of EventLogTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubEventLogTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubEventLogTarget.WriteLogEventInfo">
            <summary>Sets the stub of EventLogTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubFileTarget">
            <summary>Stub type of NLog.Targets.FileTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.AttachBackingFieldToLayout">
            <summary>Attaches delegates to emulate StubFileTarget.Layout as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubFileTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.CloseTarget">
            <summary>Sets the stub of FileTarget.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.CloseTarget01">
            <summary>Sets the stub of FileTarget.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of FileTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of FileTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>Sets the stub of FileTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.GetBytesToWriteLogEventInfo">
            <summary>Sets the stub of FileTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>Sets the stub of FileTarget.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.GetFormattedMessageLogEventInfo">
            <summary>Sets the stub of FileTarget.GetFormattedMessage(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.InitializeStub">
            <summary>Initializes a new instance of type StubFileTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.InitializeTarget">
            <summary>Sets the stub of FileTarget.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.InitializeTarget01">
            <summary>Sets the stub of FileTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubFileTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubFileTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubFileTarget.Layout">
            <summary>Sets the stub of TargetWithLayoutHeaderAndFooter.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.LayoutGet">
            <summary>Sets the stub of TargetWithLayoutHeaderAndFooter.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.LayoutSetLayout">
            <summary>Sets the stub of TargetWithLayoutHeaderAndFooter.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.RenderFormattedMessage(NLog.LogEventInfo,System.Text.StringBuilder)">
            <summary>Sets the stub of FileTarget.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.RenderFormattedMessageLogEventInfoStringBuilder">
            <summary>Sets the stub of FileTarget.RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.TransformBytes(System.Byte[])">
            <summary>Sets the stub of FileTarget.TransformBytes(Byte[] value)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.TransformBytesByteArray">
            <summary>Sets the stub of FileTarget.TransformBytes(Byte[] value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of FileTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of FileTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of FileTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of FileTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubFileTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of FileTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubFileTarget.WriteLogEventInfo">
            <summary>Sets the stub of FileTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubIFileCompressor">
            <summary>Stub type of NLog.Targets.IFileCompressor</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubIFileCompressor.#ctor">
            <summary>Initializes a new instance of type StubIFileCompressor</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubIFileCompressor.CompressFileStringString">
            <summary>Sets the stub of IFileCompressor.CompressFile(String fileName, String archiveFileName)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubIFileCompressor.NLog#Targets#IFileCompressor#CompressFile(System.String,System.String)">
            <summary>Sets the stub of IFileCompressor.CompressFile(String fileName, String archiveFileName)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubIJsonSerializer">
            <summary>Stub type of NLog.Targets.IJsonSerializer</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubIJsonSerializer.#ctor">
            <summary>Initializes a new instance of type StubIJsonSerializer</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubIJsonSerializer.NLog#Targets#IJsonSerializer#SerializeObject(System.Object)">
            <summary>Sets the stub of IJsonSerializer.SerializeObject(Object value)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubIJsonSerializer.SerializeObjectObject">
            <summary>Sets the stub of IJsonSerializer.SerializeObject(Object value)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget">
            <summary>Stub type of NLog.Targets.LogReceiverWebServiceTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.AttachBackingFieldToEndpointAddress">
            <summary>Attaches delegates to emulate StubLogReceiverWebServiceTarget.EndpointAddress as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.CreateLogReceiver">
            <summary>Sets the stub of LogReceiverWebServiceTarget.CreateLogReceiver()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.CreateLogReceiver01">
            <summary>Sets the stub of LogReceiverWebServiceTarget.CreateLogReceiver()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.CreateWcfLogReceiverClient">
            <summary>Sets the stub of LogReceiverWebServiceTarget.CreateWcfLogReceiverClient()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.CreateWcfLogReceiverClient01">
            <summary>Sets the stub of LogReceiverWebServiceTarget.CreateWcfLogReceiverClient()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.EndpointAddress">
            <summary>Sets the stub of LogReceiverWebServiceTarget.get_EndpointAddress()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.EndpointAddressGet">
            <summary>Sets the stub of LogReceiverWebServiceTarget.get_EndpointAddress()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.EndpointAddressSetString">
            <summary>Sets the stub of LogReceiverWebServiceTarget.set_EndpointAddress(String value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of LogReceiverWebServiceTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of LogReceiverWebServiceTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.InitializeStub">
            <summary>Initializes a new instance of type StubLogReceiverWebServiceTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.OnSend(NLog.LogReceiverService.NLogEvents,System.Collections.Generic.IEnumerable{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of LogReceiverWebServiceTarget.OnSend(NLogEvents events, IEnumerable`1&lt;AsyncLogEventInfo&gt; asyncContinuations)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.OnSendNLogEventsIEnumerableOfAsyncLogEventInfo">
            <summary>Sets the stub of LogReceiverWebServiceTarget.OnSend(NLogEvents events, IEnumerable`1&lt;AsyncLogEventInfo&gt; asyncContinuations)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of LogReceiverWebServiceTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of LogReceiverWebServiceTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of LogReceiverWebServiceTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of LogReceiverWebServiceTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of LogReceiverWebServiceTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of LogReceiverWebServiceTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubLogReceiverWebServiceTarget.WriteLogEventInfo">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubMailTarget">
            <summary>Stub type of NLog.Targets.MailTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.AttachBackingFieldToLayout">
            <summary>Attaches delegates to emulate StubMailTarget.Layout as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubMailTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.InitializeStub">
            <summary>Initializes a new instance of type StubMailTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.InitializeTarget">
            <summary>Sets the stub of MailTarget.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.InitializeTarget01">
            <summary>Sets the stub of MailTarget.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubMailTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubMailTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubMailTarget.Layout">
            <summary>Sets the stub of TargetWithLayoutHeaderAndFooter.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.LayoutGet">
            <summary>Sets the stub of TargetWithLayoutHeaderAndFooter.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.LayoutSetLayout">
            <summary>Sets the stub of TargetWithLayoutHeaderAndFooter.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of MailTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of MailTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of MailTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of MailTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of MailTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMailTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of MailTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMailTarget.WriteLogEventInfo">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubMethodCallParameter">
            <summary>Stub type of NLog.Targets.MethodCallParameter</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallParameter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallParameter.#ctor(NLog.Layouts.Layout)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallParameter.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallParameter.#ctor(System.String,NLog.Layouts.Layout,System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubMethodCallParameter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallParameter.InitializeStub">
            <summary>Initializes a new instance of type StubMethodCallParameter</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubMethodCallParameter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubMethodCallParameter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubMethodCallTargetBase">
            <summary>Stub type of NLog.Targets.MethodCallTargetBase</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubMethodCallTargetBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.DoInvoke(System.Object[])">
            <summary>Sets the stub of MethodCallTargetBase.DoInvoke(Object[] parameters)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of MethodCallTargetBase.DoInvoke(Object[] parameters, AsyncContinuation continuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.DoInvokeObjectArray">
            <summary>Sets the stub of MethodCallTargetBase.DoInvoke(Object[] parameters)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.DoInvokeObjectArrayAsyncContinuation">
            <summary>Sets the stub of MethodCallTargetBase.DoInvoke(Object[] parameters, AsyncContinuation continuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.InitializeStub">
            <summary>Initializes a new instance of type StubMethodCallTargetBase</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubMethodCallTargetBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubMethodCallTargetBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of MethodCallTargetBase.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.WriteAsyncLogEventInfo">
            <summary>Sets the stub of MethodCallTargetBase.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubMethodCallTargetBase.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubMethodCallTargetBase.WriteLogEventInfo">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubNLogViewerParameterInfo">
            <summary>Stub type of NLog.Targets.NLogViewerParameterInfo</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerParameterInfo.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNLogViewerParameterInfo.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerParameterInfo.InitializeStub">
            <summary>Initializes a new instance of type StubNLogViewerParameterInfo</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNLogViewerParameterInfo.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNLogViewerParameterInfo.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubNLogViewerTarget">
            <summary>Stub type of NLog.Targets.NLogViewerTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.AttachBackingFieldToLayout">
            <summary>Attaches delegates to emulate StubNLogViewerTarget.Layout as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNLogViewerTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.CloseTarget">
            <summary>Sets the stub of NetworkTarget.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.CloseTarget01">
            <summary>Sets the stub of NetworkTarget.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of NetworkTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of NetworkTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>Sets the stub of NetworkTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.GetBytesToWriteLogEventInfo">
            <summary>Sets the stub of NetworkTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.InitializeStub">
            <summary>Initializes a new instance of type StubNLogViewerTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNLogViewerTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNLogViewerTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNLogViewerTarget.Layout">
            <summary>Sets the stub of NLogViewerTarget.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.LayoutGet">
            <summary>Sets the stub of NLogViewerTarget.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.LayoutSetLayout">
            <summary>Sets the stub of NLogViewerTarget.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of NetworkTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of NetworkTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNLogViewerTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNLogViewerTarget.WriteLogEventInfo">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubNetworkTarget">
            <summary>Stub type of NLog.Targets.NetworkTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.AttachBackingFieldToLayout">
            <summary>Attaches delegates to emulate StubNetworkTarget.Layout as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNetworkTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.CloseTarget">
            <summary>Sets the stub of NetworkTarget.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.CloseTarget01">
            <summary>Sets the stub of NetworkTarget.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of NetworkTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of NetworkTarget.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>Sets the stub of NetworkTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.GetBytesToWriteLogEventInfo">
            <summary>Sets the stub of NetworkTarget.GetBytesToWrite(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.InitializeStub">
            <summary>Initializes a new instance of type StubNetworkTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNetworkTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNetworkTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubNetworkTarget.Layout">
            <summary>Sets the stub of TargetWithLayout.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.LayoutGet">
            <summary>Sets the stub of TargetWithLayout.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.LayoutSetLayout">
            <summary>Sets the stub of TargetWithLayout.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of NetworkTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of NetworkTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubNetworkTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubNetworkTarget.WriteLogEventInfo">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubPerformanceCounterTarget">
            <summary>Stub type of NLog.Targets.PerformanceCounterTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubPerformanceCounterTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.CloseTarget">
            <summary>Sets the stub of PerformanceCounterTarget.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.CloseTarget01">
            <summary>Sets the stub of PerformanceCounterTarget.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.InitializeStub">
            <summary>Initializes a new instance of type StubPerformanceCounterTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubPerformanceCounterTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubPerformanceCounterTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of PerformanceCounterTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubPerformanceCounterTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubPerformanceCounterTarget.WriteLogEventInfo">
            <summary>Sets the stub of PerformanceCounterTarget.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubTarget">
            <summary>Stub type of NLog.Targets.Target</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.InitializeStub">
            <summary>Initializes a new instance of type StubTarget</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTarget.WriteLogEventInfo">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubTargetWithLayout">
            <summary>Stub type of NLog.Targets.TargetWithLayout</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.AttachBackingFieldToLayout">
            <summary>Attaches delegates to emulate StubTargetWithLayout.Layout as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTargetWithLayout.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.InitializeStub">
            <summary>Initializes a new instance of type StubTargetWithLayout</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTargetWithLayout.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTargetWithLayout.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTargetWithLayout.Layout">
            <summary>Sets the stub of TargetWithLayout.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.LayoutGet">
            <summary>Sets the stub of TargetWithLayout.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.LayoutSetLayout">
            <summary>Sets the stub of TargetWithLayout.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.WriteAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayout.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayout.WriteLogEventInfo">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter">
            <summary>Stub type of NLog.Targets.TargetWithLayoutHeaderAndFooter</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.AttachBackingFieldToLayout">
            <summary>Attaches delegates to emulate StubTargetWithLayoutHeaderAndFooter.Layout as a property with a backing field.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of Target.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.InitializeStub">
            <summary>Initializes a new instance of type StubTargetWithLayoutHeaderAndFooter</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.Layout">
            <summary>Sets the stub of TargetWithLayoutHeaderAndFooter.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.LayoutGet">
            <summary>Sets the stub of TargetWithLayoutHeaderAndFooter.get_Layout()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.LayoutSetLayout">
            <summary>Sets the stub of TargetWithLayoutHeaderAndFooter.set_Layout(Layout value)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.ToString">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.ToString01">
            <summary>Sets the stub of Target.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.WriteAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Fakes.StubTargetWithLayoutHeaderAndFooter.WriteLogEventInfo">
            <summary>Sets the stub of Target.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper">
            <summary>Shim type of NLog.Targets.Wrappers.AsyncTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.#ctor(NLog.Targets.Wrappers.AsyncTargetWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.BatchSizeGet">
            <summary>Sets the shim of AsyncTargetWrapper.get_BatchSize()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.BatchSizeSetInt32">
            <summary>Sets the shim of AsyncTargetWrapper.set_BatchSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.CloseTarget">
            <summary>Sets the shim of AsyncTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of AsyncTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.FlushEventsInQueueObject">
            <summary>Sets the shim of AsyncTargetWrapper.FlushEventsInQueue(Object state)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.FullBatchSizeWriteLimitGet">
            <summary>Sets the shim of AsyncTargetWrapper.get_FullBatchSizeWriteLimit()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.FullBatchSizeWriteLimitSetInt32">
            <summary>Sets the shim of AsyncTargetWrapper.set_FullBatchSizeWriteLimit(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.InitializeTarget">
            <summary>Sets the shim of AsyncTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.OverflowActionGet">
            <summary>Sets the shim of AsyncTargetWrapper.get_OverflowAction()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.OverflowActionSetAsyncTargetWrapperOverflowAction">
            <summary>Sets the shim of AsyncTargetWrapper.set_OverflowAction(AsyncTargetWrapperOverflowAction value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.ProcessPendingEventsObject">
            <summary>Sets the shim of AsyncTargetWrapper.ProcessPendingEvents(Object state)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.QueueLimitGet">
            <summary>Sets the shim of AsyncTargetWrapper.get_QueueLimit()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.QueueLimitSetInt32">
            <summary>Sets the shim of AsyncTargetWrapper.set_QueueLimit(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.StartInstantWriterTimer">
            <summary>Sets the shim of AsyncTargetWrapper.StartInstantWriterTimer()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.StartLazyWriterTimer">
            <summary>Sets the shim of AsyncTargetWrapper.StartLazyWriterTimer()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.StopLazyWriterThread">
            <summary>Sets the shim of AsyncTargetWrapper.StopLazyWriterThread()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.TimeToSleepBetweenBatchesGet">
            <summary>Sets the shim of AsyncTargetWrapper.get_TimeToSleepBetweenBatches()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.TimeToSleepBetweenBatchesSetInt32">
            <summary>Sets the shim of AsyncTargetWrapper.set_TimeToSleepBetweenBatches(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of AsyncTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the shim of AsyncTargetWrapper.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.AllInstances.WriteEventsInQueueInt32String">
            <summary>Sets the shim of AsyncTargetWrapper.WriteEventsInQueue(Int32 batchSize, String reason)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.BatchSizeGet">
            <summary>Sets the shim of AsyncTargetWrapper.get_BatchSize()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.BatchSizeSetInt32">
            <summary>Sets the shim of AsyncTargetWrapper.set_BatchSize(Int32 value)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.CloseTarget">
            <summary>Sets the shim of AsyncTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.Constructor">
            <summary>Sets the shim of AsyncTargetWrapper.AsyncTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.ConstructorStringTarget">
            <summary>Sets the shim of AsyncTargetWrapper.AsyncTargetWrapper(String name, Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.ConstructorTarget">
            <summary>Sets the shim of AsyncTargetWrapper.AsyncTargetWrapper(Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.ConstructorTargetInt32AsyncTargetWrapperOverflowAction">
            <summary>Sets the shim of AsyncTargetWrapper.AsyncTargetWrapper(Target wrappedTarget, Int32 queueLimit, AsyncTargetWrapperOverflowAction overflowAction)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of AsyncTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.FlushEventsInQueueObject">
            <summary>Sets the shim of AsyncTargetWrapper.FlushEventsInQueue(Object state)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.FullBatchSizeWriteLimitGet">
            <summary>Sets the shim of AsyncTargetWrapper.get_FullBatchSizeWriteLimit()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.FullBatchSizeWriteLimitSetInt32">
            <summary>Sets the shim of AsyncTargetWrapper.set_FullBatchSizeWriteLimit(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.InitializeTarget">
            <summary>Sets the shim of AsyncTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.OverflowActionGet">
            <summary>Sets the shim of AsyncTargetWrapper.get_OverflowAction()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.OverflowActionSetAsyncTargetWrapperOverflowAction">
            <summary>Sets the shim of AsyncTargetWrapper.set_OverflowAction(AsyncTargetWrapperOverflowAction value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.ProcessPendingEventsObject">
            <summary>Sets the shim of AsyncTargetWrapper.ProcessPendingEvents(Object state)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.QueueLimitGet">
            <summary>Sets the shim of AsyncTargetWrapper.get_QueueLimit()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.QueueLimitSetInt32">
            <summary>Sets the shim of AsyncTargetWrapper.set_QueueLimit(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.StartInstantWriterTimer">
            <summary>Sets the shim of AsyncTargetWrapper.StartInstantWriterTimer()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.StartLazyWriterTimer">
            <summary>Sets the shim of AsyncTargetWrapper.StartLazyWriterTimer()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.StopLazyWriterThread">
            <summary>Sets the shim of AsyncTargetWrapper.StopLazyWriterThread()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.TimeToSleepBetweenBatchesGet">
            <summary>Sets the shim of AsyncTargetWrapper.get_TimeToSleepBetweenBatches()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.TimeToSleepBetweenBatchesSetInt32">
            <summary>Sets the shim of AsyncTargetWrapper.set_TimeToSleepBetweenBatches(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the shim of AsyncTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the shim of AsyncTargetWrapper.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAsyncTargetWrapper.WriteEventsInQueueInt32String">
            <summary>Sets the shim of AsyncTargetWrapper.WriteEventsInQueue(Int32 batchSize, String reason)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper">
            <summary>Shim type of NLog.Targets.Wrappers.AutoFlushTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.#ctor(NLog.Targets.Wrappers.AutoFlushTargetWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AllInstances.AsyncFlushGet">
            <summary>Sets the shim of AutoFlushTargetWrapper.get_AsyncFlush()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AllInstances.AsyncFlushSetBoolean">
            <summary>Sets the shim of AutoFlushTargetWrapper.set_AsyncFlush(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AllInstances.CloseTarget">
            <summary>Sets the shim of AutoFlushTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AllInstances.ConditionGet">
            <summary>Sets the shim of AutoFlushTargetWrapper.get_Condition()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AllInstances.ConditionSetConditionExpression">
            <summary>Sets the shim of AutoFlushTargetWrapper.set_Condition(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of AutoFlushTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AllInstances.InitializeTarget">
            <summary>Sets the shim of AutoFlushTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of AutoFlushTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AsyncFlushGet">
            <summary>Sets the shim of AutoFlushTargetWrapper.get_AsyncFlush()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.AsyncFlushSetBoolean">
            <summary>Sets the shim of AutoFlushTargetWrapper.set_AsyncFlush(Boolean value)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.CloseTarget">
            <summary>Sets the shim of AutoFlushTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.ConditionGet">
            <summary>Sets the shim of AutoFlushTargetWrapper.get_Condition()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.ConditionSetConditionExpression">
            <summary>Sets the shim of AutoFlushTargetWrapper.set_Condition(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.Constructor">
            <summary>Sets the shim of AutoFlushTargetWrapper.AutoFlushTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.ConstructorStringTarget">
            <summary>Sets the shim of AutoFlushTargetWrapper.AutoFlushTargetWrapper(String name, Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.ConstructorTarget">
            <summary>Sets the shim of AutoFlushTargetWrapper.AutoFlushTargetWrapper(Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of AutoFlushTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.InitializeTarget">
            <summary>Sets the shim of AutoFlushTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the shim of AutoFlushTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimAutoFlushTargetWrapper._Writeb__2Exception">
            <summary>Sets the shim of AutoFlushTargetWrapper.&lt;Write&gt;b__2(Exception e)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper">
            <summary>Shim type of NLog.Targets.Wrappers.BufferingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.#ctor(NLog.Targets.Wrappers.BufferingTargetWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.BufferSizeGet">
            <summary>Sets the shim of BufferingTargetWrapper.get_BufferSize()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.BufferSizeSetInt32">
            <summary>Sets the shim of BufferingTargetWrapper.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.CloseTarget">
            <summary>Sets the shim of BufferingTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of BufferingTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.FlushCallbackObject">
            <summary>Sets the shim of BufferingTargetWrapper.FlushCallback(Object state)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.FlushTimeoutGet">
            <summary>Sets the shim of BufferingTargetWrapper.get_FlushTimeout()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.FlushTimeoutSetInt32">
            <summary>Sets the shim of BufferingTargetWrapper.set_FlushTimeout(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.InitializeTarget">
            <summary>Sets the shim of BufferingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.SlidingTimeoutGet">
            <summary>Sets the shim of BufferingTargetWrapper.get_SlidingTimeout()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.SlidingTimeoutSetBoolean">
            <summary>Sets the shim of BufferingTargetWrapper.set_SlidingTimeout(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of BufferingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.AllInstances.WriteEventsInBufferString">
            <summary>Sets the shim of BufferingTargetWrapper.WriteEventsInBuffer(String reason)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.BufferSizeGet">
            <summary>Sets the shim of BufferingTargetWrapper.get_BufferSize()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.BufferSizeSetInt32">
            <summary>Sets the shim of BufferingTargetWrapper.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.CloseTarget">
            <summary>Sets the shim of BufferingTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.Constructor">
            <summary>Sets the shim of BufferingTargetWrapper.BufferingTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.ConstructorStringTarget">
            <summary>Sets the shim of BufferingTargetWrapper.BufferingTargetWrapper(String name, Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.ConstructorTarget">
            <summary>Sets the shim of BufferingTargetWrapper.BufferingTargetWrapper(Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.ConstructorTargetInt32">
            <summary>Sets the shim of BufferingTargetWrapper.BufferingTargetWrapper(Target wrappedTarget, Int32 bufferSize)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.ConstructorTargetInt32Int32">
            <summary>Sets the shim of BufferingTargetWrapper.BufferingTargetWrapper(Target wrappedTarget, Int32 bufferSize, Int32 flushTimeout)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of BufferingTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.FlushCallbackObject">
            <summary>Sets the shim of BufferingTargetWrapper.FlushCallback(Object state)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.FlushTimeoutGet">
            <summary>Sets the shim of BufferingTargetWrapper.get_FlushTimeout()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.FlushTimeoutSetInt32">
            <summary>Sets the shim of BufferingTargetWrapper.set_FlushTimeout(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.InitializeTarget">
            <summary>Sets the shim of BufferingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.SlidingTimeoutGet">
            <summary>Sets the shim of BufferingTargetWrapper.get_SlidingTimeout()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.SlidingTimeoutSetBoolean">
            <summary>Sets the shim of BufferingTargetWrapper.set_SlidingTimeout(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the shim of BufferingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimBufferingTargetWrapper.WriteEventsInBufferString">
            <summary>Sets the shim of BufferingTargetWrapper.WriteEventsInBuffer(String reason)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase">
            <summary>Shim type of NLog.Targets.Wrappers.CompoundTargetBase</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.#ctor(NLog.Targets.Wrappers.CompoundTargetBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.AllInstances.TargetsGet">
            <summary>Sets the shim of CompoundTargetBase.get_Targets()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.AllInstances.TargetsSetIListOfTarget">
            <summary>Sets the shim of CompoundTargetBase.set_Targets(IList`1&lt;Target&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.AllInstances.ToString01">
            <summary>Sets the shim of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.ConstructorTargetArray">
            <summary>Sets the shim of CompoundTargetBase.CompoundTargetBase(Target[] targets)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.TargetsGet">
            <summary>Sets the shim of CompoundTargetBase.get_Targets()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.TargetsSetIListOfTarget">
            <summary>Sets the shim of CompoundTargetBase.set_Targets(IList`1&lt;Target&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.ToString">
            <summary>Sets the shim of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase.WriteLogEventInfo">
            <summary>Sets the shim of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimCompoundTargetBase._FlushAsyncb__0TargetAsyncContinuation">
            <summary>Sets the shim of CompoundTargetBase.&lt;FlushAsync&gt;b__0(Target t, AsyncContinuation c)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget">
            <summary>Shim type of NLog.Targets.Wrappers.FallbackGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.#ctor(NLog.Targets.Wrappers.FallbackGroupTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.AllInstances.ReturnToFirstOnSuccessGet">
            <summary>Sets the shim of FallbackGroupTarget.get_ReturnToFirstOnSuccess()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.AllInstances.ReturnToFirstOnSuccessSetBoolean">
            <summary>Sets the shim of FallbackGroupTarget.set_ReturnToFirstOnSuccess(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of FallbackGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.Constructor">
            <summary>Sets the shim of FallbackGroupTarget.FallbackGroupTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.ConstructorStringTargetArray">
            <summary>Sets the shim of FallbackGroupTarget.FallbackGroupTarget(String name, Target[] targets)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.ConstructorTargetArray">
            <summary>Sets the shim of FallbackGroupTarget.FallbackGroupTarget(Target[] targets)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.ReturnToFirstOnSuccessGet">
            <summary>Sets the shim of FallbackGroupTarget.get_ReturnToFirstOnSuccess()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.ReturnToFirstOnSuccessSetBoolean">
            <summary>Sets the shim of FallbackGroupTarget.set_ReturnToFirstOnSuccess(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFallbackGroupTarget.WriteAsyncLogEventInfo">
            <summary>Sets the shim of FallbackGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimFilteringRule">
            <summary>Shim type of NLog.Targets.Wrappers.FilteringRule</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.#ctor(NLog.Targets.Wrappers.FilteringRule)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.AllInstances.ExistsGet">
            <summary>Sets the shim of FilteringRule.get_Exists()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.AllInstances.ExistsSetConditionExpression">
            <summary>Sets the shim of FilteringRule.set_Exists(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.AllInstances.FilterGet">
            <summary>Sets the shim of FilteringRule.get_Filter()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.AllInstances.FilterSetConditionExpression">
            <summary>Sets the shim of FilteringRule.set_Filter(ConditionExpression value)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.Constructor">
            <summary>Sets the shim of FilteringRule.FilteringRule()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.ConstructorConditionExpressionConditionExpression">
            <summary>Sets the shim of FilteringRule.FilteringRule(ConditionExpression whenExistsExpression, ConditionExpression filterToApply)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.ExistsGet">
            <summary>Sets the shim of FilteringRule.get_Exists()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.ExistsSetConditionExpression">
            <summary>Sets the shim of FilteringRule.set_Exists(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.FilterGet">
            <summary>Sets the shim of FilteringRule.get_Filter()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringRule.FilterSetConditionExpression">
            <summary>Sets the shim of FilteringRule.set_Filter(ConditionExpression value)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper">
            <summary>Shim type of NLog.Targets.Wrappers.FilteringTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.#ctor(NLog.Targets.Wrappers.FilteringTargetWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.AllInstances.ConditionGet">
            <summary>Sets the shim of FilteringTargetWrapper.get_Condition()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.AllInstances.ConditionSetConditionExpression">
            <summary>Sets the shim of FilteringTargetWrapper.set_Condition(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of FilteringTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.ConditionGet">
            <summary>Sets the shim of FilteringTargetWrapper.get_Condition()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.ConditionSetConditionExpression">
            <summary>Sets the shim of FilteringTargetWrapper.set_Condition(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.Constructor">
            <summary>Sets the shim of FilteringTargetWrapper.FilteringTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.ConstructorStringTargetConditionExpression">
            <summary>Sets the shim of FilteringTargetWrapper.FilteringTargetWrapper(String name, Target wrappedTarget, ConditionExpression condition)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.ConstructorTargetConditionExpression">
            <summary>Sets the shim of FilteringTargetWrapper.FilteringTargetWrapper(Target wrappedTarget, ConditionExpression condition)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.StaticConstructor">
            <summary>Sets the shim of FilteringTargetWrapper.FilteringTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimFilteringTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the shim of FilteringTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper">
            <summary>Shim type of NLog.Targets.Wrappers.ImpersonatingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.#ctor(NLog.Targets.Wrappers.ImpersonatingTargetWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.CloseTarget">
            <summary>Sets the shim of ImpersonatingTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.DoImpersonate">
            <summary>Sets the shim of ImpersonatingTargetWrapper.DoImpersonate()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.DomainGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_Domain()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.DomainSetString">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_Domain(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of ImpersonatingTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.ImpersonationLevelGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_ImpersonationLevel()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.ImpersonationLevelSetSecurityImpersonationLevel">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_ImpersonationLevel(SecurityImpersonationLevel value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.InitializeTarget">
            <summary>Sets the shim of ImpersonatingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.LogOnProviderGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_LogOnProvider()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.LogOnProviderSetLogOnProviderType">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_LogOnProvider(LogOnProviderType value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.LogOnTypeGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_LogOnType()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.LogOnTypeSetSecurityLogOnType">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_LogOnType(SecurityLogOnType value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.PasswordGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_Password()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.PasswordSetString">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_Password(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.RevertToSelfGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_RevertToSelf()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.RevertToSelfSetBoolean">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_RevertToSelf(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.UserNameGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_UserName()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.UserNameSetString">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_UserName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of ImpersonatingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of ImpersonatingTargetWrapper.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.AllInstances.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of ImpersonatingTargetWrapper.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.CloseTarget">
            <summary>Sets the shim of ImpersonatingTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.Constructor">
            <summary>Sets the shim of ImpersonatingTargetWrapper.ImpersonatingTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.ConstructorStringTarget">
            <summary>Sets the shim of ImpersonatingTargetWrapper.ImpersonatingTargetWrapper(String name, Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.ConstructorTarget">
            <summary>Sets the shim of ImpersonatingTargetWrapper.ImpersonatingTargetWrapper(Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.DoImpersonate">
            <summary>Sets the shim of ImpersonatingTargetWrapper.DoImpersonate()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.DomainGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_Domain()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.DomainSetString">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_Domain(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of ImpersonatingTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.ImpersonationLevelGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_ImpersonationLevel()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.ImpersonationLevelSetSecurityImpersonationLevel">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_ImpersonationLevel(SecurityImpersonationLevel value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.InitializeTarget">
            <summary>Sets the shim of ImpersonatingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.LogOnProviderGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_LogOnProvider()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.LogOnProviderSetLogOnProviderType">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_LogOnProvider(LogOnProviderType value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.LogOnTypeGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_LogOnType()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.LogOnTypeSetSecurityLogOnType">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_LogOnType(SecurityLogOnType value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.PasswordGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_Password()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.PasswordSetString">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_Password(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.RevertToSelfGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_RevertToSelf()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.RevertToSelfSetBoolean">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_RevertToSelf(Boolean value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.UserNameGet">
            <summary>Sets the shim of ImpersonatingTargetWrapper.get_UserName()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.UserNameSetString">
            <summary>Sets the shim of ImpersonatingTargetWrapper.set_UserName(String value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the shim of ImpersonatingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of ImpersonatingTargetWrapper.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimImpersonatingTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of ImpersonatingTargetWrapper.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper">
            <summary>Shim type of NLog.Targets.Wrappers.LimitingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.#ctor(NLog.Targets.Wrappers.LimitingTargetWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.InitializeTarget">
            <summary>Sets the shim of LimitingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.IntervalGet">
            <summary>Sets the shim of LimitingTargetWrapper.get_Interval()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.IntervalResetsAtGet">
            <summary>Sets the shim of LimitingTargetWrapper.get_IntervalResetsAt()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.IntervalSetTimeSpan">
            <summary>Sets the shim of LimitingTargetWrapper.set_Interval(TimeSpan value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.IsIntervalExpired">
            <summary>Sets the shim of LimitingTargetWrapper.IsIntervalExpired()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.MessageLimitGet">
            <summary>Sets the shim of LimitingTargetWrapper.get_MessageLimit()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.MessageLimitSetInt32">
            <summary>Sets the shim of LimitingTargetWrapper.set_MessageLimit(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.MessagesWrittenCountGet">
            <summary>Sets the shim of LimitingTargetWrapper.get_MessagesWrittenCount()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.MessagesWrittenCountSetInt32">
            <summary>Sets the shim of LimitingTargetWrapper.set_MessagesWrittenCount(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.ResetInterval">
            <summary>Sets the shim of LimitingTargetWrapper.ResetInterval()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of LimitingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.Constructor">
            <summary>Sets the shim of LimitingTargetWrapper.LimitingTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.ConstructorStringTarget">
            <summary>Sets the shim of LimitingTargetWrapper.LimitingTargetWrapper(String name, Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.ConstructorTarget">
            <summary>Sets the shim of LimitingTargetWrapper.LimitingTargetWrapper(Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.ConstructorTargetInt32TimeSpan">
            <summary>Sets the shim of LimitingTargetWrapper.LimitingTargetWrapper(Target wrappedTarget, Int32 messageLimit, TimeSpan interval)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.InitializeTarget">
            <summary>Sets the shim of LimitingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.IntervalGet">
            <summary>Sets the shim of LimitingTargetWrapper.get_Interval()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.IntervalResetsAtGet">
            <summary>Sets the shim of LimitingTargetWrapper.get_IntervalResetsAt()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.IntervalSetTimeSpan">
            <summary>Sets the shim of LimitingTargetWrapper.set_Interval(TimeSpan value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.IsIntervalExpired">
            <summary>Sets the shim of LimitingTargetWrapper.IsIntervalExpired()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.MessageLimitGet">
            <summary>Sets the shim of LimitingTargetWrapper.get_MessageLimit()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.MessageLimitSetInt32">
            <summary>Sets the shim of LimitingTargetWrapper.set_MessageLimit(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.MessagesWrittenCountGet">
            <summary>Sets the shim of LimitingTargetWrapper.get_MessagesWrittenCount()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.MessagesWrittenCountSetInt32">
            <summary>Sets the shim of LimitingTargetWrapper.set_MessagesWrittenCount(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.ResetInterval">
            <summary>Sets the shim of LimitingTargetWrapper.ResetInterval()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimLimitingTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the shim of LimitingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper">
            <summary>Shim type of NLog.Targets.Wrappers.PostFilteringTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.#ctor(NLog.Targets.Wrappers.PostFilteringTargetWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.AllInstances.DefaultFilterGet">
            <summary>Sets the shim of PostFilteringTargetWrapper.get_DefaultFilter()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.AllInstances.DefaultFilterSetConditionExpression">
            <summary>Sets the shim of PostFilteringTargetWrapper.set_DefaultFilter(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.AllInstances.RulesGet">
            <summary>Sets the shim of PostFilteringTargetWrapper.get_Rules()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.AllInstances.RulesSetIListOfFilteringRule">
            <summary>Sets the shim of PostFilteringTargetWrapper.set_Rules(IList`1&lt;FilteringRule&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.AllInstances.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of PostFilteringTargetWrapper.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.AllInstances.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of PostFilteringTargetWrapper.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.Constructor">
            <summary>Sets the shim of PostFilteringTargetWrapper.PostFilteringTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.ConstructorStringTarget">
            <summary>Sets the shim of PostFilteringTargetWrapper.PostFilteringTargetWrapper(String name, Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.ConstructorTarget">
            <summary>Sets the shim of PostFilteringTargetWrapper.PostFilteringTargetWrapper(Target wrappedTarget)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.DefaultFilterGet">
            <summary>Sets the shim of PostFilteringTargetWrapper.get_DefaultFilter()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.DefaultFilterSetConditionExpression">
            <summary>Sets the shim of PostFilteringTargetWrapper.set_DefaultFilter(ConditionExpression value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.RulesGet">
            <summary>Sets the shim of PostFilteringTargetWrapper.get_Rules()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.RulesSetIListOfFilteringRule">
            <summary>Sets the shim of PostFilteringTargetWrapper.set_Rules(IList`1&lt;FilteringRule&gt; value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.StaticConstructor">
            <summary>Sets the shim of PostFilteringTargetWrapper.PostFilteringTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of PostFilteringTargetWrapper.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimPostFilteringTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of PostFilteringTargetWrapper.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget">
            <summary>Shim type of NLog.Targets.Wrappers.RandomizeGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.#ctor(NLog.Targets.Wrappers.RandomizeGroupTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of RandomizeGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.Constructor">
            <summary>Sets the shim of RandomizeGroupTarget.RandomizeGroupTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.ConstructorStringTargetArray">
            <summary>Sets the shim of RandomizeGroupTarget.RandomizeGroupTarget(String name, Target[] targets)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.ConstructorTargetArray">
            <summary>Sets the shim of RandomizeGroupTarget.RandomizeGroupTarget(Target[] targets)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRandomizeGroupTarget.WriteAsyncLogEventInfo">
            <summary>Sets the shim of RandomizeGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper">
            <summary>Shim type of NLog.Targets.Wrappers.RepeatingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.#ctor(NLog.Targets.Wrappers.RepeatingTargetWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.AllInstances.RepeatCountGet">
            <summary>Sets the shim of RepeatingTargetWrapper.get_RepeatCount()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.AllInstances.RepeatCountSetInt32">
            <summary>Sets the shim of RepeatingTargetWrapper.set_RepeatCount(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of RepeatingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.Constructor">
            <summary>Sets the shim of RepeatingTargetWrapper.RepeatingTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.ConstructorStringTargetInt32">
            <summary>Sets the shim of RepeatingTargetWrapper.RepeatingTargetWrapper(String name, Target wrappedTarget, Int32 repeatCount)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.ConstructorTargetInt32">
            <summary>Sets the shim of RepeatingTargetWrapper.RepeatingTargetWrapper(Target wrappedTarget, Int32 repeatCount)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.RepeatCountGet">
            <summary>Sets the shim of RepeatingTargetWrapper.get_RepeatCount()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.RepeatCountSetInt32">
            <summary>Sets the shim of RepeatingTargetWrapper.set_RepeatCount(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRepeatingTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the shim of RepeatingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper">
            <summary>Shim type of NLog.Targets.Wrappers.RetryingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.#ctor(NLog.Targets.Wrappers.RetryingTargetWrapper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.AllInstances.RetryCountGet">
            <summary>Sets the shim of RetryingTargetWrapper.get_RetryCount()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.AllInstances.RetryCountSetInt32">
            <summary>Sets the shim of RetryingTargetWrapper.set_RetryCount(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.AllInstances.RetryDelayMillisecondsGet">
            <summary>Sets the shim of RetryingTargetWrapper.get_RetryDelayMilliseconds()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.AllInstances.RetryDelayMillisecondsSetInt32">
            <summary>Sets the shim of RetryingTargetWrapper.set_RetryDelayMilliseconds(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of RetryingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.AllInstances.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the shim of RetryingTargetWrapper.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.AllInstances.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the shim of RetryingTargetWrapper.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.Constructor">
            <summary>Sets the shim of RetryingTargetWrapper.RetryingTargetWrapper()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.ConstructorStringTargetInt32Int32">
            <summary>Sets the shim of RetryingTargetWrapper.RetryingTargetWrapper(String name, Target wrappedTarget, Int32 retryCount, Int32 retryDelayMilliseconds)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.ConstructorTargetInt32Int32">
            <summary>Sets the shim of RetryingTargetWrapper.RetryingTargetWrapper(Target wrappedTarget, Int32 retryCount, Int32 retryDelayMilliseconds)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.RetryCountGet">
            <summary>Sets the shim of RetryingTargetWrapper.get_RetryCount()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.RetryCountSetInt32">
            <summary>Sets the shim of RetryingTargetWrapper.set_RetryCount(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.RetryDelayMillisecondsGet">
            <summary>Sets the shim of RetryingTargetWrapper.get_RetryDelayMilliseconds()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.RetryDelayMillisecondsSetInt32">
            <summary>Sets the shim of RetryingTargetWrapper.set_RetryDelayMilliseconds(Int32 value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the shim of RetryingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the shim of RetryingTargetWrapper.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRetryingTargetWrapper.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the shim of RetryingTargetWrapper.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget">
            <summary>Shim type of NLog.Targets.Wrappers.RoundRobinGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.#ctor(NLog.Targets.Wrappers.RoundRobinGroupTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of RoundRobinGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.Constructor">
            <summary>Sets the shim of RoundRobinGroupTarget.RoundRobinGroupTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.ConstructorStringTargetArray">
            <summary>Sets the shim of RoundRobinGroupTarget.RoundRobinGroupTarget(String name, Target[] targets)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.ConstructorTargetArray">
            <summary>Sets the shim of RoundRobinGroupTarget.RoundRobinGroupTarget(Target[] targets)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimRoundRobinGroupTarget.WriteAsyncLogEventInfo">
            <summary>Sets the shim of RoundRobinGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget">
            <summary>Shim type of NLog.Targets.Wrappers.SplitGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.#ctor(NLog.Targets.Wrappers.SplitGroupTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of SplitGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.AllInstances.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of SplitGroupTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.AllInstances.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of SplitGroupTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.Constructor">
            <summary>Sets the shim of SplitGroupTarget.SplitGroupTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.ConstructorStringTargetArray">
            <summary>Sets the shim of SplitGroupTarget.SplitGroupTarget(String name, Target[] targets)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.ConstructorTargetArray">
            <summary>Sets the shim of SplitGroupTarget.SplitGroupTarget(Target[] targets)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.CountedWrapAsyncContinuationInt32">
            <summary>Sets the shim of SplitGroupTarget.CountedWrap(AsyncContinuation originalContinuation, Int32 counter)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.WriteAsyncLogEventInfo">
            <summary>Sets the shim of SplitGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the shim of SplitGroupTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimSplitGroupTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the shim of SplitGroupTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase">
            <summary>Shim type of NLog.Targets.Wrappers.WrapperTargetBase</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.#ctor(NLog.Targets.Wrappers.WrapperTargetBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.AllInstances.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.AllInstances.ToString01">
            <summary>Sets the shim of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.AllInstances.WrappedTargetGet">
            <summary>Sets the shim of WrapperTargetBase.get_WrappedTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.AllInstances.WrappedTargetSetTarget">
            <summary>Sets the shim of WrapperTargetBase.set_WrappedTarget(Target value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of WrapperTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.Constructor">
            <summary>Sets the shim of WrapperTargetBase.WrapperTargetBase()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.FlushAsyncAsyncContinuation">
            <summary>Sets the shim of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.ToString">
            <summary>Sets the shim of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.WrappedTargetGet">
            <summary>Sets the shim of WrapperTargetBase.get_WrappedTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.WrappedTargetSetTarget">
            <summary>Sets the shim of WrapperTargetBase.set_WrappedTarget(Target value)</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.ShimWrapperTargetBase.WriteLogEventInfo">
            <summary>Sets the shim of WrapperTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper">
            <summary>Stub type of NLog.Targets.Wrappers.AsyncTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.CloseTarget">
            <summary>Sets the stub of AsyncTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.CloseTarget01">
            <summary>Sets the stub of AsyncTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of AsyncTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of AsyncTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubAsyncTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.InitializeTarget">
            <summary>Sets the stub of AsyncTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.InitializeTarget01">
            <summary>Sets the stub of AsyncTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.StartInstantWriterTimer">
            <summary>Sets the stub of AsyncTargetWrapper.StartInstantWriterTimer()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.StartInstantWriterTimer01">
            <summary>Sets the stub of AsyncTargetWrapper.StartInstantWriterTimer()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.StartLazyWriterTimer">
            <summary>Sets the stub of AsyncTargetWrapper.StartLazyWriterTimer()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.StartLazyWriterTimer01">
            <summary>Sets the stub of AsyncTargetWrapper.StartLazyWriterTimer()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.StopLazyWriterThread">
            <summary>Sets the stub of AsyncTargetWrapper.StopLazyWriterThread()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.StopLazyWriterThread01">
            <summary>Sets the stub of AsyncTargetWrapper.StopLazyWriterThread()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.ToString">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.ToString01">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of AsyncTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the stub of AsyncTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of AsyncTargetWrapper.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of AsyncTargetWrapper.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAsyncTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper">
            <summary>Stub type of NLog.Targets.Wrappers.AutoFlushTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.CloseTarget">
            <summary>Sets the stub of AutoFlushTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.CloseTarget01">
            <summary>Sets the stub of AutoFlushTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of AutoFlushTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of AutoFlushTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubAutoFlushTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.InitializeTarget">
            <summary>Sets the stub of AutoFlushTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.InitializeTarget01">
            <summary>Sets the stub of AutoFlushTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.ToString">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.ToString01">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of AutoFlushTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the stub of AutoFlushTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubAutoFlushTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper">
            <summary>Stub type of NLog.Targets.Wrappers.BufferingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.CloseTarget">
            <summary>Sets the stub of BufferingTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.CloseTarget01">
            <summary>Sets the stub of BufferingTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of BufferingTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of BufferingTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubBufferingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.InitializeTarget">
            <summary>Sets the stub of BufferingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.InitializeTarget01">
            <summary>Sets the stub of BufferingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.ToString">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.ToString01">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of BufferingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the stub of BufferingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubBufferingTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase">
            <summary>Stub type of NLog.Targets.Wrappers.CompoundTargetBase</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.#ctor(NLog.Targets.Target[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.InitializeStub">
            <summary>Initializes a new instance of type StubCompoundTargetBase</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.ToString">
            <summary>Sets the stub of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.ToString01">
            <summary>Sets the stub of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.WriteAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubCompoundTargetBase.WriteLogEventInfo">
            <summary>Sets the stub of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget">
            <summary>Stub type of NLog.Targets.Wrappers.FallbackGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.InitializeStub">
            <summary>Initializes a new instance of type StubFallbackGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.ToString">
            <summary>Sets the stub of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.ToString01">
            <summary>Sets the stub of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of FallbackGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of FallbackGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFallbackGroupTarget.WriteLogEventInfo">
            <summary>Sets the stub of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubFilteringRule">
            <summary>Stub type of NLog.Targets.Wrappers.FilteringRule</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringRule.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubFilteringRule.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringRule.InitializeStub">
            <summary>Initializes a new instance of type StubFilteringRule</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubFilteringRule.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubFilteringRule.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper">
            <summary>Stub type of NLog.Targets.Wrappers.FilteringTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.#ctor(NLog.Targets.Target,NLog.Conditions.ConditionExpression)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.#ctor(System.String,NLog.Targets.Target,NLog.Conditions.ConditionExpression)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubFilteringTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.ToString">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.ToString01">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of FilteringTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the stub of FilteringTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubFilteringTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper">
            <summary>Stub type of NLog.Targets.Wrappers.ImpersonatingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.CloseTarget">
            <summary>Sets the stub of ImpersonatingTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.CloseTarget01">
            <summary>Sets the stub of ImpersonatingTargetWrapper.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of ImpersonatingTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of ImpersonatingTargetWrapper.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubImpersonatingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.InitializeTarget">
            <summary>Sets the stub of ImpersonatingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.InitializeTarget01">
            <summary>Sets the stub of ImpersonatingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.ToString">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.ToString01">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of ImpersonatingTargetWrapper.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of ImpersonatingTargetWrapper.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of ImpersonatingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the stub of ImpersonatingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of ImpersonatingTargetWrapper.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubImpersonatingTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of ImpersonatingTargetWrapper.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper">
            <summary>Stub type of NLog.Targets.Wrappers.LimitingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.TimeSpan)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubLimitingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.InitializeTarget">
            <summary>Sets the stub of LimitingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.InitializeTarget01">
            <summary>Sets the stub of LimitingTargetWrapper.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.ToString">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.ToString01">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of LimitingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the stub of LimitingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubLimitingTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper">
            <summary>Stub type of NLog.Targets.Wrappers.PostFilteringTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.#ctor(System.String,NLog.Targets.Target)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubPostFilteringTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.ToString">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.ToString01">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of PostFilteringTargetWrapper.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of PostFilteringTargetWrapper.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of PostFilteringTargetWrapper.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubPostFilteringTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of PostFilteringTargetWrapper.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget">
            <summary>Stub type of NLog.Targets.Wrappers.RandomizeGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.InitializeStub">
            <summary>Initializes a new instance of type StubRandomizeGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.ToString">
            <summary>Sets the stub of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.ToString01">
            <summary>Sets the stub of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of RandomizeGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of RandomizeGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRandomizeGroupTarget.WriteLogEventInfo">
            <summary>Sets the stub of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper">
            <summary>Stub type of NLog.Targets.Wrappers.RepeatingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.#ctor(System.String,NLog.Targets.Target,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubRepeatingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.ToString">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.ToString01">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of RepeatingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the stub of RepeatingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRepeatingTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper">
            <summary>Stub type of NLog.Targets.Wrappers.RetryingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.#ctor(System.String,NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.InitializeStub">
            <summary>Initializes a new instance of type StubRetryingTargetWrapper</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.ToString">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.ToString01">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of RetryingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.WriteAsyncLogEventInfo">
            <summary>Sets the stub of RetryingTargetWrapper.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of RetryingTargetWrapper.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of RetryingTargetWrapper.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of RetryingTargetWrapper.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of RetryingTargetWrapper.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRetryingTargetWrapper.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget">
            <summary>Stub type of NLog.Targets.Wrappers.RoundRobinGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.InitializeStub">
            <summary>Initializes a new instance of type StubRoundRobinGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.ToString">
            <summary>Sets the stub of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.ToString01">
            <summary>Sets the stub of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of RoundRobinGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of RoundRobinGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubRoundRobinGroupTarget.WriteLogEventInfo">
            <summary>Sets the stub of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget">
            <summary>Stub type of NLog.Targets.Wrappers.SplitGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.#ctor(System.String,NLog.Targets.Target[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of CompoundTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.InitializeStub">
            <summary>Initializes a new instance of type StubSplitGroupTarget</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.ToString">
            <summary>Sets the stub of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.ToString01">
            <summary>Sets the stub of CompoundTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of SplitGroupTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.Write(NLog.LogEventInfo)">
            <summary>Sets the stub of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of SplitGroupTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of SplitGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.WriteAsyncLogEventInfo">
            <summary>Sets the stub of SplitGroupTarget.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of SplitGroupTarget.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of SplitGroupTarget.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubSplitGroupTarget.WriteLogEventInfo">
            <summary>Sets the stub of CompoundTargetBase.Write(LogEventInfo logEvent)</summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase">
            <summary>Stub type of NLog.Targets.Wrappers.WrapperTargetBase</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.CloseTarget">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.CloseTarget01">
            <summary>Sets the stub of Target.CloseTarget()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.Dispose(System.Boolean)">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.DisposeBoolean">
            <summary>Sets the stub of Target.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.FlushAsyncAsyncContinuation">
            <summary>Sets the stub of WrapperTargetBase.FlushAsync(AsyncContinuation asyncContinuation)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.InitializeStub">
            <summary>Initializes a new instance of type StubWrapperTargetBase</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.InitializeTarget">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.InitializeTarget01">
            <summary>Sets the stub of Target.InitializeTarget()</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.ToString">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.ToString01">
            <summary>Sets the stub of WrapperTargetBase.ToString()</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.Write(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.WriteAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.WriteAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.Write(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo[])">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.WriteAsyncThreadSafe(System.Collections.Generic.IList{NLog.Common.AsyncLogEventInfo})">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.WriteAsyncThreadSafe(NLog.Common.AsyncLogEventInfo)">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.WriteAsyncThreadSafeAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo logEvent)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.WriteAsyncThreadSafeAsyncLogEventInfoArray">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(AsyncLogEventInfo[] logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.WriteAsyncThreadSafeIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.WriteAsyncThreadSafe(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.Fakes.StubWrapperTargetBase.WriteIListOfAsyncLogEventInfo">
            <summary>Sets the stub of Target.Write(IList`1&lt;AsyncLogEventInfo&gt; logEvents)</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimAccurateLocalTimeSource">
            <summary>Shim type of NLog.Time.AccurateLocalTimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimAccurateLocalTimeSource.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimAccurateLocalTimeSource.#ctor(NLog.Time.AccurateLocalTimeSource)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimAccurateLocalTimeSource.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateLocalTimeSource.AllInstances.FromSystemTimeDateTime">
            <summary>Sets the shim of AccurateLocalTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateLocalTimeSource.AllInstances.TimeGet">
            <summary>Sets the shim of AccurateLocalTimeSource.get_Time()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimAccurateLocalTimeSource.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimAccurateLocalTimeSource.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateLocalTimeSource.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateLocalTimeSource.Constructor">
            <summary>Sets the shim of AccurateLocalTimeSource.AccurateLocalTimeSource()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateLocalTimeSource.FromSystemTimeDateTime">
            <summary>Sets the shim of AccurateLocalTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateLocalTimeSource.TimeGet">
            <summary>Sets the shim of AccurateLocalTimeSource.get_Time()</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimAccurateUtcTimeSource">
            <summary>Shim type of NLog.Time.AccurateUtcTimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimAccurateUtcTimeSource.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimAccurateUtcTimeSource.#ctor(NLog.Time.AccurateUtcTimeSource)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimAccurateUtcTimeSource.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateUtcTimeSource.AllInstances.FromSystemTimeDateTime">
            <summary>Sets the shim of AccurateUtcTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateUtcTimeSource.AllInstances.TimeGet">
            <summary>Sets the shim of AccurateUtcTimeSource.get_Time()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimAccurateUtcTimeSource.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimAccurateUtcTimeSource.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateUtcTimeSource.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateUtcTimeSource.Constructor">
            <summary>Sets the shim of AccurateUtcTimeSource.AccurateUtcTimeSource()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateUtcTimeSource.FromSystemTimeDateTime">
            <summary>Sets the shim of AccurateUtcTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimAccurateUtcTimeSource.TimeGet">
            <summary>Sets the shim of AccurateUtcTimeSource.get_Time()</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimCachedTimeSource">
            <summary>Shim type of NLog.Time.CachedTimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimCachedTimeSource.#ctor(NLog.Time.CachedTimeSource)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimCachedTimeSource.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimCachedTimeSource.AllInstances.TimeGet">
            <summary>Sets the shim of CachedTimeSource.get_Time()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimCachedTimeSource.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimCachedTimeSource.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimCachedTimeSource.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimCachedTimeSource.Constructor">
            <summary>Sets the shim of CachedTimeSource.CachedTimeSource()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimCachedTimeSource.TimeGet">
            <summary>Sets the shim of CachedTimeSource.get_Time()</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimFastLocalTimeSource">
            <summary>Shim type of NLog.Time.FastLocalTimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimFastLocalTimeSource.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimFastLocalTimeSource.#ctor(NLog.Time.FastLocalTimeSource)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimFastLocalTimeSource.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastLocalTimeSource.AllInstances.FreshTimeGet">
            <summary>Sets the shim of FastLocalTimeSource.get_FreshTime()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastLocalTimeSource.AllInstances.FromSystemTimeDateTime">
            <summary>Sets the shim of FastLocalTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimFastLocalTimeSource.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimFastLocalTimeSource.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastLocalTimeSource.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastLocalTimeSource.Constructor">
            <summary>Sets the shim of FastLocalTimeSource.FastLocalTimeSource()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastLocalTimeSource.FreshTimeGet">
            <summary>Sets the shim of FastLocalTimeSource.get_FreshTime()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastLocalTimeSource.FromSystemTimeDateTime">
            <summary>Sets the shim of FastLocalTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimFastUtcTimeSource">
            <summary>Shim type of NLog.Time.FastUtcTimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimFastUtcTimeSource.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimFastUtcTimeSource.#ctor(NLog.Time.FastUtcTimeSource)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimFastUtcTimeSource.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastUtcTimeSource.AllInstances.FreshTimeGet">
            <summary>Sets the shim of FastUtcTimeSource.get_FreshTime()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastUtcTimeSource.AllInstances.FromSystemTimeDateTime">
            <summary>Sets the shim of FastUtcTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimFastUtcTimeSource.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimFastUtcTimeSource.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastUtcTimeSource.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastUtcTimeSource.Constructor">
            <summary>Sets the shim of FastUtcTimeSource.FastUtcTimeSource()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastUtcTimeSource.FreshTimeGet">
            <summary>Sets the shim of FastUtcTimeSource.get_FreshTime()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimFastUtcTimeSource.FromSystemTimeDateTime">
            <summary>Sets the shim of FastUtcTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimTimeSource">
            <summary>Shim type of NLog.Time.TimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimTimeSource.#ctor(NLog.Time.TimeSource)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimTimeSource.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimTimeSource.AllInstances.ToString01">
            <summary>Sets the shim of TimeSource.ToString()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimTimeSource.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimTimeSource.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimTimeSource.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimTimeSource.Constructor">
            <summary>Sets the shim of TimeSource.TimeSource()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimTimeSource.CurrentGet">
            <summary>Sets the shim of TimeSource.get_Current()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimTimeSource.CurrentSetTimeSource">
            <summary>Sets the shim of TimeSource.set_Current(TimeSource value)</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimTimeSource.StaticConstructor">
            <summary>Sets the shim of TimeSource.TimeSource()</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimTimeSource.ToString">
            <summary>Sets the shim of TimeSource.ToString()</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimTimeSourceAttribute">
            <summary>Shim type of NLog.Time.TimeSourceAttribute</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimTimeSourceAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimTimeSourceAttribute.#ctor(NLog.Time.TimeSourceAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:NLog.Time.Fakes.ShimTimeSourceAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimTimeSourceAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:NLog.Time.Fakes.ShimTimeSourceAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimTimeSourceAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:NLog.Time.Fakes.ShimTimeSourceAttribute.ConstructorString">
            <summary>Sets the shim of TimeSourceAttribute.TimeSourceAttribute(String name)</summary>
        </member>
        <member name="T:NLog.Time.Fakes.StubAccurateLocalTimeSource">
            <summary>Stub type of NLog.Time.AccurateLocalTimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubAccurateLocalTimeSource.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubAccurateLocalTimeSource.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubAccurateLocalTimeSource.FromSystemTime(System.DateTime)">
            <summary>Sets the stub of AccurateLocalTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubAccurateLocalTimeSource.FromSystemTimeDateTime">
            <summary>Sets the stub of AccurateLocalTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubAccurateLocalTimeSource.InitializeStub">
            <summary>Initializes a new instance of type StubAccurateLocalTimeSource</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubAccurateLocalTimeSource.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubAccurateLocalTimeSource.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubAccurateLocalTimeSource.Time">
            <summary>Sets the stub of AccurateLocalTimeSource.get_Time()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubAccurateLocalTimeSource.TimeGet">
            <summary>Sets the stub of AccurateLocalTimeSource.get_Time()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubAccurateLocalTimeSource.ToString">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubAccurateLocalTimeSource.ToString01">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="T:NLog.Time.Fakes.StubAccurateUtcTimeSource">
            <summary>Stub type of NLog.Time.AccurateUtcTimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubAccurateUtcTimeSource.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubAccurateUtcTimeSource.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubAccurateUtcTimeSource.FromSystemTime(System.DateTime)">
            <summary>Sets the stub of AccurateUtcTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubAccurateUtcTimeSource.FromSystemTimeDateTime">
            <summary>Sets the stub of AccurateUtcTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubAccurateUtcTimeSource.InitializeStub">
            <summary>Initializes a new instance of type StubAccurateUtcTimeSource</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubAccurateUtcTimeSource.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubAccurateUtcTimeSource.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubAccurateUtcTimeSource.Time">
            <summary>Sets the stub of AccurateUtcTimeSource.get_Time()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubAccurateUtcTimeSource.TimeGet">
            <summary>Sets the stub of AccurateUtcTimeSource.get_Time()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubAccurateUtcTimeSource.ToString">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubAccurateUtcTimeSource.ToString01">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="T:NLog.Time.Fakes.StubCachedTimeSource">
            <summary>Stub type of NLog.Time.CachedTimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubCachedTimeSource.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubCachedTimeSource.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubCachedTimeSource.FreshTime">
            <summary>Sets the stub of CachedTimeSource.get_FreshTime()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubCachedTimeSource.FreshTimeGet">
            <summary>Sets the stub of CachedTimeSource.get_FreshTime()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubCachedTimeSource.FromSystemTime(System.DateTime)">
            <summary>Sets the stub of TimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubCachedTimeSource.FromSystemTimeDateTime">
            <summary>Sets the stub of TimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubCachedTimeSource.InitializeStub">
            <summary>Initializes a new instance of type StubCachedTimeSource</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubCachedTimeSource.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubCachedTimeSource.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubCachedTimeSource.Time">
            <summary>Sets the stub of CachedTimeSource.get_Time()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubCachedTimeSource.TimeGet">
            <summary>Sets the stub of CachedTimeSource.get_Time()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubCachedTimeSource.ToString">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubCachedTimeSource.ToString01">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="T:NLog.Time.Fakes.StubFastLocalTimeSource">
            <summary>Stub type of NLog.Time.FastLocalTimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubFastLocalTimeSource.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubFastLocalTimeSource.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubFastLocalTimeSource.FreshTime">
            <summary>Sets the stub of FastLocalTimeSource.get_FreshTime()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubFastLocalTimeSource.FreshTimeGet">
            <summary>Sets the stub of FastLocalTimeSource.get_FreshTime()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubFastLocalTimeSource.FromSystemTime(System.DateTime)">
            <summary>Sets the stub of FastLocalTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubFastLocalTimeSource.FromSystemTimeDateTime">
            <summary>Sets the stub of FastLocalTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubFastLocalTimeSource.InitializeStub">
            <summary>Initializes a new instance of type StubFastLocalTimeSource</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubFastLocalTimeSource.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubFastLocalTimeSource.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubFastLocalTimeSource.Time">
            <summary>Sets the stub of CachedTimeSource.get_Time()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubFastLocalTimeSource.TimeGet">
            <summary>Sets the stub of CachedTimeSource.get_Time()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubFastLocalTimeSource.ToString">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubFastLocalTimeSource.ToString01">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="T:NLog.Time.Fakes.StubFastUtcTimeSource">
            <summary>Stub type of NLog.Time.FastUtcTimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubFastUtcTimeSource.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubFastUtcTimeSource.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubFastUtcTimeSource.FreshTime">
            <summary>Sets the stub of FastUtcTimeSource.get_FreshTime()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubFastUtcTimeSource.FreshTimeGet">
            <summary>Sets the stub of FastUtcTimeSource.get_FreshTime()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubFastUtcTimeSource.FromSystemTime(System.DateTime)">
            <summary>Sets the stub of FastUtcTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubFastUtcTimeSource.FromSystemTimeDateTime">
            <summary>Sets the stub of FastUtcTimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubFastUtcTimeSource.InitializeStub">
            <summary>Initializes a new instance of type StubFastUtcTimeSource</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubFastUtcTimeSource.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubFastUtcTimeSource.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubFastUtcTimeSource.Time">
            <summary>Sets the stub of CachedTimeSource.get_Time()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubFastUtcTimeSource.TimeGet">
            <summary>Sets the stub of CachedTimeSource.get_Time()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubFastUtcTimeSource.ToString">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubFastUtcTimeSource.ToString01">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="T:NLog.Time.Fakes.StubTimeSource">
            <summary>Stub type of NLog.Time.TimeSource</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubTimeSource.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubTimeSource.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubTimeSource.FromSystemTime(System.DateTime)">
            <summary>Sets the stub of TimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubTimeSource.FromSystemTimeDateTime">
            <summary>Sets the stub of TimeSource.FromSystemTime(DateTime systemTime)</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubTimeSource.InitializeStub">
            <summary>Initializes a new instance of type StubTimeSource</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubTimeSource.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubTimeSource.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:NLog.Time.Fakes.StubTimeSource.Time">
            <summary>Sets the stub of TimeSource.get_Time()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubTimeSource.TimeGet">
            <summary>Sets the stub of TimeSource.get_Time()</summary>
        </member>
        <member name="M:NLog.Time.Fakes.StubTimeSource.ToString">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
        <member name="F:NLog.Time.Fakes.StubTimeSource.ToString01">
            <summary>Sets the stub of TimeSource.ToString()</summary>
        </member>
    </members>
</doc>
